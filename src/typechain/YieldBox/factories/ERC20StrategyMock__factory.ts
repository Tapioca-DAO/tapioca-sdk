/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20StrategyMock,
  ERC20StrategyMockInterface,
} from "../ERC20StrategyMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IYieldBox",
        name: "yieldBox_",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "cheapWithdrawable",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "contractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposited",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenType",
    outputs: [
      {
        internalType: "enum TokenType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawable",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "yieldBox",
    outputs: [
      {
        internalType: "contract IYieldBox",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161072238038061072283398101604081905261002f9161005e565b6001600160a01b0391821660a05216608052610098565b6001600160a01b038116811461005b57600080fd5b50565b6000806040838503121561007157600080fd5b825161007c81610046565b602084015190925061008d81610046565b809150509250929050565b60805160a0516106496100d96000396000818161017b01526102900152600081816101cd015281816102070152818161032a015261036901526106496000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063afa91cc611610071578063afa91cc614610163578063ce845d1d1461011f578063de40657714610176578063e3575f051461011f578063f3fef3a3146101b5578063f6b4dfb4146101c857600080fd5b806306fdde03146100ae57806317d70f7c146100f457806330fa738c1461010a578063501883011461011f5780637284e41614610127575b600080fd5b6100de60405180604001604052806011815260200170455243323053747261746567794d6f636b60781b81525081565b6040516100eb91906104e3565b60405180910390f35b6100fc600081565b6040519081526020016100eb565b610112600181565b6040516100eb9190610516565b6100fc6101ef565b6100de6040518060400160405280601981526020017f4d6f636b20537472617465677920666f722074657374696e670000000000000081525081565b61017461017136600461053e565b50565b005b61019d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100eb565b6101746101c336600461056c565b61028e565b61019d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561025157600080fd5b505afa158015610265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102899190610598565b905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eb6d3a116040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e757600080fd5b505afa1580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f91906105b1565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316141561035c575050565b6103906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610394565b5050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916103f091906105d5565b6000604051808303816000865af19150503d806000811461042d576040519150601f19603f3d011682016040523d82523d6000602084013e610432565b606091505b509150915081801561045c57508051158061045c57508080602001905181019061045c91906105f1565b6104ac5760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015260640160405180910390fd5b5050505050565b60005b838110156104ce5781810151838201526020016104b6565b838111156104dd576000848401525b50505050565b60208152600082518060208401526105028160408501602087016104b3565b601f01601f19169190910160400192915050565b602081016005831061053857634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561055057600080fd5b5035919050565b6001600160a01b038116811461017157600080fd5b6000806040838503121561057f57600080fd5b823561058a81610557565b946020939093013593505050565b6000602082840312156105aa57600080fd5b5051919050565b6000602082840312156105c357600080fd5b81516105ce81610557565b9392505050565b600082516105e78184602087016104b3565b9190910192915050565b60006020828403121561060357600080fd5b815180151581146105ce57600080fdfea2646970667358221220706c16ca4910cc5ec7ef558249c0fcdc44b90747c982ac12860917a0205ceee364736f6c63430008090033";

type ERC20StrategyMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20StrategyMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20StrategyMock__factory extends ContractFactory {
  constructor(...args: ERC20StrategyMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20StrategyMock";
  }

  deploy(
    yieldBox_: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20StrategyMock> {
    return super.deploy(
      yieldBox_,
      token,
      overrides || {}
    ) as Promise<ERC20StrategyMock>;
  }
  getDeployTransaction(
    yieldBox_: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(yieldBox_, token, overrides || {});
  }
  attach(address: string): ERC20StrategyMock {
    return super.attach(address) as ERC20StrategyMock;
  }
  connect(signer: Signer): ERC20StrategyMock__factory {
    return super.connect(signer) as ERC20StrategyMock__factory;
  }
  static readonly contractName: "ERC20StrategyMock";
  public readonly contractName: "ERC20StrategyMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20StrategyMockInterface {
    return new utils.Interface(_abi) as ERC20StrategyMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20StrategyMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20StrategyMock;
  }
}
