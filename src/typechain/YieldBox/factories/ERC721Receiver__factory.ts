/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ERC721Receiver,
  ERC721ReceiverInterface,
} from "../ERC721Receiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100155760e2908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c63150b7a0214602857600080fd5b3460a057608036600319011260a05773ffffffffffffffffffffffffffffffffffffffff6004358181160360a8576024359081160360a05760643567ffffffffffffffff80821160a4573660238301121560a457816004013590811160a4573691016024011160a057630a85bd0160e11b8152602090f35b5080fd5b8380fd5b8280fdfea2646970667358221220f87d4fcb5efea9739125d02871affe692b8ec759f4481c0dbbc6a922b178470464736f6c63430008120033";

type ERC721ReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721ReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721Receiver__factory extends ContractFactory {
  constructor(...args: ERC721ReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC721Receiver";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721Receiver> {
    return super.deploy(overrides || {}) as Promise<ERC721Receiver>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC721Receiver {
    return super.attach(address) as ERC721Receiver;
  }
  override connect(signer: Signer): ERC721Receiver__factory {
    return super.connect(signer) as ERC721Receiver__factory;
  }
  static readonly contractName: "ERC721Receiver";

  public readonly contractName: "ERC721Receiver";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721ReceiverInterface {
    return new utils.Interface(_abi) as ERC721ReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721Receiver {
    return new Contract(address, _abi, signerOrProvider) as ERC721Receiver;
  }
}
