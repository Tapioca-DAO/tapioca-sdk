/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ReturnFalseERC20Mock,
  ReturnFalseERC20MockInterface,
} from "../../mocks/ReturnFalseERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000d6338038062000d638339810160408190526200003491620001f9565b83516200004990600190602087019062000086565b5082516200005f90600090602086019062000086565b5060ff90911660805260028190553360009081526003602052604090205550620002c19050565b828054620000949062000284565b90600052602060002090601f016020900481019282620000b8576000855562000103565b82601f10620000d357805160ff191683800117855562000103565b8280016001018555821562000103579182015b8281111562000103578251825591602001919060010190620000e6565b506200011192915062000115565b5090565b5b8082111562000111576000815560010162000116565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015457600080fd5b81516001600160401b03808211156200017157620001716200012c565b604051601f8301601f19908116603f011681019082821181831017156200019c576200019c6200012c565b81604052838152602092508683858801011115620001b957600080fd5b600091505b83821015620001dd5785820183015181830184015290820190620001be565b83821115620001ef5760008385830101525b9695505050505050565b600080600080608085870312156200021057600080fd5b84516001600160401b03808211156200022857600080fd5b620002368883890162000142565b955060208701519150808211156200024d57600080fd5b506200025c8782880162000142565b935050604085015160ff811681146200027457600080fd5b6060959095015193969295505050565b600181811c908216806200029957607f821691505b60208210811415620002bb57634e487b7160e01b600052602260045260246000fd5b50919050565b608051610a86620002dd60003960006101290152610a866000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a08231146101655780637ecebe001461018557806395d89b41146101a5578063a9059cbb146101ad578063d505accf146101c0578063dd62ed3e146101d557600080fd5b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100fa57806323b872dd14610111578063313ce567146101245780633644e5151461015d575b600080fd5b6100c1610200565b6040516100ce919061081d565b60405180910390f35b6100ea6100e536600461088e565b61028e565b60405190151581526020016100ce565b61010360025481565b6040519081526020016100ce565b6100ea61011f3660046108b8565b6102fb565b61014b7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016100ce565b61010361046c565b6101036101733660046108f4565b60036020526000908152604090205481565b6101036101933660046108f4565b60056020526000908152604090205481565b6100c16104c6565b6100ea6101bb36600461088e565b6104d3565b6101d36101ce36600461090f565b6105b9565b005b6101036101e3366004610982565b600460209081526000928352604080842090915290825290205481565b6001805461020d906109b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610239906109b5565b80156102865780601f1061025b57610100808354040283529160200191610286565b820191906000526020600020905b81548152906001019060200180831161026957829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102e99086815260200190565b60405180910390a35060015b92915050565b6001600160a01b038316600090815260036020526040812054821180159061034657506001600160a01b03841660009081526004602090815260408083203384529091529020548211155b801561037357506001600160a01b0383166000908152600360205260409020546103708382610a06565b10155b15610461576001600160a01b038416600090815260036020526040812080548492906103a0908490610a1e565b90915550506001600160a01b0384166000908152600460209081526040808320338452909152812080548492906103d8908490610a1e565b90915550506001600160a01b03831660009081526003602052604081208054849290610405908490610a06565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161045191815260200190565b60405180910390a3506001610465565b5060005b9392505050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218602082015246918101829052306060820152600091906080016040516020818303038152906040528051906020012091505090565b6000805461020d906109b5565b33600090815260036020526040812054821180159061051357506001600160a01b0383166000908152600360205260409020546105108382610a06565b10155b156105b1573360009081526003602052604081208054849290610537908490610a1e565b90915550506001600160a01b03831660009081526003602052604081208054849290610564908490610a06565b90915550506040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35060016102f5565b5060006102f5565b83421061060d5760405162461bcd60e51b815260206004820152601960248201527f52657475726e46616c736545524332303a20457870697265640000000000000060448201526064015b60405180910390fd5b600061061761046c565b6001600160a01b038916600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c9290919061066583610a35565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016106de92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015610749573d6000803e3d6000fd5b505050602060405103519050886001600160a01b0316816001600160a01b0316146107b65760405162461bcd60e51b815260206004820152601d60248201527f52657475726e46616c736545524332303a20496e76616c6964205369670000006044820152606401610604565b6001600160a01b038981166000818152600460209081526040808320948d16808452948252918290208b905590518a81527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b600060208083528351808285015260005b8181101561084a5785810183015185820160400152820161082e565b8181111561085c576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461088957600080fd5b919050565b600080604083850312156108a157600080fd5b6108aa83610872565b946020939093013593505050565b6000806000606084860312156108cd57600080fd5b6108d684610872565b92506108e460208501610872565b9150604084013590509250925092565b60006020828403121561090657600080fd5b61046582610872565b600080600080600080600060e0888a03121561092a57600080fd5b61093388610872565b965061094160208901610872565b95506040880135945060608801359350608088013560ff8116811461096557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561099557600080fd5b61099e83610872565b91506109ac60208401610872565b90509250929050565b600181811c908216806109c957607f821691505b602082108114156109ea57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610a1957610a196109f0565b500190565b600082821015610a3057610a306109f0565b500390565b6000600019821415610a4957610a496109f0565b506001019056fea26469706673582212206f10e420d9ee0057c9c67e8e458e5eabb648d7435672ca21d8ccdb683666b47364736f6c63430008090033";

type ReturnFalseERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReturnFalseERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReturnFalseERC20Mock__factory extends ContractFactory {
  constructor(...args: ReturnFalseERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ReturnFalseERC20Mock";
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    supply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ReturnFalseERC20Mock> {
    return super.deploy(
      name_,
      symbol_,
      decimals_,
      supply,
      overrides || {}
    ) as Promise<ReturnFalseERC20Mock>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    supply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      supply,
      overrides || {}
    );
  }
  override attach(address: string): ReturnFalseERC20Mock {
    return super.attach(address) as ReturnFalseERC20Mock;
  }
  override connect(signer: Signer): ReturnFalseERC20Mock__factory {
    return super.connect(signer) as ReturnFalseERC20Mock__factory;
  }
  static readonly contractName: "ReturnFalseERC20Mock";

  public readonly contractName: "ReturnFalseERC20Mock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReturnFalseERC20MockInterface {
    return new utils.Interface(_abi) as ReturnFalseERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReturnFalseERC20Mock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ReturnFalseERC20Mock;
  }
}
