/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ReturnFalseERC20Mock,
  ReturnFalseERC20MockInterface,
} from "../../mocks/ReturnFalseERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234620003395762000dbb803803806200001d816200033e565b928339810190608081830312620003395780516001600160401b0392908381116200033957816200005091840162000364565b91602091828201519085821162000339576200006e91830162000364565b60408201519160ff83168303620003395760600151938051918683116200024e576001928354928484811c941680156200032e575b878510146200022d578190601f94858111620002d8575b508790858311600114620002705760009262000264575b5050600019600383901b1c191690841b1783555b80519687116200024e576000548381811c9116801562000243575b868210146200022d57828111620001e2575b50849187116001146200017a579580928192600397986000946200016e575b50501b9160001990861b1c1916176000555b6080528260025533600052526040600020556040516109e49081620003d78239608051816105100152f35b01519250388062000131565b9590601f1982169060008052856000209160005b818110620001cc575097836003989910620001b3575b505050811b0160005562000143565b015160001983881b60f8161c19169055388080620001a4565b898301518455928501929187019187016200018e565b600080528560002083808a0160051c820192888b1062000223575b0160051c019084905b8281106200021657505062000112565b6000815501849062000206565b92508192620001fd565b634e487b7160e01b600052602260045260246000fd5b90607f169062000100565b634e487b7160e01b600052604160045260246000fd5b015190503880620000d1565b90869350601f1983169184600052896000209260005b8b828210620002c15750508411620002a7575b505050811b018355620000e5565b015160001960f88460031b161c1916905538808062000299565b8385015186558a9790950194938401930162000286565b90915085600052876000208580850160051c8201928a861062000324575b918891869594930160051c01915b82811062000314575050620000ba565b6000815585945088910162000304565b92508192620002f6565b93607f1693620000a3565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200024e57604052565b919080601f84011215620003395782516001600160401b0381116200024e576020906200039a601f8201601f191683016200033e565b92818452828287010111620003395760005b818110620003c257508260009394955001015290565b8581018301518482018401528201620003ac56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde03146105f457508063095ea7b31461058557806318160ddd1461056657806323b872dd14610534578063313ce567146104f65780633644e515146104d257806370a082311461049b5780637ecebe001461046457806395d89b4114610364578063a9059cbb1461032e578063d505accf146100f25763dd62ed3e146100a757600080fd5b346100ee57816003193601126100ee5760209282916100c461074f565b6100cc61076a565b916001600160a01b038092168452865283832091168252845220549051908152f35b8280fd5b5090346100ee5760e03660031901126100ee5761010d61074f565b9061011661076a565b9060443590606435946084359460ff861680960361032a57864210156102e75761013e610964565b956001600160a01b0380921696878a5260209660058852858b20998a549a6000198c146102d45760018c019055865190858a8301937f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c985528c8a850152169b8c606084015289608084015260a083015260c082015260c0815260e081019181831067ffffffffffffffff8411176102c15792828a95926101228f966080968c52825190209161010081019461190160f01b8652610102820152015260428152610206816106b2565b5190209087519182528482015260a4358782015260c435606082015282805260015afa156102b7578590885116036102765784875283528086208587528352808620829055519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a380f35b83606492519162461bcd60e51b8352820152601d60248201527f52657475726e46616c736545524332303a20496e76616c6964205369670000006044820152fd5b82513d89823e3d90fd5b634e487b7160e01b8d526041875260248dfd5b634e487b7160e01b8d526011875260248dfd5b506020606492519162461bcd60e51b8352820152601960248201527f52657475726e46616c736545524332303a2045787069726564000000000000006044820152fd5b8780fd5b50503461036057806003193601126103605760209061035761034e61074f565b602435906107b0565b90519015158152f35b5080fd5b5090346100ee57826003193601126100ee578051918380549060019082821c92828116801561045a575b6020958686108214610447575084885290811561042557506001146103cd575b6103c986866103bf828b03836106e4565b5191829182610706565b0390f35b8080949750527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061041257505050826103c9946103bf9282010194386103ae565b80548685018801529286019281016103f5565b60ff191687860152505050151560051b83010192506103bf826103c9386103ae565b634e487b7160e01b845260229052602483fd5b93607f169361038e565b50503461036057602036600319011261036057806020926001600160a01b0361048b61074f565b1681526005845220549051908152f35b50503461036057602036600319011261036057806020926001600160a01b036104c261074f565b1681526003845220549051908152f35b5050346103605781600319360112610360576020906104ef610964565b9051908152f35b5050346103605781600319360112610360576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5050346103605760603660031901126103605760209061035761055561074f565b61055d61076a565b60443591610869565b5050346103605781600319360112610360576020906002549051908152f35b50346100ee57816003193601126100ee576020926105a161074f565b918360243592839233825287526001600160a01b038282209516948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b92919050346106ae57836003193601126106ae5783600180549182821c9282811680156106a4575b60209586861082146104475750848852908115610425575060011461064c576103c986866103bf828b03836106e4565b9295508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b82841061069157505050826103c9946103bf9282010194386103ae565b8054868501880152928601928101610674565b93607f169361061c565b8380fd5b6080810190811067ffffffffffffffff8211176106ce57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176106ce57604052565b6020808252825181830181905290939260005b82811061073b57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610719565b600435906001600160a01b038216820361076557565b600080fd5b602435906001600160a01b038216820361076557565b9190820180921161078d57565b634e487b7160e01b600052601160045260246000fd5b9190820391821161078d57565b906000913383526003602052604090828285205410158061083b575b15610835576001600160a01b0382913386528286206107ec8682546107a3565b90551693848152600360205220610804838254610780565b9055519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a3600190565b50505090565b506001600160a01b0381168085526108568484872054610780565b90855260036020528285205411156107cc565b6001600160a01b038091169160009383855260209160038352604090828288205410158061094b575b80610921575b15610918577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef948291878952600386528289206108d68682546107a3565b905587895260048652828920338a5286528289206108f58682546107a3565b90551696878152600385522061090c838254610780565b905551908152a3600190565b50505050505090565b508481168088526003855261093984848a2054610780565b90885260038552828820541115610898565b5060048452818720338852845282828820541015610892565b60405160208101907f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692188252466040820152306060820152606081526109a8816106b2565b5190209056fea26469706673582212206e92d2920a56aeee405009ea0c7df3071c207625b01e83b8068a222bad8504fe64736f6c63430008120033";

type ReturnFalseERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReturnFalseERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReturnFalseERC20Mock__factory extends ContractFactory {
  constructor(...args: ReturnFalseERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ReturnFalseERC20Mock";
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    supply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ReturnFalseERC20Mock> {
    return super.deploy(
      name_,
      symbol_,
      decimals_,
      supply,
      overrides || {}
    ) as Promise<ReturnFalseERC20Mock>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    supply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      supply,
      overrides || {}
    );
  }
  override attach(address: string): ReturnFalseERC20Mock {
    return super.attach(address) as ReturnFalseERC20Mock;
  }
  override connect(signer: Signer): ReturnFalseERC20Mock__factory {
    return super.connect(signer) as ReturnFalseERC20Mock__factory;
  }
  static readonly contractName: "ReturnFalseERC20Mock";

  public readonly contractName: "ReturnFalseERC20Mock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReturnFalseERC20MockInterface {
    return new utils.Interface(_abi) as ReturnFalseERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReturnFalseERC20Mock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ReturnFalseERC20Mock;
  }
}
