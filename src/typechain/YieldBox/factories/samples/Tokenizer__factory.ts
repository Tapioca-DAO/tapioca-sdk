/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Tokenizer, TokenizerInterface } from "../../samples/Tokenizer";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract YieldBox",
        name: "_yieldBox",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sourceAsset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "share",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sourceAsset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "share",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "yieldBox",
    outputs: [
      {
        internalType: "contract YieldBox",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461007457601f61066e38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b0319169190911790556040516105de90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060409080825260048036101561001657600080fd5b600091823560e01c908163441a3e701461038c57508063de406577146103665763e2bbb1581461004557600080fd5b34610362576100533661048d565b9390808452602090600182528285205491821561018c575b506001600160a01b03908186541690813b15610188578451630208d92960e11b81523387820190815230602082015260408101929092526060820189905291879183919082908490829060800103925af1801561017e57908691610166575b50541694670de0b6b3a764000090818102918183041490151715610153578585963b1561014f57835163020da84160e61b8152948501928352336020840152604083019190915284918491908290849082906060015b03925af190811561014657506101335750f35b61013c906104a8565b6101435780f35b80fd5b513d84823e3d90fd5b8580fd5b634e487b7160e01b855260118452602485fd5b61016f906104a8565b61017a5784386100ca565b8480fd5b84513d88823e3d90fd5b8680fd5b85548451622b600360e21b815286810184905291906001600160a01b03168783602481845afa92831561035857889361033c575b506101fe602a875180956902a37b5b2b734bd32b2160b51b868301526101ee815180928886860191016104f4565b810103600a8101865201846104d2565b8551634e41a1fb60e01b81528781018590528881602481855afa9081156103325791888a85608094828c83988293610306575b5061028a8161026d602161029d94518097601d60fa1b8a83015261025d815180928c86860191016104f4565b81010360018101885201866104d2565b519b8c998a98632482ee2760e01b8a528901526084880190610583565b6003199384888303016024890152610583565b6012604487015285810392830160648701525201925af180156102fc576102c5575b5061006b565b81813d83116102f5575b6102d981836104d2565b8101031261014f575163ffffffff81160361017a5738806102bf565b503d6102cf565b85513d89823e3d90fd5b61029d91935061032a61028a913d8086833e61032281836104d2565b810190610517565b939150610231565b87513d8b823e3d90fd5b6103519193503d808a833e61032281836104d2565b91386101c0565b86513d8a823e3d90fd5b5080fd5b8284346103625781600319360112610362576001600160a01b0360209254169051908152f35b939050346104895761039d3661048d565b8185949294526001602052828520546001600160a01b03908187541690670de0b6b3a76400009081850291858304148515171561047657823b1561047257634f752fb360e11b8a52858a0190815233602082015260408101919091528791899182908490829060600103925af1801561017e5761045e575b858097505416803b1561014f578351630208d92960e11b815230938101938452336020850152604084019590955260608301919091528491849190829084908290608001610120565b94909561046a906104a8565b938590610415565b8880fd5b634e487b7160e01b895260118652602489fd5b8280fd5b60409060031901126104a3576004359060243590565b600080fd5b67ffffffffffffffff81116104bc57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176104bc57604052565b60005b8381106105075750506000910152565b81810151838201526020016104f7565b6020818303126104a357805167ffffffffffffffff918282116104a357019082601f830112156104a35781519081116104bc5760405192610562601f8301601f1916602001856104d2565b818452602082840101116104a35761058091602080850191016104f4565b90565b9060209161059c815180928185528580860191016104f4565b601f01601f191601019056fea2646970667358221220546afcda890e38414d32afe608fa8e6592807b0e8012c8ce7a29e81d46cda94564736f6c63430008120033";

type TokenizerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenizerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Tokenizer__factory extends ContractFactory {
  constructor(...args: TokenizerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Tokenizer";
  }

  override deploy(
    _yieldBox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Tokenizer> {
    return super.deploy(_yieldBox, overrides || {}) as Promise<Tokenizer>;
  }
  override getDeployTransaction(
    _yieldBox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_yieldBox, overrides || {});
  }
  override attach(address: string): Tokenizer {
    return super.attach(address) as Tokenizer;
  }
  override connect(signer: Signer): Tokenizer__factory {
    return super.connect(signer) as Tokenizer__factory;
  }
  static readonly contractName: "Tokenizer";

  public readonly contractName: "Tokenizer";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenizerInterface {
    return new utils.Interface(_abi) as TokenizerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Tokenizer {
    return new Contract(address, _abi, signerOrProvider) as Tokenizer;
  }
}
