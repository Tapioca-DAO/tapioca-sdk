/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { YieldApp, YieldAppInterface } from "../../samples/YieldApp";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract YieldBox",
        name: "_yieldBox",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "yieldBox",
    outputs: [
      {
        internalType: "contract YieldBox",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461007357601f61011d38819003918201601f19168301916001600160401b038311848410176100785780849260209460405283398101031261007357516001600160a01b0381169081900361007357600080546001600160a01b031916919091179055604051608e908161008f8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080806040526004361015601257600080fd5b600090813560e01c63de40657714602857600080fd5b346054578160031936011260545773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b5080fdfea26469706673582212200de4a46123ca7a374efe0019df2b46807f212965bcc3ad9b8f2b52f6ad9cdd6f64736f6c63430008120033";

type YieldAppConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YieldAppConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YieldApp__factory extends ContractFactory {
  constructor(...args: YieldAppConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "YieldApp";
  }

  override deploy(
    _yieldBox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<YieldApp> {
    return super.deploy(_yieldBox, overrides || {}) as Promise<YieldApp>;
  }
  override getDeployTransaction(
    _yieldBox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_yieldBox, overrides || {});
  }
  override attach(address: string): YieldApp {
    return super.attach(address) as YieldApp;
  }
  override connect(signer: Signer): YieldApp__factory {
    return super.connect(signer) as YieldApp__factory;
  }
  static readonly contractName: "YieldApp";

  public readonly contractName: "YieldApp";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YieldAppInterface {
    return new utils.Interface(_abi) as YieldAppInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YieldApp {
    return new Contract(address, _abi, signerOrProvider) as YieldApp;
  }
}
