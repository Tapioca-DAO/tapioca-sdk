/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type RebaseStruct = {
  elastic: PromiseOrValue<BigNumberish>;
  base: PromiseOrValue<BigNumberish>;
};

export type RebaseStructOutput = [BigNumber, BigNumber] & {
  elastic: BigNumber;
  base: BigNumber;
};

export interface LendingPairInterface extends utils.Interface {
  functions: {
    "accrue(uint256)": FunctionFragment;
    "addAsset(uint256,address,uint256)": FunctionFragment;
    "addCollateral(uint256,address,uint256)": FunctionFragment;
    "borrow(uint256,address,uint256)": FunctionFragment;
    "createMarket(uint32,uint32,address,bytes)": FunctionFragment;
    "init(bytes)": FunctionFragment;
    "liquidate(uint256,address,uint256,address,address)": FunctionFragment;
    "marketList(uint256)": FunctionFragment;
    "markets(uint256)": FunctionFragment;
    "masterContract()": FunctionFragment;
    "removeAsset(uint256,address,uint256)": FunctionFragment;
    "removeCollateral(uint256,address,uint256)": FunctionFragment;
    "repay(uint256,address,uint256)": FunctionFragment;
    "updateExchangeRate(uint256)": FunctionFragment;
    "yieldBox()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accrue"
      | "accrue(uint256)"
      | "addAsset"
      | "addAsset(uint256,address,uint256)"
      | "addCollateral"
      | "addCollateral(uint256,address,uint256)"
      | "borrow"
      | "borrow(uint256,address,uint256)"
      | "createMarket"
      | "createMarket(uint32,uint32,address,bytes)"
      | "init"
      | "init(bytes)"
      | "liquidate"
      | "liquidate(uint256,address,uint256,address,address)"
      | "marketList"
      | "marketList(uint256)"
      | "markets"
      | "markets(uint256)"
      | "masterContract"
      | "masterContract()"
      | "removeAsset"
      | "removeAsset(uint256,address,uint256)"
      | "removeCollateral"
      | "removeCollateral(uint256,address,uint256)"
      | "repay"
      | "repay(uint256,address,uint256)"
      | "updateExchangeRate"
      | "updateExchangeRate(uint256)"
      | "yieldBox"
      | "yieldBox()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accrue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "accrue(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addAsset",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addAsset(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket(uint32,uint32,address,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "init(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate(uint256,address,uint256,address,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketList(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "markets(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterContract()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsset",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsset(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repay(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yieldBox()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "accrue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accrue(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAsset(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrow(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket(uint32,uint32,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "init(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidate(uint256,address,uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketList(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markets(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterContract()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repay(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldBox()", data: BytesLike): Result;

  events: {
    "LogAccrue(uint256,uint64,uint256)": EventFragment;
    "LogAddAsset(address,address,uint256,uint256)": EventFragment;
    "LogAddCollateral(address,address,uint256)": EventFragment;
    "LogBorrow(address,address,uint256,uint256)": EventFragment;
    "LogExchangeRate(uint256)": EventFragment;
    "LogLiquidate(uint256,address,uint256,address,address)": EventFragment;
    "LogRemoveAsset(address,address,uint256,uint256)": EventFragment;
    "LogRemoveCollateral(address,address,uint256)": EventFragment;
    "LogRepay(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAccrue"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAccrue(uint256,uint64,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddAsset"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAddAsset(address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddCollateral"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAddCollateral(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrow"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogBorrow(address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExchangeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExchangeRate(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogLiquidate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogLiquidate(uint256,address,uint256,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveAsset"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogRemoveAsset(address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveCollateral"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogRemoveCollateral(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRepay"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogRepay(address,address,uint256,uint256)"
  ): EventFragment;
}

export interface LogAccrueEventObject {
  accruedAmount: BigNumber;
  rate: BigNumber;
  utilization: BigNumber;
}
export type LogAccrueEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogAccrueEventObject
>;

export type LogAccrueEventFilter = TypedEventFilter<LogAccrueEvent>;

export interface LogAddAssetEventObject {
  from: string;
  to: string;
  share: BigNumber;
  fraction: BigNumber;
}
export type LogAddAssetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogAddAssetEventObject
>;

export type LogAddAssetEventFilter = TypedEventFilter<LogAddAssetEvent>;

export interface LogAddCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogAddCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  LogAddCollateralEventObject
>;

export type LogAddCollateralEventFilter =
  TypedEventFilter<LogAddCollateralEvent>;

export interface LogBorrowEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  part: BigNumber;
}
export type LogBorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogBorrowEventObject
>;

export type LogBorrowEventFilter = TypedEventFilter<LogBorrowEvent>;

export interface LogExchangeRateEventObject {
  rate: BigNumber;
}
export type LogExchangeRateEvent = TypedEvent<
  [BigNumber],
  LogExchangeRateEventObject
>;

export type LogExchangeRateEventFilter = TypedEventFilter<LogExchangeRateEvent>;

export interface LogLiquidateEventObject {
  marketId: BigNumber;
  user: string;
  borrowPart: BigNumber;
  to: string;
  swapper: string;
}
export type LogLiquidateEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string],
  LogLiquidateEventObject
>;

export type LogLiquidateEventFilter = TypedEventFilter<LogLiquidateEvent>;

export interface LogRemoveAssetEventObject {
  from: string;
  to: string;
  share: BigNumber;
  fraction: BigNumber;
}
export type LogRemoveAssetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogRemoveAssetEventObject
>;

export type LogRemoveAssetEventFilter = TypedEventFilter<LogRemoveAssetEvent>;

export interface LogRemoveCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogRemoveCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  LogRemoveCollateralEventObject
>;

export type LogRemoveCollateralEventFilter =
  TypedEventFilter<LogRemoveCollateralEvent>;

export interface LogRepayEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  part: BigNumber;
}
export type LogRepayEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogRepayEventObject
>;

export type LogRepayEventFilter = TypedEventFilter<LogRepayEvent>;

export interface LendingPair extends BaseContract {
  contractName: "LendingPair";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LendingPairInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accrue(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "accrue(uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addAsset(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addAsset(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addCollateral(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrow(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMarket(
      collateral_: PromiseOrValue<BigNumberish>,
      asset_: PromiseOrValue<BigNumberish>,
      oracle_: PromiseOrValue<string>,
      oracleData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createMarket(uint32,uint32,address,bytes)"(
      collateral_: PromiseOrValue<BigNumberish>,
      asset_: PromiseOrValue<BigNumberish>,
      oracle_: PromiseOrValue<string>,
      oracleData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    init(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "init(bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      marketId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "liquidate(uint256,address,uint256,address,address)"(
      marketId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "marketList(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    markets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        RebaseStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        collateral: number;
        asset: number;
        oracle: string;
        oracleData: string;
        totalCollateralShare: BigNumber;
        totalAssetShares: BigNumber;
        totalBorrow: RebaseStructOutput;
        exchangeRate: BigNumber;
        interestPerSecond: BigNumber;
        lastAccrued: BigNumber;
        assetId: number;
      }
    >;

    "markets(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        RebaseStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        collateral: number;
        asset: number;
        oracle: string;
        oracleData: string;
        totalCollateralShare: BigNumber;
        totalAssetShares: BigNumber;
        totalBorrow: RebaseStructOutput;
        exchangeRate: BigNumber;
        interestPerSecond: BigNumber;
        lastAccrued: BigNumber;
        assetId: number;
      }
    >;

    masterContract(overrides?: CallOverrides): Promise<[string]>;

    "masterContract()"(overrides?: CallOverrides): Promise<[string]>;

    removeAsset(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeAsset(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeCollateral(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "repay(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExchangeRate(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateExchangeRate(uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;

    "yieldBox()"(overrides?: CallOverrides): Promise<[string]>;
  };

  accrue(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "accrue(uint256)"(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addAsset(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addAsset(uint256,address,uint256)"(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addCollateral(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addCollateral(uint256,address,uint256)"(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrow(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256,address,uint256)"(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMarket(
    collateral_: PromiseOrValue<BigNumberish>,
    asset_: PromiseOrValue<BigNumberish>,
    oracle_: PromiseOrValue<string>,
    oracleData_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createMarket(uint32,uint32,address,bytes)"(
    collateral_: PromiseOrValue<BigNumberish>,
    asset_: PromiseOrValue<BigNumberish>,
    oracle_: PromiseOrValue<string>,
    oracleData_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  init(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "init(bytes)"(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    marketId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    maxBorrowPart: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "liquidate(uint256,address,uint256,address,address)"(
    marketId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    maxBorrowPart: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "marketList(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  markets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      RebaseStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      collateral: number;
      asset: number;
      oracle: string;
      oracleData: string;
      totalCollateralShare: BigNumber;
      totalAssetShares: BigNumber;
      totalBorrow: RebaseStructOutput;
      exchangeRate: BigNumber;
      interestPerSecond: BigNumber;
      lastAccrued: BigNumber;
      assetId: number;
    }
  >;

  "markets(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      RebaseStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      collateral: number;
      asset: number;
      oracle: string;
      oracleData: string;
      totalCollateralShare: BigNumber;
      totalAssetShares: BigNumber;
      totalBorrow: RebaseStructOutput;
      exchangeRate: BigNumber;
      interestPerSecond: BigNumber;
      lastAccrued: BigNumber;
      assetId: number;
    }
  >;

  masterContract(overrides?: CallOverrides): Promise<string>;

  "masterContract()"(overrides?: CallOverrides): Promise<string>;

  removeAsset(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    fraction: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeAsset(uint256,address,uint256)"(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    fraction: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeCollateral(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeCollateral(uint256,address,uint256)"(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    part: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "repay(uint256,address,uint256)"(
    marketId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    part: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExchangeRate(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateExchangeRate(uint256)"(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  "yieldBox()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accrue(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "accrue(uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addAsset(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addAsset(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCollateral(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    "borrow(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    createMarket(
      collateral_: PromiseOrValue<BigNumberish>,
      asset_: PromiseOrValue<BigNumberish>,
      oracle_: PromiseOrValue<string>,
      oracleData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "createMarket(uint32,uint32,address,bytes)"(
      collateral_: PromiseOrValue<BigNumberish>,
      asset_: PromiseOrValue<BigNumberish>,
      oracle_: PromiseOrValue<string>,
      oracleData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    init(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      marketId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidate(uint256,address,uint256,address,address)"(
      marketId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    marketList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketList(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        RebaseStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        collateral: number;
        asset: number;
        oracle: string;
        oracleData: string;
        totalCollateralShare: BigNumber;
        totalAssetShares: BigNumber;
        totalBorrow: RebaseStructOutput;
        exchangeRate: BigNumber;
        interestPerSecond: BigNumber;
        lastAccrued: BigNumber;
        assetId: number;
      }
    >;

    "markets(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        RebaseStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        collateral: number;
        asset: number;
        oracle: string;
        oracleData: string;
        totalCollateralShare: BigNumber;
        totalAssetShares: BigNumber;
        totalBorrow: RebaseStructOutput;
        exchangeRate: BigNumber;
        interestPerSecond: BigNumber;
        lastAccrued: BigNumber;
        assetId: number;
      }
    >;

    masterContract(overrides?: CallOverrides): Promise<string>;

    "masterContract()"(overrides?: CallOverrides): Promise<string>;

    removeAsset(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeAsset(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeCollateral(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repay(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateExchangeRate(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { updated: boolean; rate: BigNumber }>;

    "updateExchangeRate(uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { updated: boolean; rate: BigNumber }>;

    yieldBox(overrides?: CallOverrides): Promise<string>;

    "yieldBox()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogAccrue(uint256,uint64,uint256)"(
      accruedAmount?: null,
      rate?: null,
      utilization?: null
    ): LogAccrueEventFilter;
    LogAccrue(
      accruedAmount?: null,
      rate?: null,
      utilization?: null
    ): LogAccrueEventFilter;

    "LogAddAsset(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null,
      fraction?: null
    ): LogAddAssetEventFilter;
    LogAddAsset(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null,
      fraction?: null
    ): LogAddAssetEventFilter;

    "LogAddCollateral(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogAddCollateralEventFilter;
    LogAddCollateral(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogAddCollateralEventFilter;

    "LogBorrow(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      part?: null
    ): LogBorrowEventFilter;
    LogBorrow(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      part?: null
    ): LogBorrowEventFilter;

    "LogExchangeRate(uint256)"(rate?: null): LogExchangeRateEventFilter;
    LogExchangeRate(rate?: null): LogExchangeRateEventFilter;

    "LogLiquidate(uint256,address,uint256,address,address)"(
      marketId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      borrowPart?: null,
      to?: null,
      swapper?: null
    ): LogLiquidateEventFilter;
    LogLiquidate(
      marketId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      borrowPart?: null,
      to?: null,
      swapper?: null
    ): LogLiquidateEventFilter;

    "LogRemoveAsset(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null,
      fraction?: null
    ): LogRemoveAssetEventFilter;
    LogRemoveAsset(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null,
      fraction?: null
    ): LogRemoveAssetEventFilter;

    "LogRemoveCollateral(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogRemoveCollateralEventFilter;
    LogRemoveCollateral(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogRemoveCollateralEventFilter;

    "LogRepay(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      part?: null
    ): LogRepayEventFilter;
    LogRepay(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      part?: null
    ): LogRepayEventFilter;
  };

  estimateGas: {
    accrue(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "accrue(uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addAsset(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addAsset(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addCollateral(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrow(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "borrow(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMarket(
      collateral_: PromiseOrValue<BigNumberish>,
      asset_: PromiseOrValue<BigNumberish>,
      oracle_: PromiseOrValue<string>,
      oracleData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createMarket(uint32,uint32,address,bytes)"(
      collateral_: PromiseOrValue<BigNumberish>,
      asset_: PromiseOrValue<BigNumberish>,
      oracle_: PromiseOrValue<string>,
      oracleData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    init(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "init(bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidate(
      marketId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "liquidate(uint256,address,uint256,address,address)"(
      marketId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketList(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "markets(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterContract(overrides?: CallOverrides): Promise<BigNumber>;

    "masterContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAsset(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeAsset(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeCollateral(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "repay(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExchangeRate(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateExchangeRate(uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;

    "yieldBox()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accrue(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "accrue(uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addAsset(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addAsset(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addCollateral(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMarket(
      collateral_: PromiseOrValue<BigNumberish>,
      asset_: PromiseOrValue<BigNumberish>,
      oracle_: PromiseOrValue<string>,
      oracleData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createMarket(uint32,uint32,address,bytes)"(
      collateral_: PromiseOrValue<BigNumberish>,
      asset_: PromiseOrValue<BigNumberish>,
      oracle_: PromiseOrValue<string>,
      oracleData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    init(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "init(bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      marketId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "liquidate(uint256,address,uint256,address,address)"(
      marketId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketList(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "markets(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "masterContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAsset(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeAsset(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeCollateral(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "repay(uint256,address,uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangeRate(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateExchangeRate(uint256)"(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yieldBox()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
