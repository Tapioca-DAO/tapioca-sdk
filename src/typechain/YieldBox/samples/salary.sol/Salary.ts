/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SalaryInterface extends utils.Interface {
  functions: {
    "available(uint256)": FunctionFragment;
    "batch(bytes[],bool)": FunctionFragment;
    "cancel(uint256,address)": FunctionFragment;
    "create(address,uint256,uint32,uint32,uint32,uint128)": FunctionFragment;
    "info(uint256)": FunctionFragment;
    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "salaries(uint256)": FunctionFragment;
    "salaryCount()": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "yieldBox()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "available"
      | "available(uint256)"
      | "batch"
      | "batch(bytes[],bool)"
      | "cancel"
      | "cancel(uint256,address)"
      | "create"
      | "create(address,uint256,uint32,uint32,uint32,uint128)"
      | "info"
      | "info(uint256)"
      | "permitToken"
      | "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"
      | "salaries"
      | "salaries(uint256)"
      | "salaryCount"
      | "salaryCount()"
      | "withdraw"
      | "withdraw(uint256,address)"
      | "yieldBox"
      | "yieldBox()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "available",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "available(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "batch(bytes[],bool)",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create(address,uint256,uint32,uint32,uint32,uint128)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "info",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "info(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "permitToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "salaries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "salaries(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "salaryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salaryCount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yieldBox()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "available(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batch(bytes[],bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancel(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "create(address,uint256,uint32,uint32,uint32,uint128)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "info(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salaries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "salaries(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salaryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salaryCount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldBox()", data: BytesLike): Result;

  events: {
    "LogCancel(uint256,address,uint256)": EventFragment;
    "LogCreate(address,address,uint256,uint32,uint32,uint32,uint256,uint256)": EventFragment;
    "LogWithdraw(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogCancel"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogCancel(uint256,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCreate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogCreate(address,address,uint256,uint32,uint32,uint32,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogWithdraw(uint256,address,uint256)"
  ): EventFragment;
}

export interface LogCancelEventObject {
  salaryId: BigNumber;
  to: string;
  share: BigNumber;
}
export type LogCancelEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LogCancelEventObject
>;

export type LogCancelEventFilter = TypedEventFilter<LogCancelEvent>;

export interface LogCreateEventObject {
  funder: string;
  recipient: string;
  assetId: BigNumber;
  cliffTimestamp: number;
  endTimestamp: number;
  cliffPercent: number;
  totalShare: BigNumber;
  salaryId: BigNumber;
}
export type LogCreateEvent = TypedEvent<
  [string, string, BigNumber, number, number, number, BigNumber, BigNumber],
  LogCreateEventObject
>;

export type LogCreateEventFilter = TypedEventFilter<LogCreateEvent>;

export interface LogWithdrawEventObject {
  salaryId: BigNumber;
  to: string;
  share: BigNumber;
}
export type LogWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  LogWithdrawEventObject
>;

export type LogWithdrawEventFilter = TypedEventFilter<LogWithdrawEvent>;

export interface Salary extends BaseContract {
  contractName: "Salary";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SalaryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    available(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    "available(uint256)"(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    batch(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "batch(bytes[],bool)"(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "cancel(uint256,address)"(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create(
      recipient: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      cliffTimestamp: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      cliffPercent: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "create(address,uint256,uint32,uint32,uint32,uint128)"(
      recipient: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      cliffTimestamp: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      cliffPercent: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    info(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnAmount: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        amount: BigNumber;
        availableAmount: BigNumber;
      }
    >;

    "info(uint256)"(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnAmount: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        amount: BigNumber;
        availableAmount: BigNumber;
      }
    >;

    permitToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    salaries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnShare: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        share: BigNumber;
      }
    >;

    "salaries(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnShare: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        share: BigNumber;
      }
    >;

    salaryCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "salaryCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address)"(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;

    "yieldBox()"(overrides?: CallOverrides): Promise<[string]>;
  };

  available(
    salaryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "available(uint256)"(
    salaryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batch(
    calls: PromiseOrValue<BytesLike>[],
    revertOnFail: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "batch(bytes[],bool)"(
    calls: PromiseOrValue<BytesLike>[],
    revertOnFail: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    salaryId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "cancel(uint256,address)"(
    salaryId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create(
    recipient: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    cliffTimestamp: PromiseOrValue<BigNumberish>,
    endTimestamp: PromiseOrValue<BigNumberish>,
    cliffPercent: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "create(address,uint256,uint32,uint32,uint32,uint128)"(
    recipient: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    cliffTimestamp: PromiseOrValue<BigNumberish>,
    endTimestamp: PromiseOrValue<BigNumberish>,
    cliffPercent: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  info(
    salaryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      funder: string;
      recipient: string;
      assetId: BigNumber;
      withdrawnAmount: BigNumber;
      cliffTimestamp: number;
      endTimestamp: number;
      cliffPercent: BigNumber;
      amount: BigNumber;
      availableAmount: BigNumber;
    }
  >;

  "info(uint256)"(
    salaryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      funder: string;
      recipient: string;
      assetId: BigNumber;
      withdrawnAmount: BigNumber;
      cliffTimestamp: number;
      endTimestamp: number;
      cliffPercent: BigNumber;
      amount: BigNumber;
      availableAmount: BigNumber;
    }
  >;

  permitToken(
    token: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    token: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  salaries(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber
    ] & {
      funder: string;
      recipient: string;
      assetId: BigNumber;
      withdrawnShare: BigNumber;
      cliffTimestamp: number;
      endTimestamp: number;
      cliffPercent: BigNumber;
      share: BigNumber;
    }
  >;

  "salaries(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber
    ] & {
      funder: string;
      recipient: string;
      assetId: BigNumber;
      withdrawnShare: BigNumber;
      cliffTimestamp: number;
      endTimestamp: number;
      cliffPercent: BigNumber;
      share: BigNumber;
    }
  >;

  salaryCount(overrides?: CallOverrides): Promise<BigNumber>;

  "salaryCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    salaryId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address)"(
    salaryId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  "yieldBox()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    available(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "available(uint256)"(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batch(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "batch(bytes[],bool)"(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancel(uint256,address)"(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      recipient: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      cliffTimestamp: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      cliffPercent: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { salaryId: BigNumber; share: BigNumber }
    >;

    "create(address,uint256,uint32,uint32,uint32,uint128)"(
      recipient: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      cliffTimestamp: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      cliffPercent: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { salaryId: BigNumber; share: BigNumber }
    >;

    info(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnAmount: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        amount: BigNumber;
        availableAmount: BigNumber;
      }
    >;

    "info(uint256)"(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnAmount: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        amount: BigNumber;
        availableAmount: BigNumber;
      }
    >;

    permitToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    salaries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnShare: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        share: BigNumber;
      }
    >;

    "salaries(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnShare: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        share: BigNumber;
      }
    >;

    salaryCount(overrides?: CallOverrides): Promise<BigNumber>;

    "salaryCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address)"(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldBox(overrides?: CallOverrides): Promise<string>;

    "yieldBox()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogCancel(uint256,address,uint256)"(
      salaryId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogCancelEventFilter;
    LogCancel(
      salaryId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogCancelEventFilter;

    "LogCreate(address,address,uint256,uint32,uint32,uint32,uint256,uint256)"(
      funder?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      cliffTimestamp?: null,
      endTimestamp?: null,
      cliffPercent?: null,
      totalShare?: null,
      salaryId?: null
    ): LogCreateEventFilter;
    LogCreate(
      funder?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      cliffTimestamp?: null,
      endTimestamp?: null,
      cliffPercent?: null,
      totalShare?: null,
      salaryId?: null
    ): LogCreateEventFilter;

    "LogWithdraw(uint256,address,uint256)"(
      salaryId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogWithdrawEventFilter;
    LogWithdraw(
      salaryId?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogWithdrawEventFilter;
  };

  estimateGas: {
    available(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "available(uint256)"(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batch(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "batch(bytes[],bool)"(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "cancel(uint256,address)"(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create(
      recipient: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      cliffTimestamp: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      cliffPercent: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "create(address,uint256,uint32,uint32,uint32,uint128)"(
      recipient: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      cliffTimestamp: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      cliffPercent: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    info(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "info(uint256)"(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permitToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    salaries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "salaries(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    salaryCount(overrides?: CallOverrides): Promise<BigNumber>;

    "salaryCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;

    "yieldBox()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    available(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "available(uint256)"(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batch(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "batch(bytes[],bool)"(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "cancel(uint256,address)"(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create(
      recipient: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      cliffTimestamp: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      cliffPercent: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "create(address,uint256,uint32,uint32,uint32,uint128)"(
      recipient: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      cliffTimestamp: PromiseOrValue<BigNumberish>,
      endTimestamp: PromiseOrValue<BigNumberish>,
      cliffPercent: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    info(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "info(uint256)"(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permitToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    salaries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "salaries(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    salaryCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "salaryCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address)"(
      salaryId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yieldBox()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
