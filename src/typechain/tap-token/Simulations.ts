/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SimulationsInterface extends utils.Interface {
  functions: {
    "computeAM(uint256,uint256,uint256)": FunctionFragment;
    "computeCumulative(uint256,uint256,uint256)": FunctionFragment;
    "test()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeAM"
      | "computeAM(uint256,uint256,uint256)"
      | "computeCumulative"
      | "computeCumulative(uint256,uint256,uint256)"
      | "test"
      | "test()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeAM",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAM(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeCumulative",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeCumulative(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "test", values?: undefined): string;
  encodeFunctionData(functionFragment: "test()", values?: undefined): string;

  decodeFunctionResult(functionFragment: "computeAM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeAM(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCumulative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCumulative(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test()", data: BytesLike): Result;

  events: {};
}

export interface Simulations extends BaseContract {
  contractName: "Simulations";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimulationsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeAM(
      am: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "computeAM(uint256,uint256,uint256)"(
      am: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeCumulative(
      weight: PromiseOrValue<BigNumberish>,
      cumulative: PromiseOrValue<BigNumberish>,
      am: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "computeCumulative(uint256,uint256,uint256)"(
      weight: PromiseOrValue<BigNumberish>,
      cumulative: PromiseOrValue<BigNumberish>,
      am: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    test(overrides?: CallOverrides): Promise<[void]>;

    "test()"(overrides?: CallOverrides): Promise<[void]>;
  };

  computeAM(
    am: PromiseOrValue<BigNumberish>,
    m: PromiseOrValue<BigNumberish>,
    p: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "computeAM(uint256,uint256,uint256)"(
    am: PromiseOrValue<BigNumberish>,
    m: PromiseOrValue<BigNumberish>,
    p: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeCumulative(
    weight: PromiseOrValue<BigNumberish>,
    cumulative: PromiseOrValue<BigNumberish>,
    am: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "computeCumulative(uint256,uint256,uint256)"(
    weight: PromiseOrValue<BigNumberish>,
    cumulative: PromiseOrValue<BigNumberish>,
    am: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  test(overrides?: CallOverrides): Promise<void>;

  "test()"(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    computeAM(
      am: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeAM(uint256,uint256,uint256)"(
      am: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeCumulative(
      weight: PromiseOrValue<BigNumberish>,
      cumulative: PromiseOrValue<BigNumberish>,
      am: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeCumulative(uint256,uint256,uint256)"(
      weight: PromiseOrValue<BigNumberish>,
      cumulative: PromiseOrValue<BigNumberish>,
      am: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    test(overrides?: CallOverrides): Promise<void>;

    "test()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    computeAM(
      am: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeAM(uint256,uint256,uint256)"(
      am: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeCumulative(
      weight: PromiseOrValue<BigNumberish>,
      cumulative: PromiseOrValue<BigNumberish>,
      am: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeCumulative(uint256,uint256,uint256)"(
      weight: PromiseOrValue<BigNumberish>,
      cumulative: PromiseOrValue<BigNumberish>,
      am: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    test(overrides?: CallOverrides): Promise<BigNumber>;

    "test()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    computeAM(
      am: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeAM(uint256,uint256,uint256)"(
      am: PromiseOrValue<BigNumberish>,
      m: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeCumulative(
      weight: PromiseOrValue<BigNumberish>,
      cumulative: PromiseOrValue<BigNumberish>,
      am: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeCumulative(uint256,uint256,uint256)"(
      weight: PromiseOrValue<BigNumberish>,
      cumulative: PromiseOrValue<BigNumberish>,
      am: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    test(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "test()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
