/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AirdropBrokerInterface extends utils.Interface {
  functions: {
    "EPOCH_DURATION()": FunctionFragment;
    "LAST_EPOCH()": FunctionFragment;
    "PCNFT()": FunctionFragment;
    "PHASE_1_DISCOUNT()": FunctionFragment;
    "PHASE_2_AMOUNT_PER_USER(uint256)": FunctionFragment;
    "PHASE_2_DISCOUNT_PER_USER(uint256)": FunctionFragment;
    "PHASE_3_AMOUNT_PER_USER()": FunctionFragment;
    "PHASE_3_DISCOUNT()": FunctionFragment;
    "PHASE_4_DISCOUNT()": FunctionFragment;
    "aoTAP()": FunctionFragment;
    "aoTAPBrokerClaim()": FunctionFragment;
    "aoTAPCalls(uint256,uint256)": FunctionFragment;
    "collectPaymentTokens(address[])": FunctionFragment;
    "daoRecoverTAP()": FunctionFragment;
    "epoch()": FunctionFragment;
    "epochTAPValuation()": FunctionFragment;
    "exerciseOption(uint256,address,uint256)": FunctionFragment;
    "getOTCDealDetails(uint256,address,uint256)": FunctionFragment;
    "lastEpochUpdate()": FunctionFragment;
    "newEpoch()": FunctionFragment;
    "owner()": FunctionFragment;
    "participate(bytes)": FunctionFragment;
    "paused()": FunctionFragment;
    "paymentTokenBeneficiary()": FunctionFragment;
    "paymentTokens(address)": FunctionFragment;
    "pearlmit()": FunctionFragment;
    "phase1Users(address)": FunctionFragment;
    "phase2MerkleRoots(uint256)": FunctionFragment;
    "phase4Users(address)": FunctionFragment;
    "registerUsersForPhase(uint256,address[],uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "setPaymentToken(address,address,bytes)": FunctionFragment;
    "setPaymentTokenBeneficiary(address)": FunctionFragment;
    "setPearlmit(address)": FunctionFragment;
    "setPhase2MerkleRoots(bytes32[4])": FunctionFragment;
    "setTapOracle(address,bytes)": FunctionFragment;
    "setTapToken(address)": FunctionFragment;
    "tapOracle()": FunctionFragment;
    "tapOracleData()": FunctionFragment;
    "tapToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userParticipation(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EPOCH_DURATION"
      | "EPOCH_DURATION()"
      | "LAST_EPOCH"
      | "LAST_EPOCH()"
      | "PCNFT"
      | "PCNFT()"
      | "PHASE_1_DISCOUNT"
      | "PHASE_1_DISCOUNT()"
      | "PHASE_2_AMOUNT_PER_USER"
      | "PHASE_2_AMOUNT_PER_USER(uint256)"
      | "PHASE_2_DISCOUNT_PER_USER"
      | "PHASE_2_DISCOUNT_PER_USER(uint256)"
      | "PHASE_3_AMOUNT_PER_USER"
      | "PHASE_3_AMOUNT_PER_USER()"
      | "PHASE_3_DISCOUNT"
      | "PHASE_3_DISCOUNT()"
      | "PHASE_4_DISCOUNT"
      | "PHASE_4_DISCOUNT()"
      | "aoTAP"
      | "aoTAP()"
      | "aoTAPBrokerClaim"
      | "aoTAPBrokerClaim()"
      | "aoTAPCalls"
      | "aoTAPCalls(uint256,uint256)"
      | "collectPaymentTokens"
      | "collectPaymentTokens(address[])"
      | "daoRecoverTAP"
      | "daoRecoverTAP()"
      | "epoch"
      | "epoch()"
      | "epochTAPValuation"
      | "epochTAPValuation()"
      | "exerciseOption"
      | "exerciseOption(uint256,address,uint256)"
      | "getOTCDealDetails"
      | "getOTCDealDetails(uint256,address,uint256)"
      | "lastEpochUpdate"
      | "lastEpochUpdate()"
      | "newEpoch"
      | "newEpoch()"
      | "owner"
      | "owner()"
      | "participate"
      | "participate(bytes)"
      | "paused"
      | "paused()"
      | "paymentTokenBeneficiary"
      | "paymentTokenBeneficiary()"
      | "paymentTokens"
      | "paymentTokens(address)"
      | "pearlmit"
      | "pearlmit()"
      | "phase1Users"
      | "phase1Users(address)"
      | "phase2MerkleRoots"
      | "phase2MerkleRoots(uint256)"
      | "phase4Users"
      | "phase4Users(address)"
      | "registerUsersForPhase"
      | "registerUsersForPhase(uint256,address[],uint256[])"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "setPause"
      | "setPause(bool)"
      | "setPaymentToken"
      | "setPaymentToken(address,address,bytes)"
      | "setPaymentTokenBeneficiary"
      | "setPaymentTokenBeneficiary(address)"
      | "setPearlmit"
      | "setPearlmit(address)"
      | "setPhase2MerkleRoots"
      | "setPhase2MerkleRoots(bytes32[4])"
      | "setTapOracle"
      | "setTapOracle(address,bytes)"
      | "setTapToken"
      | "setTapToken(address)"
      | "tapOracle"
      | "tapOracle()"
      | "tapOracleData"
      | "tapOracleData()"
      | "tapToken"
      | "tapToken()"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "userParticipation"
      | "userParticipation(address,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EPOCH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EPOCH_DURATION()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAST_EPOCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAST_EPOCH()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PCNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "PCNFT()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PHASE_1_DISCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE_1_DISCOUNT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE_2_AMOUNT_PER_USER",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE_2_AMOUNT_PER_USER(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE_2_DISCOUNT_PER_USER",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE_2_DISCOUNT_PER_USER(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE_3_AMOUNT_PER_USER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE_3_AMOUNT_PER_USER()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE_3_DISCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE_3_DISCOUNT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE_4_DISCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PHASE_4_DISCOUNT()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aoTAP", values?: undefined): string;
  encodeFunctionData(functionFragment: "aoTAP()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aoTAPBrokerClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aoTAPBrokerClaim()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aoTAPCalls",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "aoTAPCalls(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPaymentTokens",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPaymentTokens(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "daoRecoverTAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoRecoverTAP()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "epoch()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochTAPValuation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochTAPValuation()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exerciseOption",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exerciseOption(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOTCDealDetails",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOTCDealDetails(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpochUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpochUpdate()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newEpoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newEpoch()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participate",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "participate(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentTokenBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTokenBeneficiary()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTokens(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pearlmit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pearlmit()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "phase1Users",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "phase1Users(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "phase2MerkleRoots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "phase2MerkleRoots(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "phase4Users",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "phase4Users(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUsersForPhase",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUsersForPhase(uint256,address[],uint256[])",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPause(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentToken(address,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentTokenBeneficiary",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentTokenBeneficiary(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPearlmit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPearlmit(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPhase2MerkleRoots",
    values: [
      [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPhase2MerkleRoots(bytes32[4])",
    values: [
      [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTapOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTapOracle(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTapToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTapToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "tapOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tapOracle()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tapOracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tapOracleData()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tapToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tapToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userParticipation",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userParticipation(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LAST_EPOCH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LAST_EPOCH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PCNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PCNFT()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_1_DISCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_1_DISCOUNT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_2_AMOUNT_PER_USER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_2_AMOUNT_PER_USER(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_2_DISCOUNT_PER_USER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_2_DISCOUNT_PER_USER(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_3_AMOUNT_PER_USER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_3_AMOUNT_PER_USER()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_3_DISCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_3_DISCOUNT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_4_DISCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PHASE_4_DISCOUNT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aoTAP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aoTAP()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aoTAPBrokerClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aoTAPBrokerClaim()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aoTAPCalls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aoTAPCalls(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPaymentTokens(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoRecoverTAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoRecoverTAP()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochTAPValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochTAPValuation()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exerciseOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exerciseOption(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOTCDealDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOTCDealDetails(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEpochUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastEpochUpdate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newEpoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newEpoch()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participate(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokenBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokenBeneficiary()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokens(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pearlmit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pearlmit()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "phase1Users",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "phase1Users(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "phase2MerkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "phase2MerkleRoots(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "phase4Users",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "phase4Users(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUsersForPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUsersForPhase(uint256,address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPause(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentToken(address,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentTokenBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentTokenBeneficiary(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPearlmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPearlmit(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPhase2MerkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPhase2MerkleRoots(bytes32[4])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTapOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTapOracle(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTapToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTapToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tapOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tapOracle()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tapOracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tapOracleData()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tapToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tapToken()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userParticipation(address,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "ExerciseOption(uint256,address,address,uint256,uint256)": EventFragment;
    "NewEpoch(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Participate(uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PearlmitUpdated(address,address)": EventFragment;
    "Phase2MerkleRootsUpdated()": EventFragment;
    "SetPaymentToken(address,address,bytes)": EventFragment;
    "SetTapOracle(address,bytes)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExerciseOption"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExerciseOption(uint256,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEpoch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEpoch(uint256,uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Participate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Participate(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PearlmitUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PearlmitUpdated(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Phase2MerkleRootsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Phase2MerkleRootsUpdated()"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPaymentToken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetPaymentToken(address,address,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTapOracle"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetTapOracle(address,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused(address)"): EventFragment;
}

export interface ExerciseOptionEventObject {
  epoch: BigNumber;
  to: string;
  paymentToken: string;
  aoTapTokenID: BigNumber;
  amount: BigNumber;
}
export type ExerciseOptionEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  ExerciseOptionEventObject
>;

export type ExerciseOptionEventFilter = TypedEventFilter<ExerciseOptionEvent>;

export interface NewEpochEventObject {
  epoch: BigNumber;
  epochTAPValuation: BigNumber;
}
export type NewEpochEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewEpochEventObject
>;

export type NewEpochEventFilter = TypedEventFilter<NewEpochEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ParticipateEventObject {
  epoch: BigNumber;
  aoTAPTokenID: BigNumber;
}
export type ParticipateEvent = TypedEvent<
  [BigNumber, BigNumber],
  ParticipateEventObject
>;

export type ParticipateEventFilter = TypedEventFilter<ParticipateEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PearlmitUpdatedEventObject {
  oldPearlmit: string;
  newPearlmit: string;
}
export type PearlmitUpdatedEvent = TypedEvent<
  [string, string],
  PearlmitUpdatedEventObject
>;

export type PearlmitUpdatedEventFilter = TypedEventFilter<PearlmitUpdatedEvent>;

export interface Phase2MerkleRootsUpdatedEventObject {}
export type Phase2MerkleRootsUpdatedEvent = TypedEvent<
  [],
  Phase2MerkleRootsUpdatedEventObject
>;

export type Phase2MerkleRootsUpdatedEventFilter =
  TypedEventFilter<Phase2MerkleRootsUpdatedEvent>;

export interface SetPaymentTokenEventObject {
  paymentToken: string;
  oracle: string;
  oracleData: string;
}
export type SetPaymentTokenEvent = TypedEvent<
  [string, string, string],
  SetPaymentTokenEventObject
>;

export type SetPaymentTokenEventFilter = TypedEventFilter<SetPaymentTokenEvent>;

export interface SetTapOracleEventObject {
  oracle: string;
  oracleData: string;
}
export type SetTapOracleEvent = TypedEvent<
  [string, string],
  SetTapOracleEventObject
>;

export type SetTapOracleEventFilter = TypedEventFilter<SetTapOracleEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface AirdropBroker extends BaseContract {
  contractName: "AirdropBroker";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirdropBrokerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EPOCH_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    LAST_EPOCH(overrides?: CallOverrides): Promise<[BigNumber]>;

    "LAST_EPOCH()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PCNFT(overrides?: CallOverrides): Promise<[string]>;

    "PCNFT()"(overrides?: CallOverrides): Promise<[string]>;

    PHASE_1_DISCOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PHASE_1_DISCOUNT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PHASE_2_AMOUNT_PER_USER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "PHASE_2_AMOUNT_PER_USER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    PHASE_2_DISCOUNT_PER_USER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "PHASE_2_DISCOUNT_PER_USER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    PHASE_3_AMOUNT_PER_USER(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PHASE_3_AMOUNT_PER_USER()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PHASE_3_DISCOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PHASE_3_DISCOUNT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PHASE_4_DISCOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PHASE_4_DISCOUNT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    aoTAP(overrides?: CallOverrides): Promise<[string]>;

    "aoTAP()"(overrides?: CallOverrides): Promise<[string]>;

    aoTAPBrokerClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "aoTAPBrokerClaim()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aoTAPCalls(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "aoTAPCalls(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collectPaymentTokens(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "collectPaymentTokens(address[])"(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoRecoverTAP(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "daoRecoverTAP()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochTAPValuation(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epochTAPValuation()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    exerciseOption(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exerciseOption(uint256,address,uint256)"(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOTCDealDetails(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        eligibleTapAmount: BigNumber;
        paymentTokenAmount: BigNumber;
        tapAmount: BigNumber;
      }
    >;

    "getOTCDealDetails(uint256,address,uint256)"(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        eligibleTapAmount: BigNumber;
        paymentTokenAmount: BigNumber;
        tapAmount: BigNumber;
      }
    >;

    lastEpochUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastEpochUpdate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    newEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newEpoch()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    participate(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "participate(bytes)"(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    paymentTokenBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    "paymentTokenBeneficiary()"(overrides?: CallOverrides): Promise<[string]>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oracle: string; oracleData: string }>;

    "paymentTokens(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oracle: string; oracleData: string }>;

    pearlmit(overrides?: CallOverrides): Promise<[string]>;

    "pearlmit()"(overrides?: CallOverrides): Promise<[string]>;

    phase1Users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "phase1Users(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    phase2MerkleRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "phase2MerkleRoots(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    phase4Users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "phase4Users(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerUsersForPhase(
      _phase: PromiseOrValue<BigNumberish>,
      _users: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerUsersForPhase(uint256,address[],uint256[])"(
      _phase: PromiseOrValue<BigNumberish>,
      _users: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPause(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPause(bool)"(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPaymentToken(address,address,bytes)"(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentTokenBeneficiary(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPaymentTokenBeneficiary(address)"(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPearlmit(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPearlmit(address)"(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPhase2MerkleRoots(
      _merkleRoots: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPhase2MerkleRoots(bytes32[4])"(
      _merkleRoots: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTapOracle(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTapOracle(address,bytes)"(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTapToken(
      _tapToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTapToken(address)"(
      _tapToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tapOracle(overrides?: CallOverrides): Promise<[string]>;

    "tapOracle()"(overrides?: CallOverrides): Promise<[string]>;

    tapOracleData(overrides?: CallOverrides): Promise<[string]>;

    "tapOracleData()"(overrides?: CallOverrides): Promise<[string]>;

    tapToken(overrides?: CallOverrides): Promise<[string]>;

    "tapToken()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userParticipation(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "userParticipation(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  EPOCH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  LAST_EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

  "LAST_EPOCH()"(overrides?: CallOverrides): Promise<BigNumber>;

  PCNFT(overrides?: CallOverrides): Promise<string>;

  "PCNFT()"(overrides?: CallOverrides): Promise<string>;

  PHASE_1_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  "PHASE_1_DISCOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

  PHASE_2_AMOUNT_PER_USER(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  "PHASE_2_AMOUNT_PER_USER(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  PHASE_2_DISCOUNT_PER_USER(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  "PHASE_2_DISCOUNT_PER_USER(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  PHASE_3_AMOUNT_PER_USER(overrides?: CallOverrides): Promise<BigNumber>;

  "PHASE_3_AMOUNT_PER_USER()"(overrides?: CallOverrides): Promise<BigNumber>;

  PHASE_3_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  "PHASE_3_DISCOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

  PHASE_4_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  "PHASE_4_DISCOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

  aoTAP(overrides?: CallOverrides): Promise<string>;

  "aoTAP()"(overrides?: CallOverrides): Promise<string>;

  aoTAPBrokerClaim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "aoTAPBrokerClaim()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aoTAPCalls(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "aoTAPCalls(uint256,uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collectPaymentTokens(
    _paymentTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "collectPaymentTokens(address[])"(
    _paymentTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoRecoverTAP(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "daoRecoverTAP()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  epochTAPValuation(overrides?: CallOverrides): Promise<BigNumber>;

  "epochTAPValuation()"(overrides?: CallOverrides): Promise<BigNumber>;

  exerciseOption(
    _aoTAPTokenID: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _tapAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exerciseOption(uint256,address,uint256)"(
    _aoTAPTokenID: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _tapAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOTCDealDetails(
    _aoTAPTokenID: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _tapAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      eligibleTapAmount: BigNumber;
      paymentTokenAmount: BigNumber;
      tapAmount: BigNumber;
    }
  >;

  "getOTCDealDetails(uint256,address,uint256)"(
    _aoTAPTokenID: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _tapAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      eligibleTapAmount: BigNumber;
      paymentTokenAmount: BigNumber;
      tapAmount: BigNumber;
    }
  >;

  lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  "lastEpochUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

  newEpoch(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newEpoch()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  participate(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "participate(bytes)"(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  paymentTokenBeneficiary(overrides?: CallOverrides): Promise<string>;

  "paymentTokenBeneficiary()"(overrides?: CallOverrides): Promise<string>;

  paymentTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { oracle: string; oracleData: string }>;

  "paymentTokens(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { oracle: string; oracleData: string }>;

  pearlmit(overrides?: CallOverrides): Promise<string>;

  "pearlmit()"(overrides?: CallOverrides): Promise<string>;

  phase1Users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "phase1Users(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  phase2MerkleRoots(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "phase2MerkleRoots(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  phase4Users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "phase4Users(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerUsersForPhase(
    _phase: PromiseOrValue<BigNumberish>,
    _users: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerUsersForPhase(uint256,address[],uint256[])"(
    _phase: PromiseOrValue<BigNumberish>,
    _users: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPause(
    _pauseState: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPause(bool)"(
    _pauseState: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentToken(
    _paymentToken: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _oracleData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPaymentToken(address,address,bytes)"(
    _paymentToken: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _oracleData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentTokenBeneficiary(
    _paymentTokenBeneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPaymentTokenBeneficiary(address)"(
    _paymentTokenBeneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPearlmit(
    _pearlmit: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPearlmit(address)"(
    _pearlmit: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPhase2MerkleRoots(
    _merkleRoots: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPhase2MerkleRoots(bytes32[4])"(
    _merkleRoots: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTapOracle(
    _tapOracle: PromiseOrValue<string>,
    _tapOracleData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTapOracle(address,bytes)"(
    _tapOracle: PromiseOrValue<string>,
    _tapOracleData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTapToken(
    _tapToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTapToken(address)"(
    _tapToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tapOracle(overrides?: CallOverrides): Promise<string>;

  "tapOracle()"(overrides?: CallOverrides): Promise<string>;

  tapOracleData(overrides?: CallOverrides): Promise<string>;

  "tapOracleData()"(overrides?: CallOverrides): Promise<string>;

  tapToken(overrides?: CallOverrides): Promise<string>;

  "tapToken()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userParticipation(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "userParticipation(address,uint256)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    EPOCH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    LAST_EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

    "LAST_EPOCH()"(overrides?: CallOverrides): Promise<BigNumber>;

    PCNFT(overrides?: CallOverrides): Promise<string>;

    "PCNFT()"(overrides?: CallOverrides): Promise<string>;

    PHASE_1_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "PHASE_1_DISCOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    PHASE_2_AMOUNT_PER_USER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    "PHASE_2_AMOUNT_PER_USER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    PHASE_2_DISCOUNT_PER_USER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    "PHASE_2_DISCOUNT_PER_USER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    PHASE_3_AMOUNT_PER_USER(overrides?: CallOverrides): Promise<BigNumber>;

    "PHASE_3_AMOUNT_PER_USER()"(overrides?: CallOverrides): Promise<BigNumber>;

    PHASE_3_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "PHASE_3_DISCOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    PHASE_4_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "PHASE_4_DISCOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    aoTAP(overrides?: CallOverrides): Promise<string>;

    "aoTAP()"(overrides?: CallOverrides): Promise<string>;

    aoTAPBrokerClaim(overrides?: CallOverrides): Promise<void>;

    "aoTAPBrokerClaim()"(overrides?: CallOverrides): Promise<void>;

    aoTAPCalls(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "aoTAPCalls(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectPaymentTokens(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "collectPaymentTokens(address[])"(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    daoRecoverTAP(overrides?: CallOverrides): Promise<void>;

    "daoRecoverTAP()"(overrides?: CallOverrides): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochTAPValuation(overrides?: CallOverrides): Promise<BigNumber>;

    "epochTAPValuation()"(overrides?: CallOverrides): Promise<BigNumber>;

    exerciseOption(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "exerciseOption(uint256,address,uint256)"(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOTCDealDetails(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        eligibleTapAmount: BigNumber;
        paymentTokenAmount: BigNumber;
        tapAmount: BigNumber;
      }
    >;

    "getOTCDealDetails(uint256,address,uint256)"(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        eligibleTapAmount: BigNumber;
        paymentTokenAmount: BigNumber;
        tapAmount: BigNumber;
      }
    >;

    lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    "lastEpochUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

    newEpoch(overrides?: CallOverrides): Promise<void>;

    "newEpoch()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    participate(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "participate(bytes)"(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    paymentTokenBeneficiary(overrides?: CallOverrides): Promise<string>;

    "paymentTokenBeneficiary()"(overrides?: CallOverrides): Promise<string>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oracle: string; oracleData: string }>;

    "paymentTokens(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oracle: string; oracleData: string }>;

    pearlmit(overrides?: CallOverrides): Promise<string>;

    "pearlmit()"(overrides?: CallOverrides): Promise<string>;

    phase1Users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phase1Users(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phase2MerkleRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "phase2MerkleRoots(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    phase4Users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phase4Users(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerUsersForPhase(
      _phase: PromiseOrValue<BigNumberish>,
      _users: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "registerUsersForPhase(uint256,address[],uint256[])"(
      _phase: PromiseOrValue<BigNumberish>,
      _users: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setPause(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPause(bool)"(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPaymentToken(address,address,bytes)"(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentTokenBeneficiary(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPaymentTokenBeneficiary(address)"(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPearlmit(
      _pearlmit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPearlmit(address)"(
      _pearlmit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPhase2MerkleRoots(
      _merkleRoots: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPhase2MerkleRoots(bytes32[4])"(
      _merkleRoots: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setTapOracle(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTapOracle(address,bytes)"(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTapToken(
      _tapToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTapToken(address)"(
      _tapToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tapOracle(overrides?: CallOverrides): Promise<string>;

    "tapOracle()"(overrides?: CallOverrides): Promise<string>;

    tapOracleData(overrides?: CallOverrides): Promise<string>;

    "tapOracleData()"(overrides?: CallOverrides): Promise<string>;

    tapToken(overrides?: CallOverrides): Promise<string>;

    "tapToken()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userParticipation(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "userParticipation(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ExerciseOption(uint256,address,address,uint256,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      paymentToken?: PromiseOrValue<string> | null,
      aoTapTokenID?: null,
      amount?: null
    ): ExerciseOptionEventFilter;
    ExerciseOption(
      epoch?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      paymentToken?: PromiseOrValue<string> | null,
      aoTapTokenID?: null,
      amount?: null
    ): ExerciseOptionEventFilter;

    "NewEpoch(uint256,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      epochTAPValuation?: null
    ): NewEpochEventFilter;
    NewEpoch(
      epoch?: PromiseOrValue<BigNumberish> | null,
      epochTAPValuation?: null
    ): NewEpochEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Participate(uint256,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      aoTAPTokenID?: null
    ): ParticipateEventFilter;
    Participate(
      epoch?: PromiseOrValue<BigNumberish> | null,
      aoTAPTokenID?: null
    ): ParticipateEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PearlmitUpdated(address,address)"(
      oldPearlmit?: null,
      newPearlmit?: null
    ): PearlmitUpdatedEventFilter;
    PearlmitUpdated(
      oldPearlmit?: null,
      newPearlmit?: null
    ): PearlmitUpdatedEventFilter;

    "Phase2MerkleRootsUpdated()"(): Phase2MerkleRootsUpdatedEventFilter;
    Phase2MerkleRootsUpdated(): Phase2MerkleRootsUpdatedEventFilter;

    "SetPaymentToken(address,address,bytes)"(
      paymentToken?: null,
      oracle?: null,
      oracleData?: null
    ): SetPaymentTokenEventFilter;
    SetPaymentToken(
      paymentToken?: null,
      oracle?: null,
      oracleData?: null
    ): SetPaymentTokenEventFilter;

    "SetTapOracle(address,bytes)"(
      oracle?: null,
      oracleData?: null
    ): SetTapOracleEventFilter;
    SetTapOracle(oracle?: null, oracleData?: null): SetTapOracleEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    EPOCH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    LAST_EPOCH(overrides?: CallOverrides): Promise<BigNumber>;

    "LAST_EPOCH()"(overrides?: CallOverrides): Promise<BigNumber>;

    PCNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "PCNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    PHASE_1_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "PHASE_1_DISCOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    PHASE_2_AMOUNT_PER_USER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "PHASE_2_AMOUNT_PER_USER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PHASE_2_DISCOUNT_PER_USER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "PHASE_2_DISCOUNT_PER_USER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PHASE_3_AMOUNT_PER_USER(overrides?: CallOverrides): Promise<BigNumber>;

    "PHASE_3_AMOUNT_PER_USER()"(overrides?: CallOverrides): Promise<BigNumber>;

    PHASE_3_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "PHASE_3_DISCOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    PHASE_4_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "PHASE_4_DISCOUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    aoTAP(overrides?: CallOverrides): Promise<BigNumber>;

    "aoTAP()"(overrides?: CallOverrides): Promise<BigNumber>;

    aoTAPBrokerClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "aoTAPBrokerClaim()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aoTAPCalls(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "aoTAPCalls(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectPaymentTokens(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "collectPaymentTokens(address[])"(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoRecoverTAP(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "daoRecoverTAP()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochTAPValuation(overrides?: CallOverrides): Promise<BigNumber>;

    "epochTAPValuation()"(overrides?: CallOverrides): Promise<BigNumber>;

    exerciseOption(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exerciseOption(uint256,address,uint256)"(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOTCDealDetails(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOTCDealDetails(uint256,address,uint256)"(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    "lastEpochUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

    newEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newEpoch()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    participate(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "participate(bytes)"(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentTokenBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentTokenBeneficiary()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paymentTokens(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pearlmit(overrides?: CallOverrides): Promise<BigNumber>;

    "pearlmit()"(overrides?: CallOverrides): Promise<BigNumber>;

    phase1Users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phase1Users(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phase2MerkleRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phase2MerkleRoots(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    phase4Users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phase4Users(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerUsersForPhase(
      _phase: PromiseOrValue<BigNumberish>,
      _users: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerUsersForPhase(uint256,address[],uint256[])"(
      _phase: PromiseOrValue<BigNumberish>,
      _users: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPause(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPause(bool)"(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPaymentToken(address,address,bytes)"(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentTokenBeneficiary(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPaymentTokenBeneficiary(address)"(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPearlmit(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPearlmit(address)"(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPhase2MerkleRoots(
      _merkleRoots: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPhase2MerkleRoots(bytes32[4])"(
      _merkleRoots: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTapOracle(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTapOracle(address,bytes)"(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTapToken(
      _tapToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTapToken(address)"(
      _tapToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tapOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "tapOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    tapOracleData(overrides?: CallOverrides): Promise<BigNumber>;

    "tapOracleData()"(overrides?: CallOverrides): Promise<BigNumber>;

    tapToken(overrides?: CallOverrides): Promise<BigNumber>;

    "tapToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userParticipation(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userParticipation(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EPOCH_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "EPOCH_DURATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LAST_EPOCH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "LAST_EPOCH()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PCNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PCNFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PHASE_1_DISCOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PHASE_1_DISCOUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PHASE_2_AMOUNT_PER_USER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PHASE_2_AMOUNT_PER_USER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PHASE_2_DISCOUNT_PER_USER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PHASE_2_DISCOUNT_PER_USER(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PHASE_3_AMOUNT_PER_USER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PHASE_3_AMOUNT_PER_USER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PHASE_3_DISCOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PHASE_3_DISCOUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PHASE_4_DISCOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PHASE_4_DISCOUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aoTAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "aoTAP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aoTAPBrokerClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "aoTAPBrokerClaim()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aoTAPCalls(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "aoTAPCalls(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectPaymentTokens(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "collectPaymentTokens(address[])"(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoRecoverTAP(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "daoRecoverTAP()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochTAPValuation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epochTAPValuation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exerciseOption(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exerciseOption(uint256,address,uint256)"(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOTCDealDetails(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOTCDealDetails(uint256,address,uint256)"(
      _aoTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastEpochUpdate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newEpoch()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participate(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "participate(bytes)"(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentTokenBeneficiary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paymentTokenBeneficiary()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paymentTokens(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pearlmit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pearlmit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    phase1Users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "phase1Users(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    phase2MerkleRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "phase2MerkleRoots(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    phase4Users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "phase4Users(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerUsersForPhase(
      _phase: PromiseOrValue<BigNumberish>,
      _users: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerUsersForPhase(uint256,address[],uint256[])"(
      _phase: PromiseOrValue<BigNumberish>,
      _users: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPause(bool)"(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPaymentToken(address,address,bytes)"(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentTokenBeneficiary(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPaymentTokenBeneficiary(address)"(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPearlmit(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPearlmit(address)"(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPhase2MerkleRoots(
      _merkleRoots: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPhase2MerkleRoots(bytes32[4])"(
      _merkleRoots: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTapOracle(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTapOracle(address,bytes)"(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTapToken(
      _tapToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTapToken(address)"(
      _tapToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tapOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tapOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tapOracleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tapOracleData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tapToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tapToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userParticipation(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userParticipation(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
