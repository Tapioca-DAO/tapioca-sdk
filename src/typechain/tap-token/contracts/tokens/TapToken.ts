/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type EnforcedOptionParamStruct = {
  eid: PromiseOrValue<BigNumberish>;
  msgType: PromiseOrValue<BigNumberish>;
  options: PromiseOrValue<BytesLike>;
};

export type EnforcedOptionParamStructOutput = [number, number, string] & {
  eid: number;
  msgType: number;
  options: string;
};

export type OriginStruct = {
  srcEid: PromiseOrValue<BigNumberish>;
  sender: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
};

export type OriginStructOutput = [number, string, BigNumber] & {
  srcEid: number;
  sender: string;
  nonce: BigNumber;
};

export type ERC20PermitStructStruct = {
  owner: PromiseOrValue<string>;
  spender: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  deadline: PromiseOrValue<BigNumberish>;
};

export type ERC20PermitStructStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  owner: string;
  spender: string;
  value: BigNumber;
  nonce: BigNumber;
  deadline: BigNumber;
};

export type InboundPacketStruct = {
  origin: OriginStruct;
  dstEid: PromiseOrValue<BigNumberish>;
  receiver: PromiseOrValue<string>;
  guid: PromiseOrValue<BytesLike>;
  value: PromiseOrValue<BigNumberish>;
  executor: PromiseOrValue<string>;
  message: PromiseOrValue<BytesLike>;
  extraData: PromiseOrValue<BytesLike>;
};

export type InboundPacketStructOutput = [
  OriginStructOutput,
  number,
  string,
  string,
  BigNumber,
  string,
  string,
  string
] & {
  origin: OriginStructOutput;
  dstEid: number;
  receiver: string;
  guid: string;
  value: BigNumber;
  executor: string;
  message: string;
  extraData: string;
};

export type SendParamStruct = {
  dstEid: PromiseOrValue<BigNumberish>;
  to: PromiseOrValue<BytesLike>;
  amountLD: PromiseOrValue<BigNumberish>;
  minAmountLD: PromiseOrValue<BigNumberish>;
  extraOptions: PromiseOrValue<BytesLike>;
  composeMsg: PromiseOrValue<BytesLike>;
  oftCmd: PromiseOrValue<BytesLike>;
};

export type SendParamStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  dstEid: number;
  to: string;
  amountLD: BigNumber;
  minAmountLD: BigNumber;
  extraOptions: string;
  composeMsg: string;
  oftCmd: string;
};

export type OFTLimitStruct = {
  minAmountLD: PromiseOrValue<BigNumberish>;
  maxAmountLD: PromiseOrValue<BigNumberish>;
};

export type OFTLimitStructOutput = [BigNumber, BigNumber] & {
  minAmountLD: BigNumber;
  maxAmountLD: BigNumber;
};

export type OFTFeeDetailStruct = {
  feeAmountLD: PromiseOrValue<BigNumberish>;
  description: PromiseOrValue<string>;
};

export type OFTFeeDetailStructOutput = [BigNumber, string] & {
  feeAmountLD: BigNumber;
  description: string;
};

export type OFTReceiptStruct = {
  amountSentLD: PromiseOrValue<BigNumberish>;
  amountReceivedLD: PromiseOrValue<BigNumberish>;
};

export type OFTReceiptStructOutput = [BigNumber, BigNumber] & {
  amountSentLD: BigNumber;
  amountReceivedLD: BigNumber;
};

export type MessagingFeeStruct = {
  nativeFee: PromiseOrValue<BigNumberish>;
  lzTokenFee: PromiseOrValue<BigNumberish>;
};

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
  nativeFee: BigNumber;
  lzTokenFee: BigNumber;
};

export type MessagingReceiptStruct = {
  guid: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  string,
  BigNumber,
  MessagingFeeStructOutput
] & { guid: string; nonce: BigNumber; fee: MessagingFeeStructOutput };

export type LZSendParamStruct = {
  sendParam: SendParamStruct;
  fee: MessagingFeeStruct;
  extraOptions: PromiseOrValue<BytesLike>;
  refundAddress: PromiseOrValue<string>;
};

export type LZSendParamStructOutput = [
  SendParamStructOutput,
  MessagingFeeStructOutput,
  string,
  string
] & {
  sendParam: SendParamStructOutput;
  fee: MessagingFeeStructOutput;
  extraOptions: string;
  refundAddress: string;
};

export declare namespace ITapToken {
  export type TapTokenConstructorDataStruct = {
    epochDuration: PromiseOrValue<BigNumberish>;
    endpoint: PromiseOrValue<string>;
    contributors: PromiseOrValue<string>;
    earlySupporters: PromiseOrValue<string>;
    supporters: PromiseOrValue<string>;
    lTap: PromiseOrValue<string>;
    dao: PromiseOrValue<string>;
    airdrop: PromiseOrValue<string>;
    governanceEid: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    tapTokenSenderModule: PromiseOrValue<string>;
    tapTokenReceiverModule: PromiseOrValue<string>;
    extExec: PromiseOrValue<string>;
    pearlmit: PromiseOrValue<string>;
  };

  export type TapTokenConstructorDataStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string
  ] & {
    epochDuration: BigNumber;
    endpoint: string;
    contributors: string;
    earlySupporters: string;
    supporters: string;
    lTap: string;
    dao: string;
    airdrop: string;
    governanceEid: BigNumber;
    owner: string;
    tapTokenSenderModule: string;
    tapTokenReceiverModule: string;
    extExec: string;
    pearlmit: string;
  };
}

export interface TapTokenInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "EPOCH_DURATION()": FunctionFragment;
    "INITIAL_SUPPLY()": FunctionFragment;
    "MSG_SEND()": FunctionFragment;
    "SEND()": FunctionFragment;
    "SEND_AND_CALL()": FunctionFragment;
    "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approvalRequired()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "combineOptions(uint32,uint16,bytes)": FunctionFragment;
    "composeMsgSender()": FunctionFragment;
    "decimalConversionRate()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "dso_supply()": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "emissionForWeek(uint256)": FunctionFragment;
    "emissionsStartTime()": FunctionFragment;
    "emitForWeek()": FunctionFragment;
    "endpoint()": FunctionFragment;
    "enforcedOptions(uint32,uint16)": FunctionFragment;
    "executeModule(uint8,bytes,bool)": FunctionFragment;
    "extractTAP(address,uint256)": FunctionFragment;
    "getCurrentWeek()": FunctionFragment;
    "getCurrentWeekEmission()": FunctionFragment;
    "getTypedDataHash((address,address,uint256,uint256,uint256))": FunctionFragment;
    "governanceEid()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initEmissions()": FunctionFragment;
    "isPeer(uint32,bytes32)": FunctionFragment;
    "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
    "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])": FunctionFragment;
    "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
    "mintedInWeek(uint256)": FunctionFragment;
    "minter()": FunctionFragment;
    "msgInspector()": FunctionFragment;
    "name()": FunctionFragment;
    "nextNonce(uint32,bytes32)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "oApp()": FunctionFragment;
    "oAppVersion()": FunctionFragment;
    "oftVersion()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pearlmit()": FunctionFragment;
    "peers(uint32)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "preCrime()": FunctionFragment;
    "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))": FunctionFragment;
    "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
    "quoteSendPacket((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bytes,bool,bytes,bytes)": FunctionFragment;
    "removeDust(uint256)": FunctionFragment;
    "removeTAP(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
    "sendPacket(((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),bytes,address),bytes)": FunctionFragment;
    "setDelegate(address)": FunctionFragment;
    "setEnforcedOptions((uint32,uint16,bytes)[])": FunctionFragment;
    "setMinter(address)": FunctionFragment;
    "setMsgInspector(address)": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "setPearlmit(address)": FunctionFragment;
    "setPeer(uint32,bytes32)": FunctionFragment;
    "setPreCrime(address)": FunctionFragment;
    "setTapiocaOmnichainReceiveExtender(address)": FunctionFragment;
    "setTwTAP(address)": FunctionFragment;
    "sharedDecimals()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tapiocaOmnichainReceiveExtender()": FunctionFragment;
    "timestampToWeek(uint256)": FunctionFragment;
    "toeExtExec()": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "twTap()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_SEPARATOR()"
      | "EPOCH_DURATION"
      | "EPOCH_DURATION()"
      | "INITIAL_SUPPLY"
      | "INITIAL_SUPPLY()"
      | "MSG_SEND"
      | "MSG_SEND()"
      | "SEND"
      | "SEND()"
      | "SEND_AND_CALL"
      | "SEND_AND_CALL()"
      | "allowInitializePath"
      | "allowInitializePath((uint32,bytes32,uint64))"
      | "allowance"
      | "allowance(address,address)"
      | "approvalRequired"
      | "approvalRequired()"
      | "approve"
      | "approve(address,uint256)"
      | "balanceOf"
      | "balanceOf(address)"
      | "combineOptions"
      | "combineOptions(uint32,uint16,bytes)"
      | "composeMsgSender"
      | "composeMsgSender()"
      | "decimalConversionRate"
      | "decimalConversionRate()"
      | "decimals"
      | "decimals()"
      | "decreaseAllowance"
      | "decreaseAllowance(address,uint256)"
      | "dso_supply"
      | "dso_supply()"
      | "eip712Domain"
      | "eip712Domain()"
      | "emissionForWeek"
      | "emissionForWeek(uint256)"
      | "emissionsStartTime"
      | "emissionsStartTime()"
      | "emitForWeek"
      | "emitForWeek()"
      | "endpoint"
      | "endpoint()"
      | "enforcedOptions"
      | "enforcedOptions(uint32,uint16)"
      | "executeModule"
      | "executeModule(uint8,bytes,bool)"
      | "extractTAP"
      | "extractTAP(address,uint256)"
      | "getCurrentWeek"
      | "getCurrentWeek()"
      | "getCurrentWeekEmission"
      | "getCurrentWeekEmission()"
      | "getTypedDataHash"
      | "getTypedDataHash((address,address,uint256,uint256,uint256))"
      | "governanceEid"
      | "governanceEid()"
      | "increaseAllowance"
      | "increaseAllowance(address,uint256)"
      | "initEmissions"
      | "initEmissions()"
      | "isPeer"
      | "isPeer(uint32,bytes32)"
      | "lzReceive"
      | "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"
      | "lzReceiveAndRevert"
      | "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])"
      | "lzReceiveSimulate"
      | "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"
      | "mintedInWeek"
      | "mintedInWeek(uint256)"
      | "minter"
      | "minter()"
      | "msgInspector"
      | "msgInspector()"
      | "name"
      | "name()"
      | "nextNonce"
      | "nextNonce(uint32,bytes32)"
      | "nonces"
      | "nonces(address)"
      | "oApp"
      | "oApp()"
      | "oAppVersion"
      | "oAppVersion()"
      | "oftVersion"
      | "oftVersion()"
      | "owner"
      | "owner()"
      | "paused"
      | "paused()"
      | "pearlmit"
      | "pearlmit()"
      | "peers"
      | "peers(uint32)"
      | "permit"
      | "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
      | "preCrime"
      | "preCrime()"
      | "quoteOFT"
      | "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))"
      | "quoteSend"
      | "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)"
      | "quoteSendPacket"
      | "quoteSendPacket((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bytes,bool,bytes,bytes)"
      | "removeDust"
      | "removeDust(uint256)"
      | "removeTAP"
      | "removeTAP(uint256)"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "send"
      | "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)"
      | "sendPacket"
      | "sendPacket(((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),bytes,address),bytes)"
      | "setDelegate"
      | "setDelegate(address)"
      | "setEnforcedOptions"
      | "setEnforcedOptions((uint32,uint16,bytes)[])"
      | "setMinter"
      | "setMinter(address)"
      | "setMsgInspector"
      | "setMsgInspector(address)"
      | "setPause"
      | "setPause(bool)"
      | "setPearlmit"
      | "setPearlmit(address)"
      | "setPeer"
      | "setPeer(uint32,bytes32)"
      | "setPreCrime"
      | "setPreCrime(address)"
      | "setTapiocaOmnichainReceiveExtender"
      | "setTapiocaOmnichainReceiveExtender(address)"
      | "setTwTAP"
      | "setTwTAP(address)"
      | "sharedDecimals"
      | "sharedDecimals()"
      | "symbol"
      | "symbol()"
      | "tapiocaOmnichainReceiveExtender"
      | "tapiocaOmnichainReceiveExtender()"
      | "timestampToWeek"
      | "timestampToWeek(uint256)"
      | "toeExtExec"
      | "toeExtExec()"
      | "token"
      | "token()"
      | "totalSupply"
      | "totalSupply()"
      | "transfer"
      | "transfer(address,uint256)"
      | "transferFrom"
      | "transferFrom(address,address,uint256)"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "twTap"
      | "twTap()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EPOCH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EPOCH_DURATION()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SUPPLY()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MSG_SEND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MSG_SEND()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SEND", values?: undefined): string;
  encodeFunctionData(functionFragment: "SEND()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SEND_AND_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEND_AND_CALL()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowInitializePath",
    values: [OriginStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "allowInitializePath((uint32,bytes32,uint64))",
    values: [OriginStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approvalRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvalRequired()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "combineOptions",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "combineOptions(uint32,uint16,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "composeMsgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "composeMsgSender()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimalConversionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimalConversionRate()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dso_supply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dso_supply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emissionForWeek",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emissionForWeek(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emissionsStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emissionsStartTime()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitForWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitForWeek()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endpoint()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enforcedOptions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enforcedOptions(uint32,uint16)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeModule",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeModule(uint8,bytes,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "extractTAP",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extractTAP(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentWeek()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentWeekEmission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentWeekEmission()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTypedDataHash",
    values: [ERC20PermitStructStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypedDataHash((address,address,uint256,uint256,uint256))",
    values: [ERC20PermitStructStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceEid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceEid()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initEmissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initEmissions()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPeer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPeer(uint32,bytes32)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [
      OriginStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)",
    values: [
      OriginStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceiveAndRevert",
    values: [InboundPacketStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])",
    values: [InboundPacketStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceiveSimulate",
    values: [
      OriginStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)",
    values: [
      OriginStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedInWeek",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedInWeek(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "minter()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "msgInspector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "msgInspector()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextNonce",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextNonce(uint32,bytes32)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
  encodeFunctionData(functionFragment: "oApp()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oAppVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oAppVersion()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oftVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oftVersion()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(functionFragment: "pearlmit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pearlmit()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "peers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "peers(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "preCrime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preCrime()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteOFT",
    values: [SendParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))",
    values: [SendParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSend",
    values: [SendParamStruct, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)",
    values: [SendParamStruct, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSendPacket",
    values: [
      SendParamStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSendPacket((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bytes,bool,bytes,bytes)",
    values: [
      SendParamStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDust",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDust(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTAP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTAP(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [SendParamStruct, MessagingFeeStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)",
    values: [SendParamStruct, MessagingFeeStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPacket",
    values: [LZSendParamStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPacket(((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),bytes,address),bytes)",
    values: [LZSendParamStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnforcedOptions",
    values: [EnforcedOptionParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnforcedOptions((uint32,uint16,bytes)[])",
    values: [EnforcedOptionParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMsgInspector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMsgInspector(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPause(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPearlmit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPearlmit(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer(uint32,bytes32)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPreCrime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPreCrime(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTapiocaOmnichainReceiveExtender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTapiocaOmnichainReceiveExtender(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwTAP",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwTAP(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sharedDecimals()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tapiocaOmnichainReceiveExtender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tapiocaOmnichainReceiveExtender()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timestampToWeek",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timestampToWeek(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toeExtExec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toeExtExec()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "token()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "twTap", values?: undefined): string;
  encodeFunctionData(functionFragment: "twTap()", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SUPPLY()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MSG_SEND", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MSG_SEND()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SEND", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SEND()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SEND_AND_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEND_AND_CALL()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowInitializePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowInitializePath((uint32,bytes32,uint64))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalRequired()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combineOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combineOptions(uint32,uint16,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "composeMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "composeMsgSender()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalConversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalConversionRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dso_supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dso_supply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionForWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionForWeek(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionsStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionsStartTime()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitForWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitForWeek()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endpoint()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforcedOptions(uint32,uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeModule(uint8,bytes,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extractTAP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extractTAP(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentWeek()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentWeekEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentWeekEmission()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypedDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypedDataHash((address,address,uint256,uint256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceEid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceEid()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initEmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initEmissions()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPeer(uint32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lzReceiveAndRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lzReceiveSimulate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedInWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedInWeek(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "msgInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "msgInspector()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextNonce(uint32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oApp()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oAppVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oAppVersion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oftVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oftVersion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pearlmit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pearlmit()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "peers(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preCrime()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteOFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteSend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSendPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSendPacket((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bytes,bool,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeDust", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDust(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeTAP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTAP(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendPacket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendPacket(((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),bytes,address),bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnforcedOptions((uint32,uint16,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinter(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMsgInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMsgInspector(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPause(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPearlmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPearlmit(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPeer(uint32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPreCrime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPreCrime(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTapiocaOmnichainReceiveExtender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTapiocaOmnichainReceiveExtender(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTwTAP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTwTAP(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedDecimals()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tapiocaOmnichainReceiveExtender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tapiocaOmnichainReceiveExtender()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampToWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampToWeek(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toeExtExec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toeExtExec()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twTap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "twTap()", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BoostedTAP(uint256)": EventFragment;
    "Burned(address,uint256)": EventFragment;
    "EIP712DomainChanged()": EventFragment;
    "Emitted(uint256,uint256)": EventFragment;
    "EnforcedOptionSet(tuple[])": EventFragment;
    "Minted(address,address,uint256)": EventFragment;
    "MinterUpdated(address,address)": EventFragment;
    "MsgInspectorSet(address)": EventFragment;
    "OFTReceived(bytes32,uint32,address,uint256)": EventFragment;
    "OFTSent(bytes32,uint32,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PearlmitUpdated(address,address)": EventFragment;
    "PeerSet(uint32,bytes32)": EventFragment;
    "PreCrimeSet(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoostedTAP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoostedTAP(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned(address,uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged()"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Emitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Emitted(uint256,uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnforcedOptionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnforcedOptionSet(tuple[])"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Minted(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinterUpdated(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MsgInspectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MsgInspectorSet(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OFTReceived"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OFTReceived(bytes32,uint32,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OFTSent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OFTSent(bytes32,uint32,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PearlmitUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PearlmitUpdated(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeerSet(uint32,bytes32)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PreCrimeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PreCrimeSet(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused(address)"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BoostedTAPEventObject {
  _amount: BigNumber;
}
export type BoostedTAPEvent = TypedEvent<[BigNumber], BoostedTAPEventObject>;

export type BoostedTAPEventFilter = TypedEventFilter<BoostedTAPEvent>;

export interface BurnedEventObject {
  _from: string;
  _amount: BigNumber;
}
export type BurnedEvent = TypedEvent<[string, BigNumber], BurnedEventObject>;

export type BurnedEventFilter = TypedEventFilter<BurnedEvent>;

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface EmittedEventObject {
  week: BigNumber;
  amount: BigNumber;
}
export type EmittedEvent = TypedEvent<
  [BigNumber, BigNumber],
  EmittedEventObject
>;

export type EmittedEventFilter = TypedEventFilter<EmittedEvent>;

export interface EnforcedOptionSetEventObject {
  _enforcedOptions: EnforcedOptionParamStructOutput[];
}
export type EnforcedOptionSetEvent = TypedEvent<
  [EnforcedOptionParamStructOutput[]],
  EnforcedOptionSetEventObject
>;

export type EnforcedOptionSetEventFilter =
  TypedEventFilter<EnforcedOptionSetEvent>;

export interface MintedEventObject {
  _by: string;
  _to: string;
  _amount: BigNumber;
}
export type MintedEvent = TypedEvent<
  [string, string, BigNumber],
  MintedEventObject
>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export interface MinterUpdatedEventObject {
  _old: string;
  _new: string;
}
export type MinterUpdatedEvent = TypedEvent<
  [string, string],
  MinterUpdatedEventObject
>;

export type MinterUpdatedEventFilter = TypedEventFilter<MinterUpdatedEvent>;

export interface MsgInspectorSetEventObject {
  inspector: string;
}
export type MsgInspectorSetEvent = TypedEvent<
  [string],
  MsgInspectorSetEventObject
>;

export type MsgInspectorSetEventFilter = TypedEventFilter<MsgInspectorSetEvent>;

export interface OFTReceivedEventObject {
  guid: string;
  srcEid: number;
  toAddress: string;
  amountLD: BigNumber;
}
export type OFTReceivedEvent = TypedEvent<
  [string, number, string, BigNumber],
  OFTReceivedEventObject
>;

export type OFTReceivedEventFilter = TypedEventFilter<OFTReceivedEvent>;

export interface OFTSentEventObject {
  guid: string;
  dstEid: number;
  fromAddress: string;
  amountLD: BigNumber;
}
export type OFTSentEvent = TypedEvent<
  [string, number, string, BigNumber],
  OFTSentEventObject
>;

export type OFTSentEventFilter = TypedEventFilter<OFTSentEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PearlmitUpdatedEventObject {
  oldPearlmit: string;
  newPearlmit: string;
}
export type PearlmitUpdatedEvent = TypedEvent<
  [string, string],
  PearlmitUpdatedEventObject
>;

export type PearlmitUpdatedEventFilter = TypedEventFilter<PearlmitUpdatedEvent>;

export interface PeerSetEventObject {
  eid: number;
  peer: string;
}
export type PeerSetEvent = TypedEvent<[number, string], PeerSetEventObject>;

export type PeerSetEventFilter = TypedEventFilter<PeerSetEvent>;

export interface PreCrimeSetEventObject {
  preCrimeAddress: string;
}
export type PreCrimeSetEvent = TypedEvent<[string], PreCrimeSetEventObject>;

export type PreCrimeSetEventFilter = TypedEventFilter<PreCrimeSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface TapToken extends BaseContract {
  contractName: "TapToken";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TapTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    EPOCH_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MSG_SEND(overrides?: CallOverrides): Promise<[number]>;

    "MSG_SEND()"(overrides?: CallOverrides): Promise<[number]>;

    SEND(overrides?: CallOverrides): Promise<[number]>;

    "SEND()"(overrides?: CallOverrides): Promise<[number]>;

    SEND_AND_CALL(overrides?: CallOverrides): Promise<[number]>;

    "SEND_AND_CALL()"(overrides?: CallOverrides): Promise<[number]>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowInitializePath((uint32,bytes32,uint64))"(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approvalRequired(overrides?: CallOverrides): Promise<[boolean]>;

    "approvalRequired()"(overrides?: CallOverrides): Promise<[boolean]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    combineOptions(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "combineOptions(uint32,uint16,bytes)"(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    composeMsgSender(
      overrides?: CallOverrides
    ): Promise<[string] & { sender: string }>;

    "composeMsgSender()"(
      overrides?: CallOverrides
    ): Promise<[string] & { sender: string }>;

    decimalConversionRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "decimalConversionRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dso_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "dso_supply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    "eip712Domain()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    emissionForWeek(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "emissionForWeek(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emissionsStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "emissionsStartTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    emitForWeek(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "emitForWeek()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endpoint(overrides?: CallOverrides): Promise<[string]>;

    "endpoint()"(overrides?: CallOverrides): Promise<[string]>;

    enforcedOptions(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { enforcedOption: string }>;

    "enforcedOptions(uint32,uint16)"(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { enforcedOption: string }>;

    executeModule(
      _module: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _forwardRevert: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "executeModule(uint8,bytes,bool)"(
      _module: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _forwardRevert: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extractTAP(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "extractTAP(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentWeek()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentWeekEmission(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentWeekEmission()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTypedDataHash(
      _permitData: ERC20PermitStructStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getTypedDataHash((address,address,uint256,uint256,uint256))"(
      _permitData: ERC20PermitStructStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    governanceEid(overrides?: CallOverrides): Promise<[BigNumber]>;

    "governanceEid()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initEmissions(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initEmissions()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPeer(uint32,bytes32)"(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lzReceiveAndRevert(
      _packets: InboundPacketStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])"(
      _packets: InboundPacketStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lzReceiveSimulate(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintedInWeek(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "mintedInWeek(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    "minter()"(overrides?: CallOverrides): Promise<[string]>;

    msgInspector(overrides?: CallOverrides): Promise<[string]>;

    "msgInspector()"(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    "nextNonce(uint32,bytes32)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oApp(overrides?: CallOverrides): Promise<[string]>;

    "oApp()"(overrides?: CallOverrides): Promise<[string]>;

    oAppVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
      }
    >;

    "oAppVersion()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
      }
    >;

    oftVersion(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { interfaceId: string; version: BigNumber }
    >;

    "oftVersion()"(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { interfaceId: string; version: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pearlmit(overrides?: CallOverrides): Promise<[string]>;

    "pearlmit()"(overrides?: CallOverrides): Promise<[string]>;

    peers(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { peer: string }>;

    "peers(uint32)"(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { peer: string }>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    preCrime(overrides?: CallOverrides): Promise<[string]>;

    "preCrime()"(overrides?: CallOverrides): Promise<[string]>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        oftLimit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))"(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        oftLimit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingFeeStructOutput] & { msgFee: MessagingFeeStructOutput }
    >;

    "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)"(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingFeeStructOutput] & { msgFee: MessagingFeeStructOutput }
    >;

    quoteSendPacket(
      _sendParam: SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingFeeStructOutput] & { msgFee: MessagingFeeStructOutput }
    >;

    "quoteSendPacket((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bytes,bool,bytes,bytes)"(
      _sendParam: SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingFeeStructOutput] & { msgFee: MessagingFeeStructOutput }
    >;

    removeDust(
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountLD: BigNumber }>;

    "removeDust(uint256)"(
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountLD: BigNumber }>;

    removeTAP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeTAP(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)"(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendPacket(
      _lzSendParam: LZSendParamStruct,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sendPacket(((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),bytes,address),bytes)"(
      _lzSendParam: LZSendParamStruct,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setDelegate(address)"(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setEnforcedOptions((uint32,uint16,bytes)[])"(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMinter(address)"(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMsgInspector(
      _msgInspector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMsgInspector(address)"(
      _msgInspector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPause(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPause(bool)"(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPearlmit(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPearlmit(address)"(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPeer(uint32,bytes32)"(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPreCrime(
      _preCrime: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPreCrime(address)"(
      _preCrime: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTapiocaOmnichainReceiveExtender(
      _tapiocaOmnichainReceiveExtender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTapiocaOmnichainReceiveExtender(address)"(
      _tapiocaOmnichainReceiveExtender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTwTAP(
      _twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTwTAP(address)"(
      _twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sharedDecimals(overrides?: CallOverrides): Promise<[number]>;

    "sharedDecimals()"(overrides?: CallOverrides): Promise<[number]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    tapiocaOmnichainReceiveExtender(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tapiocaOmnichainReceiveExtender()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    timestampToWeek(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "timestampToWeek(uint256)"(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toeExtExec(overrides?: CallOverrides): Promise<[string]>;

    "toeExtExec()"(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    twTap(overrides?: CallOverrides): Promise<[string]>;

    "twTap()"(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  EPOCH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

  MSG_SEND(overrides?: CallOverrides): Promise<number>;

  "MSG_SEND()"(overrides?: CallOverrides): Promise<number>;

  SEND(overrides?: CallOverrides): Promise<number>;

  "SEND()"(overrides?: CallOverrides): Promise<number>;

  SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;

  "SEND_AND_CALL()"(overrides?: CallOverrides): Promise<number>;

  allowInitializePath(
    origin: OriginStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowInitializePath((uint32,bytes32,uint64))"(
    origin: OriginStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approvalRequired(overrides?: CallOverrides): Promise<boolean>;

  "approvalRequired()"(overrides?: CallOverrides): Promise<boolean>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  combineOptions(
    _eid: PromiseOrValue<BigNumberish>,
    _msgType: PromiseOrValue<BigNumberish>,
    _extraOptions: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "combineOptions(uint32,uint16,bytes)"(
    _eid: PromiseOrValue<BigNumberish>,
    _msgType: PromiseOrValue<BigNumberish>,
    _extraOptions: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  composeMsgSender(overrides?: CallOverrides): Promise<string>;

  "composeMsgSender()"(overrides?: CallOverrides): Promise<string>;

  decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

  "decimalConversionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dso_supply(overrides?: CallOverrides): Promise<BigNumber>;

  "dso_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  "eip712Domain()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  emissionForWeek(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "emissionForWeek(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emissionsStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "emissionsStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  emitForWeek(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "emitForWeek()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endpoint(overrides?: CallOverrides): Promise<string>;

  "endpoint()"(overrides?: CallOverrides): Promise<string>;

  enforcedOptions(
    eid: PromiseOrValue<BigNumberish>,
    msgType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "enforcedOptions(uint32,uint16)"(
    eid: PromiseOrValue<BigNumberish>,
    msgType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  executeModule(
    _module: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _forwardRevert: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "executeModule(uint8,bytes,bool)"(
    _module: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    _forwardRevert: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extractTAP(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "extractTAP(address,uint256)"(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentWeek(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentWeekEmission(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentWeekEmission()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTypedDataHash(
    _permitData: ERC20PermitStructStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTypedDataHash((address,address,uint256,uint256,uint256))"(
    _permitData: ERC20PermitStructStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  governanceEid(overrides?: CallOverrides): Promise<BigNumber>;

  "governanceEid()"(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initEmissions(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initEmissions()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPeer(
    _eid: PromiseOrValue<BigNumberish>,
    _peer: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPeer(uint32,bytes32)"(
    _eid: PromiseOrValue<BigNumberish>,
    _peer: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lzReceive(
    _origin: OriginStruct,
    _guid: PromiseOrValue<BytesLike>,
    _message: PromiseOrValue<BytesLike>,
    _executor: PromiseOrValue<string>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"(
    _origin: OriginStruct,
    _guid: PromiseOrValue<BytesLike>,
    _message: PromiseOrValue<BytesLike>,
    _executor: PromiseOrValue<string>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lzReceiveAndRevert(
    _packets: InboundPacketStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])"(
    _packets: InboundPacketStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lzReceiveSimulate(
    _origin: OriginStruct,
    _guid: PromiseOrValue<BytesLike>,
    _message: PromiseOrValue<BytesLike>,
    _executor: PromiseOrValue<string>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"(
    _origin: OriginStruct,
    _guid: PromiseOrValue<BytesLike>,
    _message: PromiseOrValue<BytesLike>,
    _executor: PromiseOrValue<string>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintedInWeek(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "mintedInWeek(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minter(overrides?: CallOverrides): Promise<string>;

  "minter()"(overrides?: CallOverrides): Promise<string>;

  msgInspector(overrides?: CallOverrides): Promise<string>;

  "msgInspector()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nextNonce(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nextNonce(uint32,bytes32)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonces(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonces(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oApp(overrides?: CallOverrides): Promise<string>;

  "oApp()"(overrides?: CallOverrides): Promise<string>;

  oAppVersion(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      senderVersion: BigNumber;
      receiverVersion: BigNumber;
    }
  >;

  "oAppVersion()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      senderVersion: BigNumber;
      receiverVersion: BigNumber;
    }
  >;

  oftVersion(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { interfaceId: string; version: BigNumber }>;

  "oftVersion()"(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { interfaceId: string; version: BigNumber }>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pearlmit(overrides?: CallOverrides): Promise<string>;

  "pearlmit()"(overrides?: CallOverrides): Promise<string>;

  peers(
    eid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "peers(uint32)"(
    eid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  preCrime(overrides?: CallOverrides): Promise<string>;

  "preCrime()"(overrides?: CallOverrides): Promise<string>;

  quoteOFT(
    _sendParam: SendParamStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      OFTLimitStructOutput,
      OFTFeeDetailStructOutput[],
      OFTReceiptStructOutput
    ] & {
      oftLimit: OFTLimitStructOutput;
      oftFeeDetails: OFTFeeDetailStructOutput[];
      oftReceipt: OFTReceiptStructOutput;
    }
  >;

  "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))"(
    _sendParam: SendParamStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      OFTLimitStructOutput,
      OFTFeeDetailStructOutput[],
      OFTReceiptStructOutput
    ] & {
      oftLimit: OFTLimitStructOutput;
      oftFeeDetails: OFTFeeDetailStructOutput[];
      oftReceipt: OFTReceiptStructOutput;
    }
  >;

  quoteSend(
    _sendParam: SendParamStruct,
    _payInLzToken: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)"(
    _sendParam: SendParamStruct,
    _payInLzToken: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  quoteSendPacket(
    _sendParam: SendParamStruct,
    _extraOptions: PromiseOrValue<BytesLike>,
    _payInLzToken: PromiseOrValue<boolean>,
    _composeMsg: PromiseOrValue<BytesLike>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  "quoteSendPacket((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bytes,bool,bytes,bytes)"(
    _sendParam: SendParamStruct,
    _extraOptions: PromiseOrValue<BytesLike>,
    _payInLzToken: PromiseOrValue<boolean>,
    _composeMsg: PromiseOrValue<BytesLike>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  removeDust(
    _amountLD: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "removeDust(uint256)"(
    _amountLD: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeTAP(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeTAP(uint256)"(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    _sendParam: SendParamStruct,
    _fee: MessagingFeeStruct,
    _refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)"(
    _sendParam: SendParamStruct,
    _fee: MessagingFeeStruct,
    _refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendPacket(
    _lzSendParam: LZSendParamStruct,
    _composeMsg: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sendPacket(((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),bytes,address),bytes)"(
    _lzSendParam: LZSendParamStruct,
    _composeMsg: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegate(
    _delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setDelegate(address)"(
    _delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEnforcedOptions(
    _enforcedOptions: EnforcedOptionParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setEnforcedOptions((uint32,uint16,bytes)[])"(
    _enforcedOptions: EnforcedOptionParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinter(
    _minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMinter(address)"(
    _minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMsgInspector(
    _msgInspector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMsgInspector(address)"(
    _msgInspector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPause(
    _pauseState: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPause(bool)"(
    _pauseState: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPearlmit(
    _pearlmit: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPearlmit(address)"(
    _pearlmit: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPeer(
    _eid: PromiseOrValue<BigNumberish>,
    _peer: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPeer(uint32,bytes32)"(
    _eid: PromiseOrValue<BigNumberish>,
    _peer: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPreCrime(
    _preCrime: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPreCrime(address)"(
    _preCrime: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTapiocaOmnichainReceiveExtender(
    _tapiocaOmnichainReceiveExtender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTapiocaOmnichainReceiveExtender(address)"(
    _tapiocaOmnichainReceiveExtender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTwTAP(
    _twTap: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTwTAP(address)"(
    _twTap: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sharedDecimals(overrides?: CallOverrides): Promise<number>;

  "sharedDecimals()"(overrides?: CallOverrides): Promise<number>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tapiocaOmnichainReceiveExtender(overrides?: CallOverrides): Promise<string>;

  "tapiocaOmnichainReceiveExtender()"(
    overrides?: CallOverrides
  ): Promise<string>;

  timestampToWeek(
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "timestampToWeek(uint256)"(
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toeExtExec(overrides?: CallOverrides): Promise<string>;

  "toeExtExec()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  twTap(overrides?: CallOverrides): Promise<string>;

  "twTap()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    EPOCH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    MSG_SEND(overrides?: CallOverrides): Promise<number>;

    "MSG_SEND()"(overrides?: CallOverrides): Promise<number>;

    SEND(overrides?: CallOverrides): Promise<number>;

    "SEND()"(overrides?: CallOverrides): Promise<number>;

    SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;

    "SEND_AND_CALL()"(overrides?: CallOverrides): Promise<number>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowInitializePath((uint32,bytes32,uint64))"(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvalRequired(overrides?: CallOverrides): Promise<boolean>;

    "approvalRequired()"(overrides?: CallOverrides): Promise<boolean>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    combineOptions(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "combineOptions(uint32,uint16,bytes)"(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    composeMsgSender(overrides?: CallOverrides): Promise<string>;

    "composeMsgSender()"(overrides?: CallOverrides): Promise<string>;

    decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    "decimalConversionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dso_supply(overrides?: CallOverrides): Promise<BigNumber>;

    "dso_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    "eip712Domain()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    emissionForWeek(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "emissionForWeek(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emissionsStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionsStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    emitForWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "emitForWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    endpoint(overrides?: CallOverrides): Promise<string>;

    "endpoint()"(overrides?: CallOverrides): Promise<string>;

    enforcedOptions(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "enforcedOptions(uint32,uint16)"(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    executeModule(
      _module: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _forwardRevert: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeModule(uint8,bytes,bool)"(
      _module: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _forwardRevert: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    extractTAP(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "extractTAP(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentWeekEmission(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentWeekEmission()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTypedDataHash(
      _permitData: ERC20PermitStructStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTypedDataHash((address,address,uint256,uint256,uint256))"(
      _permitData: ERC20PermitStructStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    governanceEid(overrides?: CallOverrides): Promise<BigNumber>;

    "governanceEid()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initEmissions(overrides?: CallOverrides): Promise<void>;

    "initEmissions()"(overrides?: CallOverrides): Promise<void>;

    isPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPeer(uint32,bytes32)"(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    lzReceiveAndRevert(
      _packets: InboundPacketStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])"(
      _packets: InboundPacketStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    lzReceiveSimulate(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintedInWeek(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintedInWeek(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<string>;

    "minter()"(overrides?: CallOverrides): Promise<string>;

    msgInspector(overrides?: CallOverrides): Promise<string>;

    "msgInspector()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nextNonce(uint32,bytes32)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oApp(overrides?: CallOverrides): Promise<string>;

    "oApp()"(overrides?: CallOverrides): Promise<string>;

    oAppVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
      }
    >;

    "oAppVersion()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
      }
    >;

    oftVersion(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { interfaceId: string; version: BigNumber }
    >;

    "oftVersion()"(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { interfaceId: string; version: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pearlmit(overrides?: CallOverrides): Promise<string>;

    "pearlmit()"(overrides?: CallOverrides): Promise<string>;

    peers(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "peers(uint32)"(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    preCrime(overrides?: CallOverrides): Promise<string>;

    "preCrime()"(overrides?: CallOverrides): Promise<string>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        oftLimit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))"(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        oftLimit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)"(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    quoteSendPacket(
      _sendParam: SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    "quoteSendPacket((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bytes,bool,bytes,bytes)"(
      _sendParam: SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    removeDust(
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeDust(uint256)"(
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTAP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTAP(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingReceiptStructOutput, OFTReceiptStructOutput] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)"(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingReceiptStructOutput, OFTReceiptStructOutput] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    sendPacket(
      _lzSendParam: LZSendParamStruct,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingReceiptStructOutput, OFTReceiptStructOutput] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    "sendPacket(((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),bytes,address),bytes)"(
      _lzSendParam: LZSendParamStruct,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingReceiptStructOutput, OFTReceiptStructOutput] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDelegate(address)"(
      _delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setEnforcedOptions((uint32,uint16,bytes)[])"(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(
      _minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinter(address)"(
      _minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMsgInspector(
      _msgInspector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMsgInspector(address)"(
      _msgInspector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPause(bool)"(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPearlmit(
      _pearlmit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPearlmit(address)"(
      _pearlmit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPeer(uint32,bytes32)"(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPreCrime(
      _preCrime: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPreCrime(address)"(
      _preCrime: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTapiocaOmnichainReceiveExtender(
      _tapiocaOmnichainReceiveExtender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTapiocaOmnichainReceiveExtender(address)"(
      _tapiocaOmnichainReceiveExtender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwTAP(
      _twTap: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTwTAP(address)"(
      _twTap: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sharedDecimals(overrides?: CallOverrides): Promise<number>;

    "sharedDecimals()"(overrides?: CallOverrides): Promise<number>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tapiocaOmnichainReceiveExtender(overrides?: CallOverrides): Promise<string>;

    "tapiocaOmnichainReceiveExtender()"(
      overrides?: CallOverrides
    ): Promise<string>;

    timestampToWeek(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "timestampToWeek(uint256)"(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toeExtExec(overrides?: CallOverrides): Promise<string>;

    "toeExtExec()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    twTap(overrides?: CallOverrides): Promise<string>;

    "twTap()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "BoostedTAP(uint256)"(_amount?: null): BoostedTAPEventFilter;
    BoostedTAP(_amount?: null): BoostedTAPEventFilter;

    "Burned(address,uint256)"(
      _from?: PromiseOrValue<string> | null,
      _amount?: null
    ): BurnedEventFilter;
    Burned(
      _from?: PromiseOrValue<string> | null,
      _amount?: null
    ): BurnedEventFilter;

    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;

    "Emitted(uint256,uint256)"(
      week?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmittedEventFilter;
    Emitted(
      week?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): EmittedEventFilter;

    "EnforcedOptionSet(tuple[])"(
      _enforcedOptions?: null
    ): EnforcedOptionSetEventFilter;
    EnforcedOptionSet(_enforcedOptions?: null): EnforcedOptionSetEventFilter;

    "Minted(address,address,uint256)"(
      _by?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): MintedEventFilter;
    Minted(
      _by?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _amount?: null
    ): MintedEventFilter;

    "MinterUpdated(address,address)"(
      _old?: null,
      _new?: null
    ): MinterUpdatedEventFilter;
    MinterUpdated(_old?: null, _new?: null): MinterUpdatedEventFilter;

    "MsgInspectorSet(address)"(inspector?: null): MsgInspectorSetEventFilter;
    MsgInspectorSet(inspector?: null): MsgInspectorSetEventFilter;

    "OFTReceived(bytes32,uint32,address,uint256)"(
      guid?: PromiseOrValue<BytesLike> | null,
      srcEid?: null,
      toAddress?: PromiseOrValue<string> | null,
      amountLD?: null
    ): OFTReceivedEventFilter;
    OFTReceived(
      guid?: PromiseOrValue<BytesLike> | null,
      srcEid?: null,
      toAddress?: PromiseOrValue<string> | null,
      amountLD?: null
    ): OFTReceivedEventFilter;

    "OFTSent(bytes32,uint32,address,uint256)"(
      guid?: PromiseOrValue<BytesLike> | null,
      dstEid?: null,
      fromAddress?: PromiseOrValue<string> | null,
      amountLD?: null
    ): OFTSentEventFilter;
    OFTSent(
      guid?: PromiseOrValue<BytesLike> | null,
      dstEid?: null,
      fromAddress?: PromiseOrValue<string> | null,
      amountLD?: null
    ): OFTSentEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PearlmitUpdated(address,address)"(
      oldPearlmit?: null,
      newPearlmit?: null
    ): PearlmitUpdatedEventFilter;
    PearlmitUpdated(
      oldPearlmit?: null,
      newPearlmit?: null
    ): PearlmitUpdatedEventFilter;

    "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter;
    PeerSet(eid?: null, peer?: null): PeerSetEventFilter;

    "PreCrimeSet(address)"(preCrimeAddress?: null): PreCrimeSetEventFilter;
    PreCrimeSet(preCrimeAddress?: null): PreCrimeSetEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    EPOCH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "INITIAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    MSG_SEND(overrides?: CallOverrides): Promise<BigNumber>;

    "MSG_SEND()"(overrides?: CallOverrides): Promise<BigNumber>;

    SEND(overrides?: CallOverrides): Promise<BigNumber>;

    "SEND()"(overrides?: CallOverrides): Promise<BigNumber>;

    SEND_AND_CALL(overrides?: CallOverrides): Promise<BigNumber>;

    "SEND_AND_CALL()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowInitializePath((uint32,bytes32,uint64))"(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvalRequired(overrides?: CallOverrides): Promise<BigNumber>;

    "approvalRequired()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    combineOptions(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combineOptions(uint32,uint16,bytes)"(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    composeMsgSender(overrides?: CallOverrides): Promise<BigNumber>;

    "composeMsgSender()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    "decimalConversionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dso_supply(overrides?: CallOverrides): Promise<BigNumber>;

    "dso_supply()"(overrides?: CallOverrides): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    "eip712Domain()"(overrides?: CallOverrides): Promise<BigNumber>;

    emissionForWeek(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "emissionForWeek(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emissionsStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionsStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    emitForWeek(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "emitForWeek()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endpoint(overrides?: CallOverrides): Promise<BigNumber>;

    "endpoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    enforcedOptions(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "enforcedOptions(uint32,uint16)"(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeModule(
      _module: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _forwardRevert: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "executeModule(uint8,bytes,bool)"(
      _module: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _forwardRevert: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extractTAP(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "extractTAP(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentWeekEmission(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentWeekEmission()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTypedDataHash(
      _permitData: ERC20PermitStructStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTypedDataHash((address,address,uint256,uint256,uint256))"(
      _permitData: ERC20PermitStructStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceEid(overrides?: CallOverrides): Promise<BigNumber>;

    "governanceEid()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initEmissions(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initEmissions()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPeer(uint32,bytes32)"(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lzReceiveAndRevert(
      _packets: InboundPacketStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])"(
      _packets: InboundPacketStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lzReceiveSimulate(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintedInWeek(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mintedInWeek(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    "minter()"(overrides?: CallOverrides): Promise<BigNumber>;

    msgInspector(overrides?: CallOverrides): Promise<BigNumber>;

    "msgInspector()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nextNonce(uint32,bytes32)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oApp(overrides?: CallOverrides): Promise<BigNumber>;

    "oApp()"(overrides?: CallOverrides): Promise<BigNumber>;

    oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "oAppVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    oftVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "oftVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pearlmit(overrides?: CallOverrides): Promise<BigNumber>;

    "pearlmit()"(overrides?: CallOverrides): Promise<BigNumber>;

    peers(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peers(uint32)"(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    preCrime(overrides?: CallOverrides): Promise<BigNumber>;

    "preCrime()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))"(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)"(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSendPacket(
      _sendParam: SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteSendPacket((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bytes,bool,bytes,bytes)"(
      _sendParam: SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDust(
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeDust(uint256)"(
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTAP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeTAP(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)"(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendPacket(
      _lzSendParam: LZSendParamStruct,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sendPacket(((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),bytes,address),bytes)"(
      _lzSendParam: LZSendParamStruct,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setDelegate(address)"(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setEnforcedOptions((uint32,uint16,bytes)[])"(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMinter(address)"(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMsgInspector(
      _msgInspector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMsgInspector(address)"(
      _msgInspector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPause(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPause(bool)"(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPearlmit(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPearlmit(address)"(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPeer(uint32,bytes32)"(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPreCrime(
      _preCrime: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPreCrime(address)"(
      _preCrime: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTapiocaOmnichainReceiveExtender(
      _tapiocaOmnichainReceiveExtender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTapiocaOmnichainReceiveExtender(address)"(
      _tapiocaOmnichainReceiveExtender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTwTAP(
      _twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTwTAP(address)"(
      _twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "sharedDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tapiocaOmnichainReceiveExtender(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tapiocaOmnichainReceiveExtender()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timestampToWeek(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "timestampToWeek(uint256)"(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toeExtExec(overrides?: CallOverrides): Promise<BigNumber>;

    "toeExtExec()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    twTap(overrides?: CallOverrides): Promise<BigNumber>;

    "twTap()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EPOCH_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "EPOCH_DURATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "INITIAL_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MSG_SEND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MSG_SEND()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SEND()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEND_AND_CALL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SEND_AND_CALL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowInitializePath((uint32,bytes32,uint64))"(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvalRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "approvalRequired()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    combineOptions(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "combineOptions(uint32,uint16,bytes)"(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    composeMsgSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "composeMsgSender()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimalConversionRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decimalConversionRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dso_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dso_supply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eip712Domain()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emissionForWeek(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "emissionForWeek(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emissionsStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "emissionsStartTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emitForWeek(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "emitForWeek()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "endpoint()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enforcedOptions(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "enforcedOptions(uint32,uint16)"(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeModule(
      _module: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _forwardRevert: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "executeModule(uint8,bytes,bool)"(
      _module: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      _forwardRevert: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extractTAP(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "extractTAP(address,uint256)"(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentWeek()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentWeekEmission(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentWeekEmission()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTypedDataHash(
      _permitData: ERC20PermitStructStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTypedDataHash((address,address,uint256,uint256,uint256))"(
      _permitData: ERC20PermitStructStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceEid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governanceEid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initEmissions(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initEmissions()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPeer(uint32,bytes32)"(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lzReceiveAndRevert(
      _packets: InboundPacketStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])"(
      _packets: InboundPacketStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lzReceiveSimulate(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)"(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintedInWeek(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mintedInWeek(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    msgInspector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "msgInspector()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextNonce(uint32,bytes32)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oApp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oAppVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oftVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oftVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pearlmit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pearlmit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peers(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "peers(uint32)"(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    preCrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "preCrime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))"(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)"(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSendPacket(
      _sendParam: SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteSendPacket((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bytes,bool,bytes,bytes)"(
      _sendParam: SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDust(
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeDust(uint256)"(
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTAP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeTAP(uint256)"(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)"(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendPacket(
      _lzSendParam: LZSendParamStruct,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sendPacket(((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),bytes,address),bytes)"(
      _lzSendParam: LZSendParamStruct,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setDelegate(address)"(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setEnforcedOptions((uint32,uint16,bytes)[])"(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMinter(address)"(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMsgInspector(
      _msgInspector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMsgInspector(address)"(
      _msgInspector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPause(bool)"(
      _pauseState: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPearlmit(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPearlmit(address)"(
      _pearlmit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPeer(uint32,bytes32)"(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPreCrime(
      _preCrime: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPreCrime(address)"(
      _preCrime: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTapiocaOmnichainReceiveExtender(
      _tapiocaOmnichainReceiveExtender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTapiocaOmnichainReceiveExtender(address)"(
      _tapiocaOmnichainReceiveExtender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTwTAP(
      _twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTwTAP(address)"(
      _twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sharedDecimals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tapiocaOmnichainReceiveExtender(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tapiocaOmnichainReceiveExtender()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timestampToWeek(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timestampToWeek(uint256)"(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toeExtExec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "toeExtExec()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    twTap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "twTap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
