/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC20WithoutStrategyMock,
  ERC20WithoutStrategyMockInterface,
} from "../../../options/mocks/ERC20WithoutStrategyMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IYieldBox",
        name: "_yieldBox",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "tokn",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "cheapWithdrawable",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "contractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposited",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenType",
    outputs: [
      {
        internalType: "enum TokenType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawable",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "yieldBox",
    outputs: [
      {
        internalType: "contract IYieldBox",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0346100a157601f6106aa38819003918201601f19168301916001600160401b038311848410176100a65780849260409485528339810103126100a15780516001600160a01b039182821682036100a157602001519182168092036100a15760805260a0526040516105ed90816100bd823960805181818161010b0152818161028501526102c8015260a05181818160b60152818161019001526104530152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe604060808152600436101561001357600080fd5b600090813560e01c806306fdde031461032f57806317d70f7c1461031557806330fa738c146102fa57806350188301146102615780637284e416146102f5578063afa91cc6146102a9578063ce845d1d14610261578063de40657714610266578063e3575f0514610261578063f3fef3a3146100de5763f6b4dfb41461009857600080fd5b346100da57816003193601126100da57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b50346100da57806003193601126100da576004356001600160a01b039081811680910361025d57610132827f000000000000000000000000000000000000000000000000000000000000000016331461050b565b825160208101917fa9059cbb00000000000000000000000000000000000000000000000000000000835260248201526024356044820152604481526080810181811067ffffffffffffffff82111761024957845251849283929083907f0000000000000000000000000000000000000000000000000000000000000000165af16101ba610556565b8161020d575b50156101ca575080f35b6064905162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152fd5b8051801592508215610222575b5050386101c0565b81925090602091810103126102455760200151801515810361024557388061021a565b8280fd5b602486634e487b7160e01b81526041600452fd5b8380fd5b6103e8565b50346100da57816003193601126100da57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b82346102f25760203660031901126102f2576102ef6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016331461050b565b80f35b80fd5b61032f565b50346100da57816003193601126100da576020905160018152f35b50346100da57816003193601126100da5751908152602090f35b346103e3576000806003193601126102f2576040805181810181811067ffffffffffffffff8211176103cf578252600b81526020907f4e6f2073747261746567790000000000000000000000000000000000000000008282015282519382859384528251928382860152825b8481106103b957505050828201840152601f01601f19168101030190f35b818101830151888201880152879550820161039b565b602484634e487b7160e01b81526041600452fd5b600080fd5b346103e3576000806003193601126102f257604051602090818101907f70a08231000000000000000000000000000000000000000000000000000000008252306024820152602481526060810181811067ffffffffffffffff8211176104f7576040525183918291907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa610485610556565b90806104ec575b156104a857818180518101031261024557810151604051908152f35b6064826040519062461bcd60e51b82526004820152601d60248201527f426f72696e6745524332303a2042616c616e63654f66206661696c65640000006044820152fd5b50818151101561048c565b602485634e487b7160e01b81526041600452fd5b1561051257565b606460405162461bcd60e51b815260206004820152600c60248201527f4e6f74205969656c64426f7800000000000000000000000000000000000000006044820152fd5b3d156105b25767ffffffffffffffff903d82811161059c5760405192601f8201601f19908116603f011684019081118482101761059c5760405282523d6000602084013e565b634e487b7160e01b600052604160045260246000fd5b60609056fea264697066735822122024708061cf5ef900c0535486be75eec0c9924c85929c885c1ce07e46d924a67964736f6c63430008120033";

type ERC20WithoutStrategyMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20WithoutStrategyMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20WithoutStrategyMock__factory extends ContractFactory {
  constructor(...args: ERC20WithoutStrategyMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20WithoutStrategyMock";
  }

  override deploy(
    _yieldBox: PromiseOrValue<string>,
    tokn: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20WithoutStrategyMock> {
    return super.deploy(
      _yieldBox,
      tokn,
      overrides || {}
    ) as Promise<ERC20WithoutStrategyMock>;
  }
  override getDeployTransaction(
    _yieldBox: PromiseOrValue<string>,
    tokn: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_yieldBox, tokn, overrides || {});
  }
  override attach(address: string): ERC20WithoutStrategyMock {
    return super.attach(address) as ERC20WithoutStrategyMock;
  }
  override connect(signer: Signer): ERC20WithoutStrategyMock__factory {
    return super.connect(signer) as ERC20WithoutStrategyMock__factory;
  }
  static readonly contractName: "ERC20WithoutStrategyMock";

  public readonly contractName: "ERC20WithoutStrategyMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20WithoutStrategyMockInterface {
    return new utils.Interface(_abi) as ERC20WithoutStrategyMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20WithoutStrategyMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC20WithoutStrategyMock;
  }
}
