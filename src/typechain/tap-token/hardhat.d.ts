/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC721NftLoader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721NftLoader__factory>;
    getContractFactory(
      name: "TwTAP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TwTAP__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "AirdropBroker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropBroker__factory>;
    getContractFactory(
      name: "AOTAP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AOTAP__factory>;
    getContractFactory(
      name: "LTap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LTap__factory>;
    getContractFactory(
      name: "OTAP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OTAP__factory>;
    getContractFactory(
      name: "TapiocaOptionBroker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapiocaOptionBroker__factory>;
    getContractFactory(
      name: "TapiocaOptionLiquidityProvision",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapiocaOptionLiquidityProvision__factory>;
    getContractFactory(
      name: "BaseTapToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseTapToken__factory>;
    getContractFactory(
      name: "TapTokenHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapTokenHelper__factory>;
    getContractFactory(
      name: "ModuleManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleManager__factory>;
    getContractFactory(
      name: "TapToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapToken__factory>;
    getContractFactory(
      name: "TapTokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapTokenReceiver__factory>;
    getContractFactory(
      name: "TapTokenSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapTokenSender__factory>;
    getContractFactory(
      name: "Vesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vesting__factory>;
    getContractFactory(
      name: "ERC721NftLoader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721NftLoader__factory>;
    getContractFactory(
      name: "TwTAP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TwTAP__factory>;
    getContractFactory(
      name: "BaseTapToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseTapToken__factory>;
    getContractFactory(
      name: "ModuleManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleManager__factory>;
    getContractFactory(
      name: "TapToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapToken__factory>;
    getContractFactory(
      name: "TapTokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapTokenReceiver__factory>;
    getContractFactory(
      name: "TapTokenSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapTokenSender__factory>;

    getContractAt(
      name: "ERC721NftLoader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721NftLoader>;
    getContractAt(
      name: "TwTAP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TwTAP>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "AirdropBroker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropBroker>;
    getContractAt(
      name: "AOTAP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AOTAP>;
    getContractAt(
      name: "LTap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LTap>;
    getContractAt(
      name: "OTAP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OTAP>;
    getContractAt(
      name: "TapiocaOptionBroker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapiocaOptionBroker>;
    getContractAt(
      name: "TapiocaOptionLiquidityProvision",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapiocaOptionLiquidityProvision>;
    getContractAt(
      name: "BaseTapToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseTapToken>;
    getContractAt(
      name: "TapTokenHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapTokenHelper>;
    getContractAt(
      name: "ModuleManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleManager>;
    getContractAt(
      name: "TapToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapToken>;
    getContractAt(
      name: "TapTokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapTokenReceiver>;
    getContractAt(
      name: "TapTokenSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapTokenSender>;
    getContractAt(
      name: "Vesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vesting>;
    getContractAt(
      name: "ERC721NftLoader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721NftLoader>;
    getContractAt(
      name: "TwTAP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TwTAP>;
    getContractAt(
      name: "BaseTapToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseTapToken>;
    getContractAt(
      name: "ModuleManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleManager>;
    getContractAt(
      name: "TapToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapToken>;
    getContractAt(
      name: "TapTokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapTokenReceiver>;
    getContractAt(
      name: "TapTokenSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapTokenSender>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
