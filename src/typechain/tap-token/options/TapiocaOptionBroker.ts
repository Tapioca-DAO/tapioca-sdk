/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type LockPositionStruct = {
  sglAssetID: PromiseOrValue<BigNumberish>;
  ybShares: PromiseOrValue<BigNumberish>;
  lockTime: PromiseOrValue<BigNumberish>;
  lockDuration: PromiseOrValue<BigNumberish>;
};

export type LockPositionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  sglAssetID: BigNumber;
  ybShares: BigNumber;
  lockTime: BigNumber;
  lockDuration: BigNumber;
};

export interface TapiocaOptionBrokerInterface extends utils.Interface {
  functions: {
    "EPOCH_DURATION()": FunctionFragment;
    "MIN_WEIGHT_FACTOR()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "collectPaymentTokens(address[])": FunctionFragment;
    "emissionsStartTime()": FunctionFragment;
    "epoch()": FunctionFragment;
    "epochTAPValuation()": FunctionFragment;
    "exerciseOption(uint256,address,uint256)": FunctionFragment;
    "exitPosition(uint256)": FunctionFragment;
    "getCurrentWeek()": FunctionFragment;
    "getOTCDealDetails(uint256,address,uint256)": FunctionFragment;
    "netDepositedForEpoch(uint256,uint256)": FunctionFragment;
    "newEpoch()": FunctionFragment;
    "oTAP()": FunctionFragment;
    "oTAPBrokerClaim()": FunctionFragment;
    "oTAPCalls(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "participants(uint256)": FunctionFragment;
    "participate(uint256)": FunctionFragment;
    "paused()": FunctionFragment;
    "paymentTokenBeneficiary()": FunctionFragment;
    "paymentTokens(address)": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "setMinWeightFactor(uint256)": FunctionFragment;
    "setPaymentToken(address,address,bytes)": FunctionFragment;
    "setPaymentTokenBeneficiary(address)": FunctionFragment;
    "setTapOracle(address,bytes)": FunctionFragment;
    "singularityGauges(uint256,uint256)": FunctionFragment;
    "tOLP()": FunctionFragment;
    "tapOFT()": FunctionFragment;
    "tapOracle()": FunctionFragment;
    "tapOracleData()": FunctionFragment;
    "timestampToWeek(uint256)": FunctionFragment;
    "transferOwnership(address,bool,bool)": FunctionFragment;
    "twAML(uint256)": FunctionFragment;
    "twAMLExit(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EPOCH_DURATION"
      | "EPOCH_DURATION()"
      | "MIN_WEIGHT_FACTOR"
      | "MIN_WEIGHT_FACTOR()"
      | "claimOwnership"
      | "claimOwnership()"
      | "collectPaymentTokens"
      | "collectPaymentTokens(address[])"
      | "emissionsStartTime"
      | "emissionsStartTime()"
      | "epoch"
      | "epoch()"
      | "epochTAPValuation"
      | "epochTAPValuation()"
      | "exerciseOption"
      | "exerciseOption(uint256,address,uint256)"
      | "exitPosition"
      | "exitPosition(uint256)"
      | "getCurrentWeek"
      | "getCurrentWeek()"
      | "getOTCDealDetails"
      | "getOTCDealDetails(uint256,address,uint256)"
      | "netDepositedForEpoch"
      | "netDepositedForEpoch(uint256,uint256)"
      | "newEpoch"
      | "newEpoch()"
      | "oTAP"
      | "oTAP()"
      | "oTAPBrokerClaim"
      | "oTAPBrokerClaim()"
      | "oTAPCalls"
      | "oTAPCalls(uint256,uint256)"
      | "owner"
      | "owner()"
      | "participants"
      | "participants(uint256)"
      | "participate"
      | "participate(uint256)"
      | "paused"
      | "paused()"
      | "paymentTokenBeneficiary"
      | "paymentTokenBeneficiary()"
      | "paymentTokens"
      | "paymentTokens(address)"
      | "pendingOwner"
      | "pendingOwner()"
      | "setMinWeightFactor"
      | "setMinWeightFactor(uint256)"
      | "setPaymentToken"
      | "setPaymentToken(address,address,bytes)"
      | "setPaymentTokenBeneficiary"
      | "setPaymentTokenBeneficiary(address)"
      | "setTapOracle"
      | "setTapOracle(address,bytes)"
      | "singularityGauges"
      | "singularityGauges(uint256,uint256)"
      | "tOLP"
      | "tOLP()"
      | "tapOFT"
      | "tapOFT()"
      | "tapOracle"
      | "tapOracle()"
      | "tapOracleData"
      | "tapOracleData()"
      | "timestampToWeek"
      | "timestampToWeek(uint256)"
      | "transferOwnership"
      | "transferOwnership(address,bool,bool)"
      | "twAML"
      | "twAML(uint256)"
      | "twAMLExit"
      | "twAMLExit(uint256,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EPOCH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EPOCH_DURATION()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WEIGHT_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WEIGHT_FACTOR()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectPaymentTokens",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPaymentTokens(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emissionsStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emissionsStartTime()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "epoch()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochTAPValuation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochTAPValuation()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exerciseOption",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exerciseOption(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPosition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPosition(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentWeek()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOTCDealDetails",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOTCDealDetails(uint256,address,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "netDepositedForEpoch",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "netDepositedForEpoch(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "newEpoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newEpoch()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oTAP", values?: undefined): string;
  encodeFunctionData(functionFragment: "oTAP()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oTAPBrokerClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oTAPBrokerClaim()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oTAPCalls",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "oTAPCalls(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "participants(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "participate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "participate(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentTokenBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTokenBeneficiary()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentTokens(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWeightFactor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWeightFactor(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentToken(address,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentTokenBeneficiary",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentTokenBeneficiary(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTapOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTapOracle(address,bytes)",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityGauges",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityGauges(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "tOLP", values?: undefined): string;
  encodeFunctionData(functionFragment: "tOLP()", values?: undefined): string;
  encodeFunctionData(functionFragment: "tapOFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "tapOFT()", values?: undefined): string;
  encodeFunctionData(functionFragment: "tapOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tapOracle()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tapOracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tapOracleData()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timestampToWeek",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timestampToWeek(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "twAML",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "twAML(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "twAMLExit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "twAMLExit(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WEIGHT_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WEIGHT_FACTOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPaymentTokens(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionsStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionsStartTime()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochTAPValuation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochTAPValuation()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exerciseOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exerciseOption(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPosition(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentWeek()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOTCDealDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOTCDealDetails(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "netDepositedForEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "netDepositedForEpoch(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newEpoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newEpoch()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oTAP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oTAP()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oTAPBrokerClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oTAPBrokerClaim()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oTAPCalls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oTAPCalls(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participants(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participate(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokenBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokenBeneficiary()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentTokens(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinWeightFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinWeightFactor(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentToken(address,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentTokenBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentTokenBeneficiary(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTapOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTapOracle(address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityGauges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityGauges(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tOLP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tOLP()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tapOFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tapOFT()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tapOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tapOracle()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tapOracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tapOracleData()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampToWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampToWeek(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twAML", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "twAML(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twAMLExit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "twAMLExit(uint256,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "AMLDivergence(uint256,uint256,uint256,uint256)": EventFragment;
    "ExerciseOption(uint256,address,address,uint256,uint256)": EventFragment;
    "ExitPosition(uint256,uint256,uint256)": EventFragment;
    "NewEpoch(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Participate(uint256,uint256,uint256,tuple,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "SetPaymentToken(address,address,bytes)": EventFragment;
    "SetTapOracle(address,bytes)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AMLDivergence"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AMLDivergence(uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExerciseOption"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExerciseOption(uint256,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitPosition"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExitPosition(uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEpoch"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewEpoch(uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Participate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Participate(uint256,uint256,uint256,tuple,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPaymentToken"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetPaymentToken(address,address,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTapOracle"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetTapOracle(address,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused(address)"): EventFragment;
}

export interface AMLDivergenceEventObject {
  epoch: BigNumber;
  cumulative: BigNumber;
  averageMagnitude: BigNumber;
  totalParticipants: BigNumber;
}
export type AMLDivergenceEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AMLDivergenceEventObject
>;

export type AMLDivergenceEventFilter = TypedEventFilter<AMLDivergenceEvent>;

export interface ExerciseOptionEventObject {
  epoch: BigNumber;
  to: string;
  paymentToken: string;
  oTapTokenID: BigNumber;
  amount: BigNumber;
}
export type ExerciseOptionEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  ExerciseOptionEventObject
>;

export type ExerciseOptionEventFilter = TypedEventFilter<ExerciseOptionEvent>;

export interface ExitPositionEventObject {
  epoch: BigNumber;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type ExitPositionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ExitPositionEventObject
>;

export type ExitPositionEventFilter = TypedEventFilter<ExitPositionEvent>;

export interface NewEpochEventObject {
  epoch: BigNumber;
  extractedTAP: BigNumber;
  epochTAPValuation: BigNumber;
}
export type NewEpochEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  NewEpochEventObject
>;

export type NewEpochEventFilter = TypedEventFilter<NewEpochEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ParticipateEventObject {
  epoch: BigNumber;
  sglAssetID: BigNumber;
  totalDeposited: BigNumber;
  lock: LockPositionStructOutput;
  discount: BigNumber;
}
export type ParticipateEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, LockPositionStructOutput, BigNumber],
  ParticipateEventObject
>;

export type ParticipateEventFilter = TypedEventFilter<ParticipateEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SetPaymentTokenEventObject {
  paymentToken: string;
  oracle: string;
  oracleData: string;
}
export type SetPaymentTokenEvent = TypedEvent<
  [string, string, string],
  SetPaymentTokenEventObject
>;

export type SetPaymentTokenEventFilter = TypedEventFilter<SetPaymentTokenEvent>;

export interface SetTapOracleEventObject {
  oracle: string;
  oracleData: string;
}
export type SetTapOracleEvent = TypedEvent<
  [string, string],
  SetTapOracleEventObject
>;

export type SetTapOracleEventFilter = TypedEventFilter<SetTapOracleEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface TapiocaOptionBroker extends BaseContract {
  contractName: "TapiocaOptionBroker";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TapiocaOptionBrokerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EPOCH_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_WEIGHT_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MIN_WEIGHT_FACTOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectPaymentTokens(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "collectPaymentTokens(address[])"(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emissionsStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "emissionsStartTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochTAPValuation(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epochTAPValuation()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    exerciseOption(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exerciseOption(uint256,address,uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitPosition(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exitPosition(uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentWeek()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOTCDealDetails(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        eligibleTapAmount: BigNumber;
        paymentTokenAmount: BigNumber;
        tapAmount: BigNumber;
      }
    >;

    "getOTCDealDetails(uint256,address,uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        eligibleTapAmount: BigNumber;
        paymentTokenAmount: BigNumber;
        tapAmount: BigNumber;
      }
    >;

    netDepositedForEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netAmount: BigNumber }>;

    "netDepositedForEpoch(uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netAmount: BigNumber }>;

    newEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newEpoch()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oTAP(overrides?: CallOverrides): Promise<[string]>;

    "oTAP()"(overrides?: CallOverrides): Promise<[string]>;

    oTAPBrokerClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "oTAPBrokerClaim()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oTAPCalls(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "oTAPCalls(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    participants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        hasVotingPower: boolean;
        divergenceForce: boolean;
        averageMagnitude: BigNumber;
      }
    >;

    "participants(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        hasVotingPower: boolean;
        divergenceForce: boolean;
        averageMagnitude: BigNumber;
      }
    >;

    participate(
      _tOLPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "participate(uint256)"(
      _tOLPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    paymentTokenBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    "paymentTokenBeneficiary()"(overrides?: CallOverrides): Promise<[string]>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oracle: string; oracleData: string }>;

    "paymentTokens(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oracle: string; oracleData: string }>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    setMinWeightFactor(
      _minWeightFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMinWeightFactor(uint256)"(
      _minWeightFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPaymentToken(address,address,bytes)"(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentTokenBeneficiary(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPaymentTokenBeneficiary(address)"(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTapOracle(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setTapOracle(address,bytes)"(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    singularityGauges(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "singularityGauges(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tOLP(overrides?: CallOverrides): Promise<[string]>;

    "tOLP()"(overrides?: CallOverrides): Promise<[string]>;

    tapOFT(overrides?: CallOverrides): Promise<[string]>;

    "tapOFT()"(overrides?: CallOverrides): Promise<[string]>;

    tapOracle(overrides?: CallOverrides): Promise<[string]>;

    "tapOracle()"(overrides?: CallOverrides): Promise<[string]>;

    tapOracleData(overrides?: CallOverrides): Promise<[string]>;

    "tapOracleData()"(overrides?: CallOverrides): Promise<[string]>;

    timestampToWeek(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "timestampToWeek(uint256)"(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    twAML(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalParticipants: BigNumber;
        averageMagnitude: BigNumber;
        totalDeposited: BigNumber;
        cumulative: BigNumber;
      }
    >;

    "twAML(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalParticipants: BigNumber;
        averageMagnitude: BigNumber;
        totalDeposited: BigNumber;
        cumulative: BigNumber;
      }
    >;

    twAMLExit(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalParticipants: BigNumber;
        averageMagnitude: BigNumber;
        totalDeposited: BigNumber;
        cumulative: BigNumber;
      }
    >;

    "twAMLExit(uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalParticipants: BigNumber;
        averageMagnitude: BigNumber;
        totalDeposited: BigNumber;
        cumulative: BigNumber;
      }
    >;
  };

  EPOCH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WEIGHT_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  "MIN_WEIGHT_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectPaymentTokens(
    _paymentTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "collectPaymentTokens(address[])"(
    _paymentTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emissionsStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "emissionsStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  epochTAPValuation(overrides?: CallOverrides): Promise<BigNumber>;

  "epochTAPValuation()"(overrides?: CallOverrides): Promise<BigNumber>;

  exerciseOption(
    _oTAPTokenID: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _tapAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exerciseOption(uint256,address,uint256)"(
    _oTAPTokenID: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _tapAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitPosition(
    _oTAPTokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exitPosition(uint256)"(
    _oTAPTokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentWeek(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOTCDealDetails(
    _oTAPTokenID: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _tapAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      eligibleTapAmount: BigNumber;
      paymentTokenAmount: BigNumber;
      tapAmount: BigNumber;
    }
  >;

  "getOTCDealDetails(uint256,address,uint256)"(
    _oTAPTokenID: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _tapAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      eligibleTapAmount: BigNumber;
      paymentTokenAmount: BigNumber;
      tapAmount: BigNumber;
    }
  >;

  netDepositedForEpoch(
    epoch: PromiseOrValue<BigNumberish>,
    sglAssetID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "netDepositedForEpoch(uint256,uint256)"(
    epoch: PromiseOrValue<BigNumberish>,
    sglAssetID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newEpoch(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newEpoch()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oTAP(overrides?: CallOverrides): Promise<string>;

  "oTAP()"(overrides?: CallOverrides): Promise<string>;

  oTAPBrokerClaim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "oTAPBrokerClaim()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oTAPCalls(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "oTAPCalls(uint256,uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  participants(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      hasVotingPower: boolean;
      divergenceForce: boolean;
      averageMagnitude: BigNumber;
    }
  >;

  "participants(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      hasVotingPower: boolean;
      divergenceForce: boolean;
      averageMagnitude: BigNumber;
    }
  >;

  participate(
    _tOLPTokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "participate(uint256)"(
    _tOLPTokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  paymentTokenBeneficiary(overrides?: CallOverrides): Promise<string>;

  "paymentTokenBeneficiary()"(overrides?: CallOverrides): Promise<string>;

  paymentTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { oracle: string; oracleData: string }>;

  "paymentTokens(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { oracle: string; oracleData: string }>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  setMinWeightFactor(
    _minWeightFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMinWeightFactor(uint256)"(
    _minWeightFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentToken(
    _paymentToken: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _oracleData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPaymentToken(address,address,bytes)"(
    _paymentToken: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _oracleData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentTokenBeneficiary(
    _paymentTokenBeneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPaymentTokenBeneficiary(address)"(
    _paymentTokenBeneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTapOracle(
    _tapOracle: PromiseOrValue<string>,
    _tapOracleData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setTapOracle(address,bytes)"(
    _tapOracle: PromiseOrValue<string>,
    _tapOracleData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  singularityGauges(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "singularityGauges(uint256,uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tOLP(overrides?: CallOverrides): Promise<string>;

  "tOLP()"(overrides?: CallOverrides): Promise<string>;

  tapOFT(overrides?: CallOverrides): Promise<string>;

  "tapOFT()"(overrides?: CallOverrides): Promise<string>;

  tapOracle(overrides?: CallOverrides): Promise<string>;

  "tapOracle()"(overrides?: CallOverrides): Promise<string>;

  tapOracleData(overrides?: CallOverrides): Promise<string>;

  "tapOracleData()"(overrides?: CallOverrides): Promise<string>;

  timestampToWeek(
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "timestampToWeek(uint256)"(
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    direct: PromiseOrValue<boolean>,
    renounce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address,bool,bool)"(
    newOwner: PromiseOrValue<string>,
    direct: PromiseOrValue<boolean>,
    renounce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  twAML(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalParticipants: BigNumber;
      averageMagnitude: BigNumber;
      totalDeposited: BigNumber;
      cumulative: BigNumber;
    }
  >;

  "twAML(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalParticipants: BigNumber;
      averageMagnitude: BigNumber;
      totalDeposited: BigNumber;
      cumulative: BigNumber;
    }
  >;

  twAMLExit(
    epoch: PromiseOrValue<BigNumberish>,
    sglAssetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalParticipants: BigNumber;
      averageMagnitude: BigNumber;
      totalDeposited: BigNumber;
      cumulative: BigNumber;
    }
  >;

  "twAMLExit(uint256,uint256)"(
    epoch: PromiseOrValue<BigNumberish>,
    sglAssetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalParticipants: BigNumber;
      averageMagnitude: BigNumber;
      totalDeposited: BigNumber;
      cumulative: BigNumber;
    }
  >;

  callStatic: {
    EPOCH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WEIGHT_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_WEIGHT_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    collectPaymentTokens(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "collectPaymentTokens(address[])"(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    emissionsStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionsStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochTAPValuation(overrides?: CallOverrides): Promise<BigNumber>;

    "epochTAPValuation()"(overrides?: CallOverrides): Promise<BigNumber>;

    exerciseOption(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "exerciseOption(uint256,address,uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPosition(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "exitPosition(uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOTCDealDetails(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        eligibleTapAmount: BigNumber;
        paymentTokenAmount: BigNumber;
        tapAmount: BigNumber;
      }
    >;

    "getOTCDealDetails(uint256,address,uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        eligibleTapAmount: BigNumber;
        paymentTokenAmount: BigNumber;
        tapAmount: BigNumber;
      }
    >;

    netDepositedForEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "netDepositedForEpoch(uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newEpoch(overrides?: CallOverrides): Promise<void>;

    "newEpoch()"(overrides?: CallOverrides): Promise<void>;

    oTAP(overrides?: CallOverrides): Promise<string>;

    "oTAP()"(overrides?: CallOverrides): Promise<string>;

    oTAPBrokerClaim(overrides?: CallOverrides): Promise<void>;

    "oTAPBrokerClaim()"(overrides?: CallOverrides): Promise<void>;

    oTAPCalls(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oTAPCalls(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    participants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        hasVotingPower: boolean;
        divergenceForce: boolean;
        averageMagnitude: BigNumber;
      }
    >;

    "participants(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        hasVotingPower: boolean;
        divergenceForce: boolean;
        averageMagnitude: BigNumber;
      }
    >;

    participate(
      _tOLPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "participate(uint256)"(
      _tOLPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    paymentTokenBeneficiary(overrides?: CallOverrides): Promise<string>;

    "paymentTokenBeneficiary()"(overrides?: CallOverrides): Promise<string>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oracle: string; oracleData: string }>;

    "paymentTokens(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { oracle: string; oracleData: string }>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    setMinWeightFactor(
      _minWeightFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinWeightFactor(uint256)"(
      _minWeightFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPaymentToken(address,address,bytes)"(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentTokenBeneficiary(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPaymentTokenBeneficiary(address)"(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTapOracle(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTapOracle(address,bytes)"(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    singularityGauges(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "singularityGauges(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tOLP(overrides?: CallOverrides): Promise<string>;

    "tOLP()"(overrides?: CallOverrides): Promise<string>;

    tapOFT(overrides?: CallOverrides): Promise<string>;

    "tapOFT()"(overrides?: CallOverrides): Promise<string>;

    tapOracle(overrides?: CallOverrides): Promise<string>;

    "tapOracle()"(overrides?: CallOverrides): Promise<string>;

    tapOracleData(overrides?: CallOverrides): Promise<string>;

    "tapOracleData()"(overrides?: CallOverrides): Promise<string>;

    timestampToWeek(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "timestampToWeek(uint256)"(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    twAML(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalParticipants: BigNumber;
        averageMagnitude: BigNumber;
        totalDeposited: BigNumber;
        cumulative: BigNumber;
      }
    >;

    "twAML(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalParticipants: BigNumber;
        averageMagnitude: BigNumber;
        totalDeposited: BigNumber;
        cumulative: BigNumber;
      }
    >;

    twAMLExit(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalParticipants: BigNumber;
        averageMagnitude: BigNumber;
        totalDeposited: BigNumber;
        cumulative: BigNumber;
      }
    >;

    "twAMLExit(uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalParticipants: BigNumber;
        averageMagnitude: BigNumber;
        totalDeposited: BigNumber;
        cumulative: BigNumber;
      }
    >;
  };

  filters: {
    "AMLDivergence(uint256,uint256,uint256,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      cumulative?: PromiseOrValue<BigNumberish> | null,
      averageMagnitude?: PromiseOrValue<BigNumberish> | null,
      totalParticipants?: null
    ): AMLDivergenceEventFilter;
    AMLDivergence(
      epoch?: PromiseOrValue<BigNumberish> | null,
      cumulative?: PromiseOrValue<BigNumberish> | null,
      averageMagnitude?: PromiseOrValue<BigNumberish> | null,
      totalParticipants?: null
    ): AMLDivergenceEventFilter;

    "ExerciseOption(uint256,address,address,uint256,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      paymentToken?: PromiseOrValue<string> | null,
      oTapTokenID?: null,
      amount?: null
    ): ExerciseOptionEventFilter;
    ExerciseOption(
      epoch?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<string> | null,
      paymentToken?: PromiseOrValue<string> | null,
      oTapTokenID?: null,
      amount?: null
    ): ExerciseOptionEventFilter;

    "ExitPosition(uint256,uint256,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ExitPositionEventFilter;
    ExitPosition(
      epoch?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): ExitPositionEventFilter;

    "NewEpoch(uint256,uint256,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      extractedTAP?: PromiseOrValue<BigNumberish> | null,
      epochTAPValuation?: PromiseOrValue<BigNumberish> | null
    ): NewEpochEventFilter;
    NewEpoch(
      epoch?: PromiseOrValue<BigNumberish> | null,
      extractedTAP?: PromiseOrValue<BigNumberish> | null,
      epochTAPValuation?: PromiseOrValue<BigNumberish> | null
    ): NewEpochEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Participate(uint256,uint256,uint256,tuple,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      sglAssetID?: PromiseOrValue<BigNumberish> | null,
      totalDeposited?: PromiseOrValue<BigNumberish> | null,
      lock?: null,
      discount?: null
    ): ParticipateEventFilter;
    Participate(
      epoch?: PromiseOrValue<BigNumberish> | null,
      sglAssetID?: PromiseOrValue<BigNumberish> | null,
      totalDeposited?: PromiseOrValue<BigNumberish> | null,
      lock?: null,
      discount?: null
    ): ParticipateEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SetPaymentToken(address,address,bytes)"(
      paymentToken?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      oracleData?: PromiseOrValue<BytesLike> | null
    ): SetPaymentTokenEventFilter;
    SetPaymentToken(
      paymentToken?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      oracleData?: PromiseOrValue<BytesLike> | null
    ): SetPaymentTokenEventFilter;

    "SetTapOracle(address,bytes)"(
      oracle?: PromiseOrValue<string> | null,
      oracleData?: PromiseOrValue<BytesLike> | null
    ): SetTapOracleEventFilter;
    SetTapOracle(
      oracle?: PromiseOrValue<string> | null,
      oracleData?: PromiseOrValue<BytesLike> | null
    ): SetTapOracleEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    EPOCH_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "EPOCH_DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WEIGHT_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_WEIGHT_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectPaymentTokens(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "collectPaymentTokens(address[])"(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emissionsStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "emissionsStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    "epoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochTAPValuation(overrides?: CallOverrides): Promise<BigNumber>;

    "epochTAPValuation()"(overrides?: CallOverrides): Promise<BigNumber>;

    exerciseOption(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exerciseOption(uint256,address,uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitPosition(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exitPosition(uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentWeek(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentWeek()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOTCDealDetails(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOTCDealDetails(uint256,address,uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    netDepositedForEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "netDepositedForEpoch(uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newEpoch()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oTAP(overrides?: CallOverrides): Promise<BigNumber>;

    "oTAP()"(overrides?: CallOverrides): Promise<BigNumber>;

    oTAPBrokerClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "oTAPBrokerClaim()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oTAPCalls(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "oTAPCalls(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    participants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "participants(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    participate(
      _tOLPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "participate(uint256)"(
      _tOLPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentTokenBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentTokenBeneficiary()"(overrides?: CallOverrides): Promise<BigNumber>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "paymentTokens(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setMinWeightFactor(
      _minWeightFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMinWeightFactor(uint256)"(
      _minWeightFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPaymentToken(address,address,bytes)"(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentTokenBeneficiary(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPaymentTokenBeneficiary(address)"(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTapOracle(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setTapOracle(address,bytes)"(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    singularityGauges(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "singularityGauges(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tOLP(overrides?: CallOverrides): Promise<BigNumber>;

    "tOLP()"(overrides?: CallOverrides): Promise<BigNumber>;

    tapOFT(overrides?: CallOverrides): Promise<BigNumber>;

    "tapOFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    tapOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "tapOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    tapOracleData(overrides?: CallOverrides): Promise<BigNumber>;

    "tapOracleData()"(overrides?: CallOverrides): Promise<BigNumber>;

    timestampToWeek(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "timestampToWeek(uint256)"(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    twAML(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "twAML(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    twAMLExit(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "twAMLExit(uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EPOCH_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "EPOCH_DURATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_WEIGHT_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MIN_WEIGHT_FACTOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectPaymentTokens(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "collectPaymentTokens(address[])"(
      _paymentTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emissionsStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "emissionsStartTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochTAPValuation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epochTAPValuation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exerciseOption(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exerciseOption(uint256,address,uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitPosition(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exitPosition(uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentWeek()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOTCDealDetails(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOTCDealDetails(uint256,address,uint256)"(
      _oTAPTokenID: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _tapAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    netDepositedForEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "netDepositedForEpoch(uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newEpoch()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oTAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oTAP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oTAPBrokerClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "oTAPBrokerClaim()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oTAPCalls(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oTAPCalls(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participants(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "participants(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participate(
      _tOLPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "participate(uint256)"(
      _tOLPTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentTokenBeneficiary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paymentTokenBeneficiary()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "paymentTokens(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinWeightFactor(
      _minWeightFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMinWeightFactor(uint256)"(
      _minWeightFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentToken(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPaymentToken(address,address,bytes)"(
      _paymentToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentTokenBeneficiary(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPaymentTokenBeneficiary(address)"(
      _paymentTokenBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTapOracle(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setTapOracle(address,bytes)"(
      _tapOracle: PromiseOrValue<string>,
      _tapOracleData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    singularityGauges(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "singularityGauges(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tOLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tOLP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tapOFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tapOFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tapOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tapOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tapOracleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tapOracleData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timestampToWeek(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "timestampToWeek(uint256)"(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    twAML(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "twAML(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    twAMLExit(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "twAMLExit(uint256,uint256)"(
      epoch: PromiseOrValue<BigNumberish>,
      sglAssetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
