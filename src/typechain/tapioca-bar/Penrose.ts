/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPenrose {
  export type MasterContractStruct = {
    location: PromiseOrValue<string>;
    risk: PromiseOrValue<BigNumberish>;
  };

  export type MasterContractStructOutput = [string, number] & {
    location: string;
    risk: number;
  };
}

export interface PenroseInterface extends utils.Interface {
  functions: {
    "_getMasterContractLength((address,uint8)[])": FunctionFragment;
    "addBigBang(address,address)": FunctionFragment;
    "addSingularity(address,address)": FunctionFragment;
    "bigBangEthDebtRate()": FunctionFragment;
    "bigBangEthMarket()": FunctionFragment;
    "bigBangMarkets()": FunctionFragment;
    "bigBangMasterContractLength()": FunctionFragment;
    "bigbangMasterContracts(uint256)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "clonesOf(address,uint256)": FunctionFragment;
    "clonesOfCount(address)": FunctionFragment;
    "cluster()": FunctionFragment;
    "conservator()": FunctionFragment;
    "deploy(address,bytes,bool)": FunctionFragment;
    "emptyStrategies(address)": FunctionFragment;
    "executeMarketFn(address[],bytes[],bool)": FunctionFragment;
    "hostLzChainId()": FunctionFragment;
    "isBigBangMasterContractRegistered(address)": FunctionFragment;
    "isMarketRegistered(address)": FunctionFragment;
    "isSingularityMasterContractRegistered(address)": FunctionFragment;
    "mainAssetId()": FunctionFragment;
    "mainToken()": FunctionFragment;
    "masterContractOf(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "registerBigBang(address,bytes,bool)": FunctionFragment;
    "registerBigBangMasterContract(address,uint8)": FunctionFragment;
    "registerSingularity(address,bytes,bool)": FunctionFragment;
    "registerSingularityMasterContract(address,uint8)": FunctionFragment;
    "setBigBangEthMarket(address)": FunctionFragment;
    "setBigBangEthMarketDebtRate(uint256)": FunctionFragment;
    "setConservator(address)": FunctionFragment;
    "setUsdoToken(address)": FunctionFragment;
    "singularityMarkets()": FunctionFragment;
    "singularityMasterContractLength()": FunctionFragment;
    "singularityMasterContracts(uint256)": FunctionFragment;
    "tapAssetId()": FunctionFragment;
    "tapToken()": FunctionFragment;
    "transferOwnership(address,bool,bool)": FunctionFragment;
    "updatePause(bool)": FunctionFragment;
    "usdoAssetId()": FunctionFragment;
    "usdoToken()": FunctionFragment;
    "withdrawAllMarketFees(address[],address)": FunctionFragment;
    "yieldBox()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_getMasterContractLength"
      | "_getMasterContractLength((address,uint8)[])"
      | "addBigBang"
      | "addBigBang(address,address)"
      | "addSingularity"
      | "addSingularity(address,address)"
      | "bigBangEthDebtRate"
      | "bigBangEthDebtRate()"
      | "bigBangEthMarket"
      | "bigBangEthMarket()"
      | "bigBangMarkets"
      | "bigBangMarkets()"
      | "bigBangMasterContractLength"
      | "bigBangMasterContractLength()"
      | "bigbangMasterContracts"
      | "bigbangMasterContracts(uint256)"
      | "claimOwnership"
      | "claimOwnership()"
      | "clonesOf"
      | "clonesOf(address,uint256)"
      | "clonesOfCount"
      | "clonesOfCount(address)"
      | "cluster"
      | "cluster()"
      | "conservator"
      | "conservator()"
      | "deploy"
      | "deploy(address,bytes,bool)"
      | "emptyStrategies"
      | "emptyStrategies(address)"
      | "executeMarketFn"
      | "executeMarketFn(address[],bytes[],bool)"
      | "hostLzChainId"
      | "hostLzChainId()"
      | "isBigBangMasterContractRegistered"
      | "isBigBangMasterContractRegistered(address)"
      | "isMarketRegistered"
      | "isMarketRegistered(address)"
      | "isSingularityMasterContractRegistered"
      | "isSingularityMasterContractRegistered(address)"
      | "mainAssetId"
      | "mainAssetId()"
      | "mainToken"
      | "mainToken()"
      | "masterContractOf"
      | "masterContractOf(address)"
      | "owner"
      | "owner()"
      | "paused"
      | "paused()"
      | "pendingOwner"
      | "pendingOwner()"
      | "registerBigBang"
      | "registerBigBang(address,bytes,bool)"
      | "registerBigBangMasterContract"
      | "registerBigBangMasterContract(address,uint8)"
      | "registerSingularity"
      | "registerSingularity(address,bytes,bool)"
      | "registerSingularityMasterContract"
      | "registerSingularityMasterContract(address,uint8)"
      | "setBigBangEthMarket"
      | "setBigBangEthMarket(address)"
      | "setBigBangEthMarketDebtRate"
      | "setBigBangEthMarketDebtRate(uint256)"
      | "setConservator"
      | "setConservator(address)"
      | "setUsdoToken"
      | "setUsdoToken(address)"
      | "singularityMarkets"
      | "singularityMarkets()"
      | "singularityMasterContractLength"
      | "singularityMasterContractLength()"
      | "singularityMasterContracts"
      | "singularityMasterContracts(uint256)"
      | "tapAssetId"
      | "tapAssetId()"
      | "tapToken"
      | "tapToken()"
      | "transferOwnership"
      | "transferOwnership(address,bool,bool)"
      | "updatePause"
      | "updatePause(bool)"
      | "usdoAssetId"
      | "usdoAssetId()"
      | "usdoToken"
      | "usdoToken()"
      | "withdrawAllMarketFees"
      | "withdrawAllMarketFees(address[],address)"
      | "yieldBox"
      | "yieldBox()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_getMasterContractLength",
    values: [IPenrose.MasterContractStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getMasterContractLength((address,uint8)[])",
    values: [IPenrose.MasterContractStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addBigBang",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addBigBang(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSingularity",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSingularity(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangEthDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangEthDebtRate()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangEthMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangEthMarket()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangMarkets()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangMasterContractLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangMasterContractLength()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigbangMasterContracts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bigbangMasterContracts(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clonesOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clonesOf(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clonesOfCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clonesOfCount(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "cluster", values?: undefined): string;
  encodeFunctionData(functionFragment: "cluster()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "conservator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "conservator()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy(address,bytes,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emptyStrategies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emptyStrategies(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMarketFn",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMarketFn(address[],bytes[],bool)",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hostLzChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hostLzChainId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBigBangMasterContractRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBigBangMasterContractRegistered(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketRegistered(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSingularityMasterContractRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSingularityMasterContractRegistered(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mainAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainAssetId()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mainToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mainToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterContractOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContractOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerBigBang",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBigBang(address,bytes,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBigBangMasterContract",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBigBangMasterContract(address,uint8)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSingularity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSingularity(address,bytes,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSingularityMasterContract",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSingularityMasterContract(address,uint8)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBigBangEthMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBigBangEthMarket(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBigBangEthMarketDebtRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBigBangEthMarketDebtRate(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConservator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConservator(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdoToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdoToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMarkets()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMasterContractLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMasterContractLength()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMasterContracts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMasterContracts(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tapAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tapAssetId()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tapToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tapToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePause(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "usdoAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdoAssetId()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdoToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdoToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllMarketFees",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllMarketFees(address[],address)",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yieldBox()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_getMasterContractLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getMasterContractLength((address,uint8)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBigBang", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBigBang(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSingularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSingularity(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangEthDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangEthDebtRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangEthMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangEthMarket()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangMarkets()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangMasterContractLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangMasterContractLength()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigbangMasterContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigbangMasterContracts(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clonesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clonesOf(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clonesOfCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clonesOfCount(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cluster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cluster()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conservator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conservator()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploy(address,bytes,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emptyStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emptyStrategies(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMarketFn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMarketFn(address[],bytes[],bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hostLzChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hostLzChainId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBigBangMasterContractRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBigBangMasterContractRegistered(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketRegistered(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSingularityMasterContractRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSingularityMasterContractRegistered(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainAssetId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mainToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mainToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterContractOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterContractOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBigBang",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBigBang(address,bytes,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBigBangMasterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBigBangMasterContract(address,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSingularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSingularity(address,bytes,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSingularityMasterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSingularityMasterContract(address,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBigBangEthMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBigBangEthMarket(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBigBangEthMarketDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBigBangEthMarketDebtRate(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConservator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConservator(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdoToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdoToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMarkets()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMasterContractLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMasterContractLength()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMasterContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMasterContracts(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tapAssetId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tapAssetId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tapToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tapToken()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePause(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdoAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdoAssetId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdoToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdoToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllMarketFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllMarketFees(address[],address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldBox()", data: BytesLike): Result;

  events: {
    "BigBangEthMarketDebtRate(uint256)": EventFragment;
    "BigBangEthMarketSet(address)": EventFragment;
    "ConservatorUpdated(address,address)": EventFragment;
    "LogDeploy(address,bytes,address)": EventFragment;
    "LogTwTapFeesDeposit(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PausedUpdated(bool,bool)": EventFragment;
    "ProtocolWithdrawal(address[],uint256)": EventFragment;
    "RegisterBigBang(address,address)": EventFragment;
    "RegisterBigBangMasterContract(address,uint8)": EventFragment;
    "RegisterSingularity(address,address)": EventFragment;
    "RegisterSingularityMasterContract(address,uint8)": EventFragment;
    "SwapperUpdate(address,uint16,bool)": EventFragment;
    "UsdoTokenUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BigBangEthMarketDebtRate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BigBangEthMarketDebtRate(uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BigBangEthMarketSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BigBangEthMarketSet(address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConservatorUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ConservatorUpdated(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeploy"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogDeploy(address,bytes,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTwTapFeesDeposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogTwTapFeesDeposit(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedUpdated(bool,bool)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolWithdrawal"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProtocolWithdrawal(address[],uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterBigBang"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RegisterBigBang(address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RegisterBigBangMasterContract"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RegisterBigBangMasterContract(address,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterSingularity"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RegisterSingularity(address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RegisterSingularityMasterContract"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RegisterSingularityMasterContract(address,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapperUpdate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SwapperUpdate(address,uint16,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsdoTokenUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UsdoTokenUpdated(address,uint256)"
  ): EventFragment;
}

export interface BigBangEthMarketDebtRateEventObject {
  _rate: BigNumber;
}
export type BigBangEthMarketDebtRateEvent = TypedEvent<
  [BigNumber],
  BigBangEthMarketDebtRateEventObject
>;

export type BigBangEthMarketDebtRateEventFilter =
  TypedEventFilter<BigBangEthMarketDebtRateEvent>;

export interface BigBangEthMarketSetEventObject {
  _newAddress: string;
}
export type BigBangEthMarketSetEvent = TypedEvent<
  [string],
  BigBangEthMarketSetEventObject
>;

export type BigBangEthMarketSetEventFilter =
  TypedEventFilter<BigBangEthMarketSetEvent>;

export interface ConservatorUpdatedEventObject {
  old: string;
  _new: string;
}
export type ConservatorUpdatedEvent = TypedEvent<
  [string, string],
  ConservatorUpdatedEventObject
>;

export type ConservatorUpdatedEventFilter =
  TypedEventFilter<ConservatorUpdatedEvent>;

export interface LogDeployEventObject {
  masterContract: string;
  data: string;
  cloneAddress: string;
}
export type LogDeployEvent = TypedEvent<
  [string, string, string],
  LogDeployEventObject
>;

export type LogDeployEventFilter = TypedEventFilter<LogDeployEvent>;

export interface LogTwTapFeesDepositEventObject {
  feeShares: BigNumber;
  ethAmount: BigNumber;
}
export type LogTwTapFeesDepositEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogTwTapFeesDepositEventObject
>;

export type LogTwTapFeesDepositEventFilter =
  TypedEventFilter<LogTwTapFeesDepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedUpdatedEventObject {
  oldState: boolean;
  newState: boolean;
}
export type PausedUpdatedEvent = TypedEvent<
  [boolean, boolean],
  PausedUpdatedEventObject
>;

export type PausedUpdatedEventFilter = TypedEventFilter<PausedUpdatedEvent>;

export interface ProtocolWithdrawalEventObject {
  markets: string[];
  timestamp: BigNumber;
}
export type ProtocolWithdrawalEvent = TypedEvent<
  [string[], BigNumber],
  ProtocolWithdrawalEventObject
>;

export type ProtocolWithdrawalEventFilter =
  TypedEventFilter<ProtocolWithdrawalEvent>;

export interface RegisterBigBangEventObject {
  location: string;
  masterContract: string;
}
export type RegisterBigBangEvent = TypedEvent<
  [string, string],
  RegisterBigBangEventObject
>;

export type RegisterBigBangEventFilter = TypedEventFilter<RegisterBigBangEvent>;

export interface RegisterBigBangMasterContractEventObject {
  location: string;
  risk: number;
}
export type RegisterBigBangMasterContractEvent = TypedEvent<
  [string, number],
  RegisterBigBangMasterContractEventObject
>;

export type RegisterBigBangMasterContractEventFilter =
  TypedEventFilter<RegisterBigBangMasterContractEvent>;

export interface RegisterSingularityEventObject {
  location: string;
  masterContract: string;
}
export type RegisterSingularityEvent = TypedEvent<
  [string, string],
  RegisterSingularityEventObject
>;

export type RegisterSingularityEventFilter =
  TypedEventFilter<RegisterSingularityEvent>;

export interface RegisterSingularityMasterContractEventObject {
  location: string;
  risk: number;
}
export type RegisterSingularityMasterContractEvent = TypedEvent<
  [string, number],
  RegisterSingularityMasterContractEventObject
>;

export type RegisterSingularityMasterContractEventFilter =
  TypedEventFilter<RegisterSingularityMasterContractEvent>;

export interface SwapperUpdateEventObject {
  swapper: string;
  id: number;
  isRegistered: boolean;
}
export type SwapperUpdateEvent = TypedEvent<
  [string, number, boolean],
  SwapperUpdateEventObject
>;

export type SwapperUpdateEventFilter = TypedEventFilter<SwapperUpdateEvent>;

export interface UsdoTokenUpdatedEventObject {
  usdoToken: string;
  assetId: BigNumber;
}
export type UsdoTokenUpdatedEvent = TypedEvent<
  [string, BigNumber],
  UsdoTokenUpdatedEventObject
>;

export type UsdoTokenUpdatedEventFilter =
  TypedEventFilter<UsdoTokenUpdatedEvent>;

export interface Penrose extends BaseContract {
  contractName: "Penrose";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PenroseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getMasterContractLength(
      array: IPenrose.MasterContractStruct[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { markets: string[] }>;

    "_getMasterContractLength((address,uint8)[])"(
      array: IPenrose.MasterContractStruct[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { markets: string[] }>;

    addBigBang(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addBigBang(address,address)"(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSingularity(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addSingularity(address,address)"(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bigBangEthDebtRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bigBangEthDebtRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    bigBangEthMarket(overrides?: CallOverrides): Promise<[string]>;

    "bigBangEthMarket()"(overrides?: CallOverrides): Promise<[string]>;

    bigBangMarkets(
      overrides?: CallOverrides
    ): Promise<[string[]] & { markets: string[] }>;

    "bigBangMarkets()"(
      overrides?: CallOverrides
    ): Promise<[string[]] & { markets: string[] }>;

    bigBangMasterContractLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "bigBangMasterContractLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bigbangMasterContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { location: string; risk: number }>;

    "bigbangMasterContracts(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { location: string; risk: number }>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clonesOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "clonesOf(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    clonesOfCount(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cloneCount: BigNumber }>;

    "clonesOfCount(address)"(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cloneCount: BigNumber }>;

    cluster(overrides?: CallOverrides): Promise<[string]>;

    "cluster()"(overrides?: CallOverrides): Promise<[string]>;

    conservator(overrides?: CallOverrides): Promise<[string]>;

    "conservator()"(overrides?: CallOverrides): Promise<[string]>;

    deploy(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deploy(address,bytes,bool)"(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emptyStrategies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "emptyStrategies(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    executeMarketFn(
      mc: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      forceSuccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "executeMarketFn(address[],bytes[],bool)"(
      mc: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      forceSuccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hostLzChainId(overrides?: CallOverrides): Promise<[number]>;

    "hostLzChainId()"(overrides?: CallOverrides): Promise<[number]>;

    isBigBangMasterContractRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isBigBangMasterContractRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMarketRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isMarketRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSingularityMasterContractRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isSingularityMasterContractRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mainAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mainAssetId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mainToken(overrides?: CallOverrides): Promise<[string]>;

    "mainToken()"(overrides?: CallOverrides): Promise<[string]>;

    masterContractOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "masterContractOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    registerBigBang(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerBigBang(address,bytes,bool)"(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerBigBangMasterContract(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerBigBangMasterContract(address,uint8)"(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSingularity(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerSingularity(address,bytes,bool)"(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSingularityMasterContract(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerSingularityMasterContract(address,uint8)"(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBigBangEthMarket(
      _market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBigBangEthMarket(address)"(
      _market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBigBangEthMarketDebtRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBigBangEthMarketDebtRate(uint256)"(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setConservator(address)"(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUsdoToken(
      _usdoToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUsdoToken(address)"(
      _usdoToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    singularityMarkets(
      overrides?: CallOverrides
    ): Promise<[string[]] & { markets: string[] }>;

    "singularityMarkets()"(
      overrides?: CallOverrides
    ): Promise<[string[]] & { markets: string[] }>;

    singularityMasterContractLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "singularityMasterContractLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    singularityMasterContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { location: string; risk: number }>;

    "singularityMasterContracts(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { location: string; risk: number }>;

    tapAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tapAssetId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tapToken(overrides?: CallOverrides): Promise<[string]>;

    "tapToken()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePause(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdoAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "usdoAssetId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    usdoToken(overrides?: CallOverrides): Promise<[string]>;

    "usdoToken()"(overrides?: CallOverrides): Promise<[string]>;

    withdrawAllMarketFees(
      markets_: PromiseOrValue<string>[],
      twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawAllMarketFees(address[],address)"(
      markets_: PromiseOrValue<string>[],
      twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;

    "yieldBox()"(overrides?: CallOverrides): Promise<[string]>;
  };

  _getMasterContractLength(
    array: IPenrose.MasterContractStruct[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  "_getMasterContractLength((address,uint8)[])"(
    array: IPenrose.MasterContractStruct[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  addBigBang(
    mc: PromiseOrValue<string>,
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addBigBang(address,address)"(
    mc: PromiseOrValue<string>,
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSingularity(
    mc: PromiseOrValue<string>,
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addSingularity(address,address)"(
    mc: PromiseOrValue<string>,
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bigBangEthDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

  "bigBangEthDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  bigBangEthMarket(overrides?: CallOverrides): Promise<string>;

  "bigBangEthMarket()"(overrides?: CallOverrides): Promise<string>;

  bigBangMarkets(overrides?: CallOverrides): Promise<string[]>;

  "bigBangMarkets()"(overrides?: CallOverrides): Promise<string[]>;

  bigBangMasterContractLength(overrides?: CallOverrides): Promise<BigNumber>;

  "bigBangMasterContractLength()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bigbangMasterContracts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { location: string; risk: number }>;

  "bigbangMasterContracts(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { location: string; risk: number }>;

  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clonesOf(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "clonesOf(address,uint256)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  clonesOfCount(
    masterContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "clonesOfCount(address)"(
    masterContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cluster(overrides?: CallOverrides): Promise<string>;

  "cluster()"(overrides?: CallOverrides): Promise<string>;

  conservator(overrides?: CallOverrides): Promise<string>;

  "conservator()"(overrides?: CallOverrides): Promise<string>;

  deploy(
    masterContract: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    useCreate2: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deploy(address,bytes,bool)"(
    masterContract: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    useCreate2: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emptyStrategies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "emptyStrategies(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  executeMarketFn(
    mc: PromiseOrValue<string>[],
    data: PromiseOrValue<BytesLike>[],
    forceSuccess: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "executeMarketFn(address[],bytes[],bool)"(
    mc: PromiseOrValue<string>[],
    data: PromiseOrValue<BytesLike>[],
    forceSuccess: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hostLzChainId(overrides?: CallOverrides): Promise<number>;

  "hostLzChainId()"(overrides?: CallOverrides): Promise<number>;

  isBigBangMasterContractRegistered(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isBigBangMasterContractRegistered(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMarketRegistered(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isMarketRegistered(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSingularityMasterContractRegistered(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isSingularityMasterContractRegistered(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mainAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  "mainAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

  mainToken(overrides?: CallOverrides): Promise<string>;

  "mainToken()"(overrides?: CallOverrides): Promise<string>;

  masterContractOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "masterContractOf(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  registerBigBang(
    mc: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    useCreate2: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerBigBang(address,bytes,bool)"(
    mc: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    useCreate2: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerBigBangMasterContract(
    mcAddress: PromiseOrValue<string>,
    contractType_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerBigBangMasterContract(address,uint8)"(
    mcAddress: PromiseOrValue<string>,
    contractType_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSingularity(
    mc: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    useCreate2: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerSingularity(address,bytes,bool)"(
    mc: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    useCreate2: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSingularityMasterContract(
    mcAddress: PromiseOrValue<string>,
    contractType_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerSingularityMasterContract(address,uint8)"(
    mcAddress: PromiseOrValue<string>,
    contractType_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBigBangEthMarket(
    _market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBigBangEthMarket(address)"(
    _market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBigBangEthMarketDebtRate(
    _rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBigBangEthMarketDebtRate(uint256)"(
    _rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConservator(
    _conservator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setConservator(address)"(
    _conservator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUsdoToken(
    _usdoToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUsdoToken(address)"(
    _usdoToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  singularityMarkets(overrides?: CallOverrides): Promise<string[]>;

  "singularityMarkets()"(overrides?: CallOverrides): Promise<string[]>;

  singularityMasterContractLength(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "singularityMasterContractLength()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  singularityMasterContracts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { location: string; risk: number }>;

  "singularityMasterContracts(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { location: string; risk: number }>;

  tapAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  "tapAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

  tapToken(overrides?: CallOverrides): Promise<string>;

  "tapToken()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    direct: PromiseOrValue<boolean>,
    renounce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address,bool,bool)"(
    newOwner: PromiseOrValue<string>,
    direct: PromiseOrValue<boolean>,
    renounce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePause(
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePause(bool)"(
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdoAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  "usdoAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

  usdoToken(overrides?: CallOverrides): Promise<string>;

  "usdoToken()"(overrides?: CallOverrides): Promise<string>;

  withdrawAllMarketFees(
    markets_: PromiseOrValue<string>[],
    twTap: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawAllMarketFees(address[],address)"(
    markets_: PromiseOrValue<string>[],
    twTap: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  "yieldBox()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _getMasterContractLength(
      array: IPenrose.MasterContractStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    "_getMasterContractLength((address,uint8)[])"(
      array: IPenrose.MasterContractStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    addBigBang(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addBigBang(address,address)"(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSingularity(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addSingularity(address,address)"(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bigBangEthDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    "bigBangEthDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    bigBangEthMarket(overrides?: CallOverrides): Promise<string>;

    "bigBangEthMarket()"(overrides?: CallOverrides): Promise<string>;

    bigBangMarkets(overrides?: CallOverrides): Promise<string[]>;

    "bigBangMarkets()"(overrides?: CallOverrides): Promise<string[]>;

    bigBangMasterContractLength(overrides?: CallOverrides): Promise<BigNumber>;

    "bigBangMasterContractLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bigbangMasterContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { location: string; risk: number }>;

    "bigbangMasterContracts(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { location: string; risk: number }>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    clonesOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "clonesOf(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    clonesOfCount(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "clonesOfCount(address)"(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cluster(overrides?: CallOverrides): Promise<string>;

    "cluster()"(overrides?: CallOverrides): Promise<string>;

    conservator(overrides?: CallOverrides): Promise<string>;

    "conservator()"(overrides?: CallOverrides): Promise<string>;

    deploy(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "deploy(address,bytes,bool)"(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    emptyStrategies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "emptyStrategies(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    executeMarketFn(
      mc: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      forceSuccess: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { success: boolean[]; result: string[] }
    >;

    "executeMarketFn(address[],bytes[],bool)"(
      mc: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      forceSuccess: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { success: boolean[]; result: string[] }
    >;

    hostLzChainId(overrides?: CallOverrides): Promise<number>;

    "hostLzChainId()"(overrides?: CallOverrides): Promise<number>;

    isBigBangMasterContractRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBigBangMasterContractRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMarketRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isMarketRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSingularityMasterContractRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSingularityMasterContractRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mainAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "mainAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    mainToken(overrides?: CallOverrides): Promise<string>;

    "mainToken()"(overrides?: CallOverrides): Promise<string>;

    masterContractOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "masterContractOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    registerBigBang(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "registerBigBang(address,bytes,bool)"(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerBigBangMasterContract(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerBigBangMasterContract(address,uint8)"(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSingularity(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "registerSingularity(address,bytes,bool)"(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerSingularityMasterContract(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerSingularityMasterContract(address,uint8)"(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBigBangEthMarket(
      _market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBigBangEthMarket(address)"(
      _market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBigBangEthMarketDebtRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBigBangEthMarketDebtRate(uint256)"(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setConservator(address)"(
      _conservator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsdoToken(
      _usdoToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUsdoToken(address)"(
      _usdoToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    singularityMarkets(overrides?: CallOverrides): Promise<string[]>;

    "singularityMarkets()"(overrides?: CallOverrides): Promise<string[]>;

    singularityMasterContractLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "singularityMasterContractLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    singularityMasterContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { location: string; risk: number }>;

    "singularityMasterContracts(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { location: string; risk: number }>;

    tapAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "tapAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    tapToken(overrides?: CallOverrides): Promise<string>;

    "tapToken()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePause(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdoAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "usdoAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    usdoToken(overrides?: CallOverrides): Promise<string>;

    "usdoToken()"(overrides?: CallOverrides): Promise<string>;

    withdrawAllMarketFees(
      markets_: PromiseOrValue<string>[],
      twTap: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAllMarketFees(address[],address)"(
      markets_: PromiseOrValue<string>[],
      twTap: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldBox(overrides?: CallOverrides): Promise<string>;

    "yieldBox()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BigBangEthMarketDebtRate(uint256)"(
      _rate?: null
    ): BigBangEthMarketDebtRateEventFilter;
    BigBangEthMarketDebtRate(_rate?: null): BigBangEthMarketDebtRateEventFilter;

    "BigBangEthMarketSet(address)"(
      _newAddress?: PromiseOrValue<string> | null
    ): BigBangEthMarketSetEventFilter;
    BigBangEthMarketSet(
      _newAddress?: PromiseOrValue<string> | null
    ): BigBangEthMarketSetEventFilter;

    "ConservatorUpdated(address,address)"(
      old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): ConservatorUpdatedEventFilter;
    ConservatorUpdated(
      old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): ConservatorUpdatedEventFilter;

    "LogDeploy(address,bytes,address)"(
      masterContract?: PromiseOrValue<string> | null,
      data?: null,
      cloneAddress?: PromiseOrValue<string> | null
    ): LogDeployEventFilter;
    LogDeploy(
      masterContract?: PromiseOrValue<string> | null,
      data?: null,
      cloneAddress?: PromiseOrValue<string> | null
    ): LogDeployEventFilter;

    "LogTwTapFeesDeposit(uint256,uint256)"(
      feeShares?: null,
      ethAmount?: null
    ): LogTwTapFeesDepositEventFilter;
    LogTwTapFeesDeposit(
      feeShares?: null,
      ethAmount?: null
    ): LogTwTapFeesDepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PausedUpdated(bool,bool)"(
      oldState?: null,
      newState?: null
    ): PausedUpdatedEventFilter;
    PausedUpdated(oldState?: null, newState?: null): PausedUpdatedEventFilter;

    "ProtocolWithdrawal(address[],uint256)"(
      markets?: null,
      timestamp?: null
    ): ProtocolWithdrawalEventFilter;
    ProtocolWithdrawal(
      markets?: null,
      timestamp?: null
    ): ProtocolWithdrawalEventFilter;

    "RegisterBigBang(address,address)"(
      location?: PromiseOrValue<string> | null,
      masterContract?: PromiseOrValue<string> | null
    ): RegisterBigBangEventFilter;
    RegisterBigBang(
      location?: PromiseOrValue<string> | null,
      masterContract?: PromiseOrValue<string> | null
    ): RegisterBigBangEventFilter;

    "RegisterBigBangMasterContract(address,uint8)"(
      location?: PromiseOrValue<string> | null,
      risk?: null
    ): RegisterBigBangMasterContractEventFilter;
    RegisterBigBangMasterContract(
      location?: PromiseOrValue<string> | null,
      risk?: null
    ): RegisterBigBangMasterContractEventFilter;

    "RegisterSingularity(address,address)"(
      location?: PromiseOrValue<string> | null,
      masterContract?: PromiseOrValue<string> | null
    ): RegisterSingularityEventFilter;
    RegisterSingularity(
      location?: PromiseOrValue<string> | null,
      masterContract?: PromiseOrValue<string> | null
    ): RegisterSingularityEventFilter;

    "RegisterSingularityMasterContract(address,uint8)"(
      location?: PromiseOrValue<string> | null,
      risk?: null
    ): RegisterSingularityMasterContractEventFilter;
    RegisterSingularityMasterContract(
      location?: PromiseOrValue<string> | null,
      risk?: null
    ): RegisterSingularityMasterContractEventFilter;

    "SwapperUpdate(address,uint16,bool)"(
      swapper?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      isRegistered?: null
    ): SwapperUpdateEventFilter;
    SwapperUpdate(
      swapper?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      isRegistered?: null
    ): SwapperUpdateEventFilter;

    "UsdoTokenUpdated(address,uint256)"(
      usdoToken?: PromiseOrValue<string> | null,
      assetId?: null
    ): UsdoTokenUpdatedEventFilter;
    UsdoTokenUpdated(
      usdoToken?: PromiseOrValue<string> | null,
      assetId?: null
    ): UsdoTokenUpdatedEventFilter;
  };

  estimateGas: {
    _getMasterContractLength(
      array: IPenrose.MasterContractStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_getMasterContractLength((address,uint8)[])"(
      array: IPenrose.MasterContractStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBigBang(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addBigBang(address,address)"(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSingularity(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addSingularity(address,address)"(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bigBangEthDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    "bigBangEthDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    bigBangEthMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "bigBangEthMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    bigBangMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    "bigBangMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

    bigBangMasterContractLength(overrides?: CallOverrides): Promise<BigNumber>;

    "bigBangMasterContractLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bigbangMasterContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bigbangMasterContracts(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clonesOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "clonesOf(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clonesOfCount(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "clonesOfCount(address)"(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cluster(overrides?: CallOverrides): Promise<BigNumber>;

    "cluster()"(overrides?: CallOverrides): Promise<BigNumber>;

    conservator(overrides?: CallOverrides): Promise<BigNumber>;

    "conservator()"(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deploy(address,bytes,bool)"(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emptyStrategies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "emptyStrategies(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeMarketFn(
      mc: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      forceSuccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "executeMarketFn(address[],bytes[],bool)"(
      mc: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      forceSuccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hostLzChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "hostLzChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    isBigBangMasterContractRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBigBangMasterContractRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isMarketRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSingularityMasterContractRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSingularityMasterContractRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "mainAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    mainToken(overrides?: CallOverrides): Promise<BigNumber>;

    "mainToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    masterContractOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "masterContractOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerBigBang(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerBigBang(address,bytes,bool)"(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerBigBangMasterContract(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerBigBangMasterContract(address,uint8)"(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSingularity(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerSingularity(address,bytes,bool)"(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSingularityMasterContract(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerSingularityMasterContract(address,uint8)"(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBigBangEthMarket(
      _market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBigBangEthMarket(address)"(
      _market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBigBangEthMarketDebtRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBigBangEthMarketDebtRate(uint256)"(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setConservator(address)"(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUsdoToken(
      _usdoToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUsdoToken(address)"(
      _usdoToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    singularityMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    "singularityMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

    singularityMasterContractLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "singularityMasterContractLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    singularityMasterContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "singularityMasterContracts(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tapAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "tapAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    tapToken(overrides?: CallOverrides): Promise<BigNumber>;

    "tapToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePause(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdoAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "usdoAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    usdoToken(overrides?: CallOverrides): Promise<BigNumber>;

    "usdoToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllMarketFees(
      markets_: PromiseOrValue<string>[],
      twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawAllMarketFees(address[],address)"(
      markets_: PromiseOrValue<string>[],
      twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;

    "yieldBox()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _getMasterContractLength(
      array: IPenrose.MasterContractStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_getMasterContractLength((address,uint8)[])"(
      array: IPenrose.MasterContractStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBigBang(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addBigBang(address,address)"(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSingularity(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addSingularity(address,address)"(
      mc: PromiseOrValue<string>,
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bigBangEthDebtRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bigBangEthDebtRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bigBangEthMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bigBangEthMarket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bigBangMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bigBangMarkets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bigBangMasterContractLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bigBangMasterContractLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bigbangMasterContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bigbangMasterContracts(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clonesOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "clonesOf(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clonesOfCount(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "clonesOfCount(address)"(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cluster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cluster()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    conservator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "conservator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deploy(address,bytes,bool)"(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emptyStrategies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "emptyStrategies(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeMarketFn(
      mc: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      forceSuccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "executeMarketFn(address[],bytes[],bool)"(
      mc: PromiseOrValue<string>[],
      data: PromiseOrValue<BytesLike>[],
      forceSuccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hostLzChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hostLzChainId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBigBangMasterContractRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBigBangMasterContractRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMarketRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSingularityMasterContractRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSingularityMasterContractRegistered(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mainAssetId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mainToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mainToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterContractOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "masterContractOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerBigBang(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerBigBang(address,bytes,bool)"(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerBigBangMasterContract(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerBigBangMasterContract(address,uint8)"(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSingularity(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerSingularity(address,bytes,bool)"(
      mc: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSingularityMasterContract(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerSingularityMasterContract(address,uint8)"(
      mcAddress: PromiseOrValue<string>,
      contractType_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBigBangEthMarket(
      _market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBigBangEthMarket(address)"(
      _market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBigBangEthMarketDebtRate(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBigBangEthMarketDebtRate(uint256)"(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setConservator(address)"(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUsdoToken(
      _usdoToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUsdoToken(address)"(
      _usdoToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    singularityMarkets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "singularityMarkets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    singularityMasterContractLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "singularityMasterContractLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    singularityMasterContracts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "singularityMasterContracts(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tapAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tapAssetId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tapToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tapToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePause(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdoAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdoAssetId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdoToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAllMarketFees(
      markets_: PromiseOrValue<string>[],
      twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAllMarketFees(address[],address)"(
      markets_: PromiseOrValue<string>[],
      twTap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yieldBox()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
