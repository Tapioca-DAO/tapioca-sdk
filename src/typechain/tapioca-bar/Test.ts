/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TestInterface extends utils.Interface {
  functions: {
    "computeMintFeeTest(uint256,uint256,uint256)": FunctionFragment;
    "getCallerReward(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getRevert(bytes4)": FunctionFragment;
    "x()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeMintFeeTest"
      | "computeMintFeeTest(uint256,uint256,uint256)"
      | "getCallerReward"
      | "getCallerReward(uint256,uint256,uint256,uint256,uint256)"
      | "getRevert"
      | "getRevert(bytes4)"
      | "x"
      | "x()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeMintFeeTest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeMintFeeTest(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCallerReward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCallerReward(uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevert",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevert(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "x", values?: undefined): string;
  encodeFunctionData(functionFragment: "x()", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "computeMintFeeTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeMintFeeTest(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCallerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCallerReward(uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRevert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRevert(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "x", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "x()", data: BytesLike): Result;

  events: {};
}

export interface Test extends BaseContract {
  contractName: "Test";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeMintFeeTest(
      rate: PromiseOrValue<BigNumberish>,
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "computeMintFeeTest(uint256,uint256,uint256)"(
      rate: PromiseOrValue<BigNumberish>,
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCallerReward(
      borrowed: PromiseOrValue<BigNumberish>,
      startTVLInAsset: PromiseOrValue<BigNumberish>,
      maxTVLInAsset: PromiseOrValue<BigNumberish>,
      minLiquidatorReward: PromiseOrValue<BigNumberish>,
      maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getCallerReward(uint256,uint256,uint256,uint256,uint256)"(
      borrowed: PromiseOrValue<BigNumberish>,
      startTVLInAsset: PromiseOrValue<BigNumberish>,
      maxTVLInAsset: PromiseOrValue<BigNumberish>,
      minLiquidatorReward: PromiseOrValue<BigNumberish>,
      maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRevert(
      _returnData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    "getRevert(bytes4)"(
      _returnData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    x(overrides?: CallOverrides): Promise<[BigNumber]>;

    "x()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  computeMintFeeTest(
    rate: PromiseOrValue<BigNumberish>,
    minFee: PromiseOrValue<BigNumberish>,
    maxFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "computeMintFeeTest(uint256,uint256,uint256)"(
    rate: PromiseOrValue<BigNumberish>,
    minFee: PromiseOrValue<BigNumberish>,
    maxFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCallerReward(
    borrowed: PromiseOrValue<BigNumberish>,
    startTVLInAsset: PromiseOrValue<BigNumberish>,
    maxTVLInAsset: PromiseOrValue<BigNumberish>,
    minLiquidatorReward: PromiseOrValue<BigNumberish>,
    maxLiquidatorReward: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCallerReward(uint256,uint256,uint256,uint256,uint256)"(
    borrowed: PromiseOrValue<BigNumberish>,
    startTVLInAsset: PromiseOrValue<BigNumberish>,
    maxTVLInAsset: PromiseOrValue<BigNumberish>,
    minLiquidatorReward: PromiseOrValue<BigNumberish>,
    maxLiquidatorReward: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRevert(
    _returnData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRevert(bytes4)"(
    _returnData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  x(overrides?: CallOverrides): Promise<BigNumber>;

  "x()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    computeMintFeeTest(
      rate: PromiseOrValue<BigNumberish>,
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeMintFeeTest(uint256,uint256,uint256)"(
      rate: PromiseOrValue<BigNumberish>,
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCallerReward(
      borrowed: PromiseOrValue<BigNumberish>,
      startTVLInAsset: PromiseOrValue<BigNumberish>,
      maxTVLInAsset: PromiseOrValue<BigNumberish>,
      minLiquidatorReward: PromiseOrValue<BigNumberish>,
      maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCallerReward(uint256,uint256,uint256,uint256,uint256)"(
      borrowed: PromiseOrValue<BigNumberish>,
      startTVLInAsset: PromiseOrValue<BigNumberish>,
      maxTVLInAsset: PromiseOrValue<BigNumberish>,
      minLiquidatorReward: PromiseOrValue<BigNumberish>,
      maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevert(
      _returnData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRevert(bytes4)"(
      _returnData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    x(overrides?: CallOverrides): Promise<BigNumber>;

    "x()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    computeMintFeeTest(
      rate: PromiseOrValue<BigNumberish>,
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeMintFeeTest(uint256,uint256,uint256)"(
      rate: PromiseOrValue<BigNumberish>,
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCallerReward(
      borrowed: PromiseOrValue<BigNumberish>,
      startTVLInAsset: PromiseOrValue<BigNumberish>,
      maxTVLInAsset: PromiseOrValue<BigNumberish>,
      minLiquidatorReward: PromiseOrValue<BigNumberish>,
      maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCallerReward(uint256,uint256,uint256,uint256,uint256)"(
      borrowed: PromiseOrValue<BigNumberish>,
      startTVLInAsset: PromiseOrValue<BigNumberish>,
      maxTVLInAsset: PromiseOrValue<BigNumberish>,
      minLiquidatorReward: PromiseOrValue<BigNumberish>,
      maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevert(
      _returnData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRevert(bytes4)"(
      _returnData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    x(overrides?: CallOverrides): Promise<BigNumber>;

    "x()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    computeMintFeeTest(
      rate: PromiseOrValue<BigNumberish>,
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeMintFeeTest(uint256,uint256,uint256)"(
      rate: PromiseOrValue<BigNumberish>,
      minFee: PromiseOrValue<BigNumberish>,
      maxFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCallerReward(
      borrowed: PromiseOrValue<BigNumberish>,
      startTVLInAsset: PromiseOrValue<BigNumberish>,
      maxTVLInAsset: PromiseOrValue<BigNumberish>,
      minLiquidatorReward: PromiseOrValue<BigNumberish>,
      maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCallerReward(uint256,uint256,uint256,uint256,uint256)"(
      borrowed: PromiseOrValue<BigNumberish>,
      startTVLInAsset: PromiseOrValue<BigNumberish>,
      maxTVLInAsset: PromiseOrValue<BigNumberish>,
      minLiquidatorReward: PromiseOrValue<BigNumberish>,
      maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevert(
      _returnData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRevert(bytes4)"(
      _returnData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    x(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "x()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
