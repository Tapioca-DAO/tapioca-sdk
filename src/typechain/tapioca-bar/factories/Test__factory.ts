/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Test, TestInterface } from "../Test";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxFee",
        type: "uint256",
      },
    ],
    name: "computeMintFeeTest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "borrowed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTVLInAsset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxTVLInAsset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minLiquidatorReward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxLiquidatorReward",
        type: "uint256",
      },
    ],
    name: "getCallerReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_returnData",
        type: "bytes4",
      },
    ],
    name: "getRevert",
    outputs: [
      {
        internalType: "string",
        name: "result",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "x",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001b57600160005561035b90816100218239f35b600080fdfe608060408181526004918236101561001657600080fd5b600090813560e01c9081630c55699c1461015257508063191778cd1461012357806373f368ca146100805763d9cabbbb1461005057600080fd5b3461007d57606036600319011261007d575061007660209260443590602435903561018f565b9051908152f35b80fd5b503461007d5760208060031936011261011f5783359163ffffffff60e01b831680930361007d57835192828401528483528383019483861067ffffffffffffffff87111761010c5750848452818552825191826060850152815b8381106100f857505082820160800152601f01601f19168101030190f35b8082918601608083820151910152016100da565b634e487b7160e01b825260419052602490fd5b5080fd5b503461007d5760a036600319011261007d57506100766020926084359060643590604435906024359035610201565b90503461011f578160031936011261011f57602091548152f35b9190820391821161017957565b634e487b7160e01b600052601160045260246000fd5b9190670de0b6b3a76400008310156101fb57670d87e555900180008311156101f557670d87e55590017fff198301928311610179576101ce908261016c565b91828102928184041490151715610179576658d15e176280006101f292049061016c565b90565b50905090565b91505090565b919091821561031b5782811061031b578181101561031357826102239161016c565b90620186a09283830292808404851490151715610179576102439161016c565b9081156102fd570490838303600092838612858312811690868413901516176102e95781810291848112600160ff1b8314166102d55782051485851417156102c157058184820194851291129080158216911516176102ad57508082126102a8575090565b905090565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b600052601260045260246000fd5b505050905090565b505050505060009056fea26469706673582212204fd38ddbd07614c6d876de8041a09743cd444925f642eb9f3f6905666c5ed8f764736f6c63430008130033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Test";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }
  static readonly contractName: "Test";

  public readonly contractName: "Test";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
