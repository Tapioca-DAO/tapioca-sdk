/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AssetToEthLeverageExecutor,
  AssetToEthLeverageExecutorInterface,
} from "../../../markets/leverage/AssetToEthLeverageExecutor";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract YieldBox",
        name: "_yb",
        type: "address",
      },
      {
        internalType: "contract ISwapper",
        name: "_swapper",
        type: "address",
      },
      {
        internalType: "contract ICluster",
        name: "_cluster",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotEnough",
    type: "error",
  },
  {
    inputs: [],
    name: "SenderNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapperNotAuthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapperNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotValid",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "buildSwapDefaultData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cluster",
    outputs: [
      {
        internalType: "contract ICluster",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "assetId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "collateralAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "assetAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "collateralAmountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getAsset",
    outputs: [
      {
        internalType: "uint256",
        name: "assetAmountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "collateralId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "assetAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "collateralAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "assetAmountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "collateralAmountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICluster",
        name: "_cluster",
        type: "address",
      },
    ],
    name: "setCluster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISwapper",
        name: "_swapper",
        type: "address",
      },
    ],
    name: "setSwapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapper",
    outputs: [
      {
        internalType: "contract ISwapper",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "direct",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "renounce",
        type: "bool",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "yieldBox",
    outputs: [
      {
        internalType: "contract YieldBox",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a0346100f057601f6113bd38819003918201601f19168301916001600160401b038311848410176100f5578084926060946040528339810103126100f0578051906001600160a01b039081831683036100f0576020810151908282168092036100f057604001519182168092036100f05760008054604051946001600160a01b03199491851693919233907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a36080528360035416176003558260025416176002553391331617176000556112b1908161010c82396080518181816102c8015281816104cf0152610bcb0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260049081361015610020575b5050361561001e57600080fd5b005b600091823560e01c908163078dfbe714610d225781630fb5d60d14610a515781632b3297f914610a28578163437be622146109dc5781634e71e0c8146109295781638da5cb5b146109015781639c82f2a4146108b1578163c990ad1c14610320578163dbd01de1146102f7578163de406577146102b3578163e2211658146100d8575063e30c39780361001157346100d457816003193601126100d45760015490516001600160a01b039091168152602090f35b5080fd5b8383346100d45760603660031901126100d4576100f3610e30565b6001600160a01b0393602435858116949291908590036102ae578351958487018781106001600160401b038211176102995785526002875260209561060f60f31b87890152816003541691865194631fd177af60e11b86521683850152602484015260443560448401526000606484015260006084840152600060a484015261014092838160c481855afa93841561028f5790879392918695610260575b50506101ad8651948593630b7ecdc960e31b8552840190611151565b61016061014483015281806101c661016482018b610ec6565b03915afa91821561025557809261021e575b50509061020b61021a926101fd83519687928784015284808401526060830190610ec6565b03601f198101865285610f95565b51928284938452830190610ec6565b0390f35b9091508382813d831161024e575b6102368183610f95565b8101031261024b57505161020b61021a6101d8565b80fd5b503d61022c565b8351903d90823e3d90fd5b610280929550803d10610288575b6102788183610f95565b81019061105d565b928880610191565b503d61026e565b86513d87823e3d90fd5b604183634e487b7160e01b6000525260246000fd5b600080fd5b5050346100d457816003193601126100d457517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346100d457816003193601126100d45760025490516001600160a01b039091168152602090f35b91905061032c36610e46565b9895919493909792600160a01b600190039889600254169a8951809c633a304d8b60e21b82528a8883015233602483015260209d8e91815a91604492fa908115610862578a9161087c575b501561086c578a92916103949161038c6111bd565b810190610fc3565b92909316958951633c2f4f4360e11b81528c8188818b5afa90811561086257908c918b91610826575b501661081657908a9392918460035416600060a48d519e8f94631fd177af60e11b86521693848b82015282602482015285604482015282606482015282608482015201526101409c8d8160c481855afa9d8e156107ec5760009e6107f7575b5050816106e5575b50505088906104769a610454600086600354169285519e8f958694859363efa84c6d60e01b85528d850190611151565b88610144840152306101648401526101a06101848401526101a4830190610ec6565b03925af19889156106da576000996106ba575b5088106106aa57833b1561062a578651630c46aac760e31b8152308482015230602482015288604482015286816064818c895af180156106a05790879161068c575b50507f00000000000000000000000000000000000000000000000000000000000000001692865163095ea7b360e01b9081815285858201528760248201528a816044818b875af1801561068257918a918c9361063f575b5089519081526001600160a01b038716868201908152602081019290925292839182908a9082906040015b03925af18015610635579188969593918895936105ec575b508451634d4d7cbd60e11b81529182019081523060208201526001600160a01b039093166040840152606083019590955260006080830152849182908590829060a00103925af190811561025557506105c0575b5051908152f35b6105df90823d84116105e5575b6105d78183610f95565b810190611047565b506105b9565b503d6105cd565b8092949697508a80929496503d831161062e575b61060a8183610f95565b8101031261062a5791858794926106238a989795610fb6565b5090610565565b8580fd5b503d610600565b87513d88823e3d90fd5b8092508391933d831161067b575b6106578183610f95565b810103126106775761054d928b9261066f8c93610fb6565b509093610522565b8780fd5b503d61064d565b89513d8a823e3d90fd5b61069590610f51565b61062a5785386104cb565b88513d89823e3d90fd5b865163342ccafd60e21b81528390fd5b6106d2919950883d8a116105e5576105d78183610f95565b509738610489565b88513d6000823e3d90fd5b8d8c519063095ea7b360e01b928383528a83015260006024830152816044816000875af180156107ec578f9391928e938b926107ac575b5060009061074f8a600354169551978896879586948552840160209093929193604081019460018060a01b031681520152565b03925af180156107a157610765575b8080610424565b908b82813d831161079a575b61077b8183610f95565b810103126102ae576104769a6107918b93610fb6565b509a509061075e565b503d610771565b8a513d6000823e3d90fd5b935093905082813d83116107e5575b6107c58183610f95565b810103126102ae57888f936000908f946107de90610fb6565b509061071c565b503d6107bb565b8d513d6000823e3d90fd5b61080e929e50803d10610288576102788183610f95565b9b388061041c565b89516358700a0160e11b81528690fd5b8092508e8092503d831161085b575b61083f8183610f95565b81010312610857576108518c91611033565b386103bd565b8980fd5b503d610835565b8b513d8c823e3d90fd5b89516303482c7160e21b81528690fd5b90508c81813d83116108aa575b6108938183610f95565b81010312610857576108a490610fb6565b38610377565b503d610889565b8390346100d45760203660031901126100d457356001600160a01b03818116918290036108fd576108e6908354163314610f06565b600380546001600160a01b03191691909117905580f35b8280fd5b5050346100d457816003193601126100d457905490516001600160a01b039091168152602090f35b919050346108fd57826003193601126108fd576001546001600160a01b039290918383169190338390036109995750508084549384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a01b03199283161783551660015580f35b906020606492519162461bcd60e51b8352820152602060248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152fd5b8390346100d45760203660031901126100d457356001600160a01b03818116918290036108fd57610a11908354163314610f06565b600280546001600160a01b03191691909117905580f35b5050346100d457816003193601126100d45760035490516001600160a01b039091168152602090f35b8383346100d457610a6136610e46565b9795919460018060a09b959b1b03918260025416998951809b633a304d8b60e21b82528a8883015233602483015281604460209e8f935afa908115610862578a91610ced575b501561086c578391610abb9161038c6111bd565b919092168951633c2f4f4360e11b81528b818881855afa908115610862579085918b91610cb5575b501661081657803b15610cb15789516339f4769360e01b815230878201908152602081018e905290918a9183919082908490829060400103925af18015610ca757610c94575b5082600354169a838a5197631fd177af60e11b89526000888a015216968760248201528160448201526000606482015260006084820152600060a4820152808d8160c46101409485935afa918215610c895792610baf9d9e92610454928e9695600092610c6c575b5050855163efa84c6d60e01b81529e8f95869485938d850190611151565b03925af19889156106da57600099610c4c575b5088106106aa577f00000000000000000000000000000000000000000000000000000000000000001692865163095ea7b360e01b9081815285858201528760248201528a816044818b875af1801561068257918a918c9361063f575089519081526001600160a01b038716868201908152602081019290925292839182908a90829060400161054d565b610c64919950883d8a116105e5576105d78183610f95565b50978a610bc2565b610c829250803d10610288576102788183610f95565b3880610b91565b8c513d6000823e3d90fd5b610ca090989198610f51565b968b610b29565b8a513d8b823e3d90fd5b8880fd5b8092508d8092503d8311610ce6575b610cce8183610f95565b8101031261085757610ce08591611033565b8e610ae3565b503d610cc4565b90508b81813d8311610d1b575b610d048183610f95565b8101031261085757610d1590610fb6565b8d610aa7565b503d610cfa565b919050346108fd5760603660031901126108fd57610d3e610e30565b91602435918215158303610e2c5760443592831515840361062a5760018060a01b03948591610d71838954163314610f06565b15610e13571692831590811591610e0b575b5015610dd05750508083549283167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a36001600160a01b031991821617825560018054909116905580f35b906020606492519162461bcd60e51b835282015260156024820152744f776e61626c653a207a65726f206164647265737360581b6044820152fd5b905038610d83565b93505050501660018060a01b0319600154161760015580f35b8480fd5b600435906001600160a01b03821682036102ae57565b9060c06003198301126102ae57600435916001600160a01b0360243581811681036102ae579260443582811681036102ae57926064359260843590811681036102ae579160a4356001600160401b03928382116102ae57806023830112156102ae5781600401359384116102ae57602484830101116102ae576024019190565b919082519283825260005b848110610ef2575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610ed1565b15610f0d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160401b038111610f6457604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b03821117610f6457604052565b90601f801991011681019081106001600160401b03821117610f6457604052565b519081151582036102ae57565b91906040838203126102ae578235926020808201356001600160401b03928382116102ae57019183601f840112156102ae578235908111610f645760405193611015601f8301601f1916840186610f95565b8185528282850101116102ae57808260009401838601378301015290565b51906001600160a01b03821682036102ae57565b91908260409103126102ae576020825192015190565b80910361014081126102ae5760408051926001600160401b03926060850184811186821017610f6457808452608082126102ae5761109a81610f7a565b6110a383611033565b8152602083015160808701526110ba848401611033565b60a0870152606083015160c087015285526080607f198201126102ae57829081516110e481610f7a565b6080840151815260a0840151602082015260c08401518382015260e08401516060820152602087015260ff1901126102ae5781519283830190811184821017610f64576111469161012091845261113e6101008201610fb6565b855201610fb6565b602083015282015290565b60206040610120926060815160018060a01b03808251168852858201518689015284820151168488015201516060860152606083820151805160808801528481015160a08801528381015160c0880152015160e086015201518051151561010085015201511515910152565b6003546001600160a01b03908116908115611269576020906002541691604460405180948193633a304d8b60e21b83526000600484015260248301525afa90811561125d57600091611224575b501561121257565b60405163086a95e160e21b8152600490fd5b906020823d8211611255575b8161123d60209383610f95565b8101031261024b575061124f90610fb6565b3861120a565b3d9150611230565b6040513d6000823e3d90fd5b604051631da137b560e01b8152600490fdfea2646970667358221220a21509a4a920a5e0e2b81275724bb1129717cda680063a55e97796dbfe79b08064736f6c63430008120033";

type AssetToEthLeverageExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AssetToEthLeverageExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AssetToEthLeverageExecutor__factory extends ContractFactory {
  constructor(...args: AssetToEthLeverageExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AssetToEthLeverageExecutor";
  }

  override deploy(
    _yb: PromiseOrValue<string>,
    _swapper: PromiseOrValue<string>,
    _cluster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AssetToEthLeverageExecutor> {
    return super.deploy(
      _yb,
      _swapper,
      _cluster,
      overrides || {}
    ) as Promise<AssetToEthLeverageExecutor>;
  }
  override getDeployTransaction(
    _yb: PromiseOrValue<string>,
    _swapper: PromiseOrValue<string>,
    _cluster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_yb, _swapper, _cluster, overrides || {});
  }
  override attach(address: string): AssetToEthLeverageExecutor {
    return super.attach(address) as AssetToEthLeverageExecutor;
  }
  override connect(signer: Signer): AssetToEthLeverageExecutor__factory {
    return super.connect(signer) as AssetToEthLeverageExecutor__factory;
  }
  static readonly contractName: "AssetToEthLeverageExecutor";

  public readonly contractName: "AssetToEthLeverageExecutor";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetToEthLeverageExecutorInterface {
    return new utils.Interface(_abi) as AssetToEthLeverageExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetToEthLeverageExecutor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AssetToEthLeverageExecutor;
  }
}
