/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AssetTotsDaiLeverageExecutor,
  AssetTotsDaiLeverageExecutorInterface,
} from "../../../markets/leverage/AssetTotsDaiLeverageExecutor";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract YieldBox",
        name: "_yb",
        type: "address",
      },
      {
        internalType: "contract ISwapper",
        name: "_swapper",
        type: "address",
      },
      {
        internalType: "contract ICluster",
        name: "_cluster",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "buildSwapDefaultData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cluster",
    outputs: [
      {
        internalType: "contract ICluster",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "assetId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "collateralAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "assetAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "collateralAmountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getAsset",
    outputs: [
      {
        internalType: "uint256",
        name: "assetAmountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "collateralId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "assetAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "collateralAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "assetAmountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "collateralAmountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICluster",
        name: "_cluster",
        type: "address",
      },
    ],
    name: "setCluster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISwapper",
        name: "_swapper",
        type: "address",
      },
    ],
    name: "setSwapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapper",
    outputs: [
      {
        internalType: "contract ISwapper",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "direct",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "renounce",
        type: "bool",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "yieldBox",
    outputs: [
      {
        internalType: "contract YieldBox",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0346100f057601f61165738819003918201601f19168301916001600160401b038311848410176100f5578084926060946040528339810103126100f0578051906001600160a01b039081831683036100f0576020810151908282168092036100f057604001519182168092036100f05760008054604051946001600160a01b03199491851693919233907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a360805283600354161760035582600254161760025533913316171760005561154b908161010c82396080518181816102a4015281816104980152610a4c0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c908163078dfbe714610b3a5781630fb5d60d146109475781632b3297f91461091e578163437be622146108d25781634e71e0c81461081f5781638da5cb5b146107f75781639c82f2a4146107ab578163c990ad1c146102fc578163dbd01de1146102d3578163de4065771461028f578163e2211658146100d2575063e30c3978146100a757600080fd5b346100ce57816003193601126100ce5760015490516001600160a01b039091168152602090f35b5080fd5b9050823461028c57606036600319011261028c576100ee610c48565b602435936001600160a01b03939091908486168603610227578251958387018781106001600160401b038211176102775784526002875260209561060f60f31b878901526003541690845190631fd177af60e11b8252818061015b6101409788946044359189850161111f565b0381855afa93841561026d579087939291879561023e575b505061018f8551948593630b7ecdc960e31b8552840190611156565b61016061014483015281806101a861016482018b610cde565b03915afa92831561023357926101fd575b506101ea6101f9926101dc83519687928784015284808401526060830190610cde565b03601f198101865285610dad565b51928284938452830190610cde565b0390f35b91508282813d831161022c575b6102148183610dad565b81010312610227579051906101ea6101b9565b600080fd5b503d61020a565b8251903d90823e3d90fd5b61025e929550803d10610266575b6102568183610dad565b81019061102b565b928880610173565b503d61024c565b85513d88823e3d90fd5b604183634e487b7160e01b6000525260246000fd5b80fd5b5050346100ce57816003193601126100ce57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346100ce57816003193601126100ce5760025490516001600160a01b039091168152602090f35b919050346107a757610348919261033261035161031836610c5e565b61032a9c96959497939c9892986113e0565b810190610dce565b8161033f889c939c610eed565b809e91966111c2565b98891015610e3e565b865163095ea7b360e01b8082526001600160a01b03838116868401526024830189905260209b919690929091908c816044818d8887165af180156106e0578c92888f93878f8f92908e918c9761075b575b506103b890519889978896879485528401610ea8565b0393165af1801561075157610719575b50885199636e553f6560e01b8b52858b01523060248b01528a8a6044818b8688165af1998a1561063c57889a6106ea575b508851928684528282169384878201528960248201528c816044818d8887165af180156106e05791878b8f948f96948f8d918a93610692575b5061044890519889978896879485528401610ea8565b0393165af1801561063c5761065e575b50813b1561065a578751630c46aac760e31b81523085820152306024820152896044820152878160648183875af1801561063c57908891610646575b50507f00000000000000000000000000000000000000000000000000000000000000001693875181815285858201528760248201528a816044818b875af1801561063c57918a918c936105f9575b50926104fc93898b5180968195829483528b8b8401610ea8565b03925af180156105ef579188969593918895936105a6575b508451634d4d7cbd60e11b81529182019081523060208201526001600160a01b039093166040840152606083019590955260006080830152849182908590829060a00103925af190811561059b575061056f575b5051908152f35b61058e90823d8411610594575b6105868183610dad565b810190610ec3565b50610568565b503d61057c565b8351903d90823e3d90fd5b8092949697508a80929496503d83116105e8575b6105c48183610dad565b810103126105e45791858794926105dd8a989795610e9b565b5090610514565b8580fd5b503d6105ba565b87513d88823e3d90fd5b8092508391933d8311610635575b6106118183610dad565b81010312610631576104fc928b926106298c93610e9b565b5090936104e2565b8780fd5b503d610607565b89513d8a823e3d90fd5b61064f90610d69565b61065a578638610494565b8680fd5b8a81813d831161068b575b6106738183610dad565b810103126106315761068490610e9b565b5038610458565b503d610669565b96985050505050509181813d83116106d9575b6106af8183610dad565b810103126106d557918c91878b868f968f610448906106ce8f93610e9b565b5090610432565b8980fd5b503d6106a5565b8b513d8c823e3d90fd5b9099508a81813d8311610712575b6107028183610dad565b81010312610227575198386103f9565b503d6106f8565b8b81813d831161074a575b61072e8183610dad565b810103126107465761073f90610e9b565b50386103c8565b8880fd5b503d610724565b8a513d8b823e3d90fd5b9796505050505050925081813d83116107a0575b6107798183610dad565b810103126106d557848c92888f93878f8f928e916107996103b892610e9b565b50906103a2565b503d61076f565b8280fd5b8390346100ce5760203660031901126100ce57356001600160a01b03818116918290036107a7576107e0908354163314610d1e565b600380546001600160a01b03191691909117905580f35b5050346100ce57816003193601126100ce57905490516001600160a01b039091168152602090f35b919050346107a757826003193601126107a7576001546001600160a01b0392909183831691903383900361088f5750508084549384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a01b03199283161783551660015580f35b906020606492519162461bcd60e51b8352820152602060248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152fd5b8390346100ce5760203660031901126100ce57356001600160a01b03818116918290036107a757610907908354163314610d1e565b600280546001600160a01b03191691909117905580f35b5050346100ce57816003193601126100ce5760035490516001600160a01b039091168152602090f35b919050346107a75761096c919261095d36610c5e565b61032a9a94999296939a6113e0565b61097885999299610eed565b6001600160a01b03969091908716803b156106d557898d6109b09289838f518096819582946339f4769360e01b845230908401610ea8565b03925af180156106e057610b27575b50861689519b6363737ac960e11b8d52868d015260209b8c81602481855afa9081156106e057918d918b94938591610af2575b506064908d519586938492635d043b2960e11b84528c8401523060248401523060448401525af191821561075157918b91889594938b92610ab8575b5091610a48939185610a3f946111c2565b998a1015610e3e565b16927f00000000000000000000000000000000000000000000000000000000000000001692865163095ea7b360e01b9081815285858201528760248201528a816044818b875af1801561063c57918a918c936105f95750926104fc93898b5180968195829483528b8b8401610ea8565b9395509150508b82813d8311610aeb575b610ad38183610dad565b810103126102275790518693918b9190610a3f610a2e565b503d610ac9565b92809295508391503d8311610b20575b610b0c8183610dad565b81010312610227575189928d9160646109f2565b503d610b02565b98610b3388929a610d69565b98906109bf565b919050346107a75760603660031901126107a757610b56610c48565b91602435918215158303610c44576044359283151584036105e45760018060a01b03948591610b89838954163314610d1e565b15610c2b571692831590811591610c23575b5015610be85750508083549283167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a36001600160a01b031991821617825560018054909116905580f35b906020606492519162461bcd60e51b835282015260156024820152744f776e61626c653a207a65726f206164647265737360581b6044820152fd5b905038610b9b565b93505050501660018060a01b0319600154161760015580f35b8480fd5b600435906001600160a01b038216820361022757565b9060c060031983011261022757600435916001600160a01b036024358181168103610227579260443582811681036102275792606435926084359081168103610227579160a4356001600160401b039283821161022757806023830112156102275781600401359384116102275760248483010111610227576024019190565b919082519283825260005b848110610d0a575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610ce9565b15610d2557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160401b038111610d7c57604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b03821117610d7c57604052565b90601f801991011681019081106001600160401b03821117610d7c57604052565b9190604083820312610227578235926020808201356001600160401b039283821161022757019183601f84011215610227578235908111610d7c5760405193610e20601f8301601f1916840186610dad565b81855282828501011161022757808260009401838601378301015290565b15610e4557565b60405162461bcd60e51b815260206004820152602860248201527f4173736574546f74734461694c657665726167654578656375746f723a206e6f6044820152670e840cadcdeeaced60c31b6064820152608490fd5b5190811515820361022757565b6001600160a01b039091168152602081019190915260400190565b9190826040910312610227576020825192015190565b51906001600160a01b038216820361022757565b604051633c2f4f4360e11b815291906020906001600160a01b039082908590600490829085165afa938415610f8e57600094610ff4575b5083168015610f9a5790806004926040519384809263f4b9fa7560e01b82525afa908115610f8e57600091610f5a575b50905090565b82813d8311610f87575b610f6e8183610dad565b8101031261028c5750610f8090610ed9565b8038610f54565b503d610f64565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101839052602c60248201527f4173736574546f74734461694c657665726167654578656375746f723a20734460448201526b1052481b9bdd081d985b1a5960a21b6064820152608490fd5b90938282813d8311611024575b61100b8183610dad565b8101031261028c575061101d90610ed9565b9238610f24565b503d611001565b80910361014081126102275760408051926001600160401b03926060850184811186821017610d7c57808452608082126102275761106881610d92565b61107183610ed9565b815260208301516080870152611088848401610ed9565b60a0870152606083015160c087015285526080607f1982011261022757829081516110b281610d92565b6080840151815260a0840151602082015260c08401518382015260e08401516060820152602087015260ff1901126102275781519283830190811184821017610d7c576111149161012091845261110c6101008201610e9b565b855201610e9b565b602083015282015290565b6001600160a01b0391821681529116602082015260408101919091526000606082018190526080820181905260a082015260c00190565b60206040610120926060815160018060a01b03808251168852858201518689015284820151168488015201516060860152606083820151805160808801528481015160a08801528381015160c0880152015160e086015201518051151561010085015201511515910152565b918095949293919360018060a01b0390816003541690604096875190631fd177af60e11b825281806111fd610140988994876004850161111f565b0381865afa9485156113d5576000956113b2575b5050821697886112ac575b50508495965061124e90600395949554169161126f85519687958694859463efa84c6d60e01b86526004860190611156565b610144840152306101648401526101a06101848401526101a4830190610cde565b039134905af19182156112a25760009261128857505090565b61129e9250803d10610594576105868183610dad565b5090565b513d6000823e3d90fd5b86519863095ea7b360e01b92838b5260048b0152600060248b01526020998a816044816000865af180156113a757908b93929161136e575b506113059360008660035416918b5196879586948593845260048401610ea8565b03925af197881561136357869798969596611326575b88975095949561121c565b9080929550813d831161135c575b61133e8183610dad565b8101031261022757859361135461124e92610e9b565b50903861131b565b503d611334565b86513d6000823e3d90fd5b9283813d83116113a0575b6113838183610dad565b8101031261022757611305936113998c94610e9b565b50936112e4565b503d611379565b89513d6000823e3d90fd5b8492955090816113cd92903d10610266576102568183610dad565b939038611211565b88513d6000823e3d90fd5b6003546001600160a01b039081169081156114c4576020906002541691604460405180948193633a304d8b60e21b83526000600484015260248301525afa908115610f8e5760009161148b575b501561143557565b60405162461bcd60e51b815260206004820152602860248201527f4c657665726167654578656375746f723a2073776170706572206e6f742061756044820152671d1a1bdc9a5e995960c21b6064820152608490fd5b906020823d82116114bc575b816114a460209383610dad565b8101031261028c57506114b690610e9b565b3861142d565b3d9150611497565b60405162461bcd60e51b815260206004820152602360248201527f4c657665726167654578656375746f723a2073776170706572206e6f742076616044820152621b1a5960ea1b6064820152608490fdfea2646970667358221220b25b9c119d655a589e6534a4dfac4eb58a4215c53e5752a0e1295a2d80fea98564736f6c63430008120033";

type AssetTotsDaiLeverageExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AssetTotsDaiLeverageExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AssetTotsDaiLeverageExecutor__factory extends ContractFactory {
  constructor(...args: AssetTotsDaiLeverageExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AssetTotsDaiLeverageExecutor";
  }

  override deploy(
    _yb: PromiseOrValue<string>,
    _swapper: PromiseOrValue<string>,
    _cluster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AssetTotsDaiLeverageExecutor> {
    return super.deploy(
      _yb,
      _swapper,
      _cluster,
      overrides || {}
    ) as Promise<AssetTotsDaiLeverageExecutor>;
  }
  override getDeployTransaction(
    _yb: PromiseOrValue<string>,
    _swapper: PromiseOrValue<string>,
    _cluster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_yb, _swapper, _cluster, overrides || {});
  }
  override attach(address: string): AssetTotsDaiLeverageExecutor {
    return super.attach(address) as AssetTotsDaiLeverageExecutor;
  }
  override connect(signer: Signer): AssetTotsDaiLeverageExecutor__factory {
    return super.connect(signer) as AssetTotsDaiLeverageExecutor__factory;
  }
  static readonly contractName: "AssetTotsDaiLeverageExecutor";

  public readonly contractName: "AssetTotsDaiLeverageExecutor";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetTotsDaiLeverageExecutorInterface {
    return new utils.Interface(_abi) as AssetTotsDaiLeverageExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetTotsDaiLeverageExecutor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AssetTotsDaiLeverageExecutor;
  }
}
