/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AssetTotsDaiLeverageExecutor,
  AssetTotsDaiLeverageExecutorInterface,
} from "../../../markets/leverage/AssetTotsDaiLeverageExecutor";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract YieldBox",
        name: "_yb",
        type: "address",
      },
      {
        internalType: "contract ISwapper",
        name: "_swapper",
        type: "address",
      },
      {
        internalType: "contract ICluster",
        name: "_cluster",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "NotEnough",
    type: "error",
  },
  {
    inputs: [],
    name: "SenderNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapperNotAuthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapperNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotValid",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "buildSwapDefaultData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cluster",
    outputs: [
      {
        internalType: "contract ICluster",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "assetId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "collateralAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "assetAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "collateralAmountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getAsset",
    outputs: [
      {
        internalType: "uint256",
        name: "assetAmountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "collateralId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "assetAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "collateralAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "assetAmountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "collateralAmountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICluster",
        name: "_cluster",
        type: "address",
      },
    ],
    name: "setCluster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISwapper",
        name: "_swapper",
        type: "address",
      },
    ],
    name: "setSwapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapper",
    outputs: [
      {
        internalType: "contract ISwapper",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "direct",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "renounce",
        type: "bool",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "yieldBox",
    outputs: [
      {
        internalType: "contract YieldBox",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0346100e957601f6114ae38819003918201601f19168301916001600160401b038311848410176100ee578084926060946040528339810103126100e9578051906001600160a01b039081831683036100e9576020810151908282168092036100e957604001519182168092036100e95760008054604051946001600160a01b03199491851693919233907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a36080528360035416176003558260025416176002553391331617176000556113a9908161010582396080518181816102c601526110de0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c908163078dfbe7146109135781630fb5d60d146106c05781632b3297f914610697578163437be6221461064b5781634e71e0c8146105985781638da5cb5b146105705781639c82f2a414610520578163c990ad1c1461031e578163dbd01de1146102f5578163de406577146102b1578163e2211658146100d2575063e30c3978146100a757600080fd5b346100ce57816003193601126100ce5760015490516001600160a01b039091168152602090f35b5080fd5b905082346102ae5760603660031901126102ae576100ee610a21565b602435936001600160a01b03939091908486168603610249578251958387018781106001600160401b038211176102995784526002875261060f60f31b602080890191909152600354855163678a252760e11b81526001600160a01b0395861685820190815293909516838301526044356040840152600060608401529096610140949116918490829081906080010381855afa93841561028f5790879392918795610260575b50506101b18551948593630b7ecdc960e31b8552840190610e38565b61016061014483015281806101ca61016482018b610ab7565b03915afa928315610255579261021f575b5061020c61021b926101fe83519687928784015284808401526060830190610ab7565b03601f198101865285610b86565b51928284938452830190610ab7565b0390f35b91508282813d831161024e575b6102368183610b86565b810103126102495790519061020c6101db565b600080fd5b503d61022c565b8251903d90823e3d90fd5b610280929550803d10610288575b6102788183610b86565b810190610d44565b928880610195565b503d61026e565b85513d88823e3d90fd5b604183634e487b7160e01b6000525260246000fd5b80fd5b5050346100ce57816003193601126100ce57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346100ce57816003193601126100ce5760025490516001600160a01b039091168152602090f35b838361032936610a37565b979593929098919460018060a01b03918260025416998951809b633a304d8b60e21b82528a8783015233602483015281604460209e8f935afa908115610516578a916104dd575b50156104cd576103a59a9b61038f91610387611013565b810190610bcf565b8161039c889d939d610c4e565b80959196610eba565b998a106104b55789826103b7926111d8565b875198636e553f6560e01b8a52838a01523060248a015289896044818a8686165af19889156104ab578799610478575b5088846103f3926111d8565b821690813b156104745785916064839289519889938492630c46aac760e31b845230908401523060248401528c60448401525af180156104685790879493929161044b575b50610445945030916110c5565b51908152f35b919350919361045a8291610b42565b6102ae579183918693610438565b508551903d90823e3d90fd5b8580fd5b909398508981813d83116104a4575b6104918183610b86565b81010312610249575197926103f36103e7565b503d610487565b88513d89823e3d90fd5b88516328e217f560e01b815290831681850152602490fd5b89516303482c7160e21b81528590fd5b90508b81813d831161050f575b6104f48183610b86565b8101031261050b5761050590610ba7565b8d610370565b8980fd5b503d6104ea565b8b513d8c823e3d90fd5b8390346100ce5760203660031901126100ce57356001600160a01b038181169182900361056c57610555908354163314610af7565b600380546001600160a01b03191691909117905580f35b8280fd5b5050346100ce57816003193601126100ce57905490516001600160a01b039091168152602090f35b9190503461056c578260031936011261056c576001546001600160a01b039290918383169190338390036106085750508084549384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a01b03199283161783551660015580f35b906020606492519162461bcd60e51b8352820152602060248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152fd5b8390346100ce5760203660031901126100ce57356001600160a01b038181169182900361056c57610680908354163314610af7565b600280546001600160a01b03191691909117905580f35b5050346100ce57816003193601126100ce5760035490516001600160a01b039091168152602090f35b8383346100ce576106d036610a37565b98929091959497600160a01b600190039283600254169a8951809c633a304d8b60e21b8252848883015233602483015260209d8e91815a91604492fa9081156109095784916108d4575b50156108c4578493929161073091610387611013565b92909a61073c81610c4e565b95909116803b156108c0578b516339f4769360e01b815230818a01908152602081018590529091859183919082908490829060400103925af180156108b657908792916108a3575b5016908a51906363737ac960e11b8252878201528c81602481855afa90811561089957918d9184938491610864575b506064908d519485938492635d043b2960e11b84528c8401523060248401523060448401525af1918215610859578b9291889192610825575b506107f694610eba565b96871061080d5750509184916104459330916110c5565b85516328e217f560e01b815292169082015260249150fd5b925050508a81813d8311610852575b61083e8183610b86565b8101031261024957518990866107f66107ec565b503d610834565b8a51903d90823e3d90fd5b92809294508391503d8311610892575b61087e8183610b86565b81010312610249575182918d9160646107b3565b503d610874565b8b513d85823e3d90fd5b6108af90949194610b42565b928e610784565b8c513d86823e3d90fd5b8380fd5b89516303482c7160e21b81528690fd5b90508c81813d8311610902575b6108eb8183610b86565b810103126108c0576108fc90610ba7565b8d61071a565b503d6108e1565b8b513d86823e3d90fd5b9190503461056c57606036600319011261056c5761092f610a21565b91602435918215158303610a1d576044359283151584036104745760018060a01b03948591610962838954163314610af7565b15610a045716928315908115916109fc575b50156109c15750508083549283167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a36001600160a01b031991821617825560018054909116905580f35b906020606492519162461bcd60e51b835282015260156024820152744f776e61626c653a207a65726f206164647265737360581b6044820152fd5b905038610974565b93505050501660018060a01b0319600154161760015580f35b8480fd5b600435906001600160a01b038216820361024957565b9060c060031983011261024957600435916001600160a01b036024358181168103610249579260443582811681036102495792606435926084359081168103610249579160a4356001600160401b039283821161024957806023830112156102495781600401359384116102495760248483010111610249576024019190565b919082519283825260005b848110610ae3575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610ac2565b15610afe57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160401b038111610b5557604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b03821117610b5557604052565b90601f801991011681019081106001600160401b03821117610b5557604052565b5190811515820361024957565b6001600160401b038111610b5557601f01601f191660200190565b9190604083820312610249578235926020810135906001600160401b038211610249570181601f8201121561024957803590610c0a82610bb4565b92610c186040519485610b86565b8284526020838301011161024957816000926020809301838601378301015290565b51906001600160a01b038216820361024957565b604051633c2f4f4360e11b815291906020906001600160a01b039082908590600490829085165afa938415610cef57600094610d0d575b508316908115610cfb57806004926040519384809263f4b9fa7560e01b82525afa908115610cef57600091610cbb575b50905090565b82813d8311610ce8575b610ccf8183610b86565b810103126102ae5750610ce190610c3a565b8038610cb5565b503d610cc5565b6040513d6000823e3d90fd5b6040516358700a0160e11b8152600490fd5b90938282813d8311610d3d575b610d248183610b86565b810103126102ae5750610d3690610c3a565b9238610c85565b503d610d1a565b80910361014081126102495760408051926001600160401b03926060850184811186821017610b55578084526080821261024957610d8181610b6b565b610d8a83610c3a565b815260208301516080870152610da1848401610c3a565b60a0870152606083015160c087015285526080607f198201126102495782908151610dcb81610b6b565b6080840151815260a0840151602082015260c08401518382015260e08401516060820152602087015260ff1901126102495781519283830190811184821017610b5557610e2d91610120918452610e256101008201610ba7565b855201610ba7565b602083015282015290565b60206040610120926060815160018060a01b03808251168852858201518689015284820151168488015201516060860152606083820151805160808801528481015160a08801528381015160c0880152015160e086015201518051151561010085015201511515910152565b9190826040910312610249576020825192015190565b6003546040805163678a252760e11b81526001600160a01b0384811660048301529485166024820152604481018690526000606482015261014098979196919591949093909290919083168985608481845afa9485156110085788999a600099989996610fda575b5050918391600093610f5d958316610fc9575b5050506003541692610f7e86519788968795869463efa84c6d60e01b86526004860190610e38565b610144840152306101648401526101a06101848401526101a4830190610ab7565b03925af1918215610fbf57600092610f9557505090565b610fb49250803d10610fb8575b610fac8183610b86565b810190610ea4565b5090565b503d610fa2565b513d6000823e3d90fd5b610fd2926111d8565b388080610f35565b600094929650610f5d95939181610ffc92903d10610288576102788183610b86565b95919381939550610f22565b88513d6000823e3d90fd5b6003546001600160a01b039081169081156110b3576020906002541691604460405180948193633a304d8b60e21b83526000600484015260248301525afa908115610cef5760009161107a575b501561106857565b60405163086a95e160e21b8152600490fd5b906020823d82116110ab575b8161109360209383610b86565b810103126102ae57506110a590610ba7565b38611060565b3d9150611086565b604051631da137b560e01b8152600490fd5b600060a4926040959660018060a01b03809861110583837f00000000000000000000000000000000000000000000000000000000000000001680966111d8565b8851998a988997634d4d7cbd60e11b8952600489015216602487015216604485015260648401528160848401525af18015610cef576111415750565b6111589060403d8111610fb857610fac8183610b86565b5050565b3d15611187573d9061116d82610bb4565b9161117b6040519384610b86565b82523d6000602084013e565b606090565b1561119357565b60405162461bcd60e51b815260206004820152601b60248201527f53616665417070726f76653a20617070726f7665206661696c656400000000006044820152606490fd5b9190823b156113335760405163095ea7b360e01b60208083018281526001600160a01b038516602485015260006044808601829052855291969195939192918691829161122481610b6b565b519082865af161123261115c565b90806112f8575b611243915061118c565b82611251575b505050505050565b6040518681019182526001600160a01b0394909416602485015260448085019390935291835283928392908390611289606482610b86565b51925af19061129661115c565b826112b3575b50506112a8915061118c565b388080808080611249565b80919250519182159283156112d2575b5050506112a89150388061129c565b82935091849192810103126102ae57506112a8916112f09101610ba7565b3880806112c3565b508051878115918215611312575b50506112439150611239565b83809293500103126104745761132c876112439201610ba7565b8738611306565b60405162461bcd60e51b815260206004820152601860248201527714d85999505c1c1c9bdd994e881b9bc818dbdb9d1c9858dd60421b6044820152606490fdfea2646970667358221220bd84e2e1f87143c9f4480d77276bf060283049969ac46001dab6171bc34725f664736f6c63430008130033";

type AssetTotsDaiLeverageExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AssetTotsDaiLeverageExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AssetTotsDaiLeverageExecutor__factory extends ContractFactory {
  constructor(...args: AssetTotsDaiLeverageExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AssetTotsDaiLeverageExecutor";
  }

  override deploy(
    _yb: PromiseOrValue<string>,
    _swapper: PromiseOrValue<string>,
    _cluster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AssetTotsDaiLeverageExecutor> {
    return super.deploy(
      _yb,
      _swapper,
      _cluster,
      overrides || {}
    ) as Promise<AssetTotsDaiLeverageExecutor>;
  }
  override getDeployTransaction(
    _yb: PromiseOrValue<string>,
    _swapper: PromiseOrValue<string>,
    _cluster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_yb, _swapper, _cluster, overrides || {});
  }
  override attach(address: string): AssetTotsDaiLeverageExecutor {
    return super.attach(address) as AssetTotsDaiLeverageExecutor;
  }
  override connect(signer: Signer): AssetTotsDaiLeverageExecutor__factory {
    return super.connect(signer) as AssetTotsDaiLeverageExecutor__factory;
  }
  static readonly contractName: "AssetTotsDaiLeverageExecutor";

  public readonly contractName: "AssetTotsDaiLeverageExecutor";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssetTotsDaiLeverageExecutorInterface {
    return new utils.Interface(_abi) as AssetTotsDaiLeverageExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetTotsDaiLeverageExecutor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AssetTotsDaiLeverageExecutor;
  }
}
