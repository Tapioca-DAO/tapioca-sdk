/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BBLeverageInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "accrue()": FunctionFragment;
    "accrueInfo()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "allowanceBorrow(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveBorrow(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "assetId()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrowOpeningFee()": FunctionFragment;
    "buyCollateral(address,uint256,uint256,uint256,address,bytes)": FunctionFragment;
    "callerFee()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "collateral()": FunctionFragment;
    "collateralId()": FunctionFragment;
    "collateralizationRate()": FunctionFragment;
    "computeClosingFactor(uint256,uint256,uint256)": FunctionFragment;
    "computeLiquidatorReward(address,uint256)": FunctionFragment;
    "computeTVLInfo(address,uint256)": FunctionFragment;
    "conservator()": FunctionFragment;
    "debtRateAgainstEthMarket()": FunctionFragment;
    "debtStartPoint()": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "getDebtRate()": FunctionFragment;
    "getTotalDebt()": FunctionFragment;
    "isMainMarket()": FunctionFragment;
    "liquidationBonusAmount()": FunctionFragment;
    "liquidationMultiplier()": FunctionFragment;
    "maxDebtRate()": FunctionFragment;
    "maxLiquidatorReward()": FunctionFragment;
    "minDebtRate()": FunctionFragment;
    "minLiquidatorReward()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "openingFees(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "oracleData()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "penrose()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "sellCollateral(address,uint256,uint256,address,bytes)": FunctionFragment;
    "setBorrowCap(uint256)": FunctionFragment;
    "setBorrowOpeningFee(uint256)": FunctionFragment;
    "setMarketConfig(uint256,address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "totalBorrow()": FunctionFragment;
    "totalBorrowCap()": FunctionFragment;
    "totalCollateralShare()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address,bool,bool)": FunctionFragment;
    "updateExchangeRate()": FunctionFragment;
    "updatePause(bool)": FunctionFragment;
    "userBorrowPart(address)": FunctionFragment;
    "userCollateralShare(address)": FunctionFragment;
    "yieldBox()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_SEPARATOR()"
      | "accrue"
      | "accrue()"
      | "accrueInfo"
      | "accrueInfo()"
      | "allowance"
      | "allowance(address,address)"
      | "allowanceBorrow"
      | "allowanceBorrow(address,address)"
      | "approve"
      | "approve(address,uint256)"
      | "approveBorrow"
      | "approveBorrow(address,uint256)"
      | "asset"
      | "asset()"
      | "assetId"
      | "assetId()"
      | "balanceOf"
      | "balanceOf(address)"
      | "borrowOpeningFee"
      | "borrowOpeningFee()"
      | "buyCollateral"
      | "buyCollateral(address,uint256,uint256,uint256,address,bytes)"
      | "callerFee"
      | "callerFee()"
      | "claimOwnership"
      | "claimOwnership()"
      | "collateral"
      | "collateral()"
      | "collateralId"
      | "collateralId()"
      | "collateralizationRate"
      | "collateralizationRate()"
      | "computeClosingFactor"
      | "computeClosingFactor(uint256,uint256,uint256)"
      | "computeLiquidatorReward"
      | "computeLiquidatorReward(address,uint256)"
      | "computeTVLInfo"
      | "computeTVLInfo(address,uint256)"
      | "conservator"
      | "conservator()"
      | "debtRateAgainstEthMarket"
      | "debtRateAgainstEthMarket()"
      | "debtStartPoint"
      | "debtStartPoint()"
      | "exchangeRate"
      | "exchangeRate()"
      | "getDebtRate"
      | "getDebtRate()"
      | "getTotalDebt"
      | "getTotalDebt()"
      | "isMainMarket"
      | "isMainMarket()"
      | "liquidationBonusAmount"
      | "liquidationBonusAmount()"
      | "liquidationMultiplier"
      | "liquidationMultiplier()"
      | "maxDebtRate"
      | "maxDebtRate()"
      | "maxLiquidatorReward"
      | "maxLiquidatorReward()"
      | "minDebtRate"
      | "minDebtRate()"
      | "minLiquidatorReward"
      | "minLiquidatorReward()"
      | "nonces"
      | "nonces(address)"
      | "openingFees"
      | "openingFees(address)"
      | "oracle"
      | "oracle()"
      | "oracleData"
      | "oracleData()"
      | "owner"
      | "owner()"
      | "paused"
      | "paused()"
      | "pendingOwner"
      | "pendingOwner()"
      | "penrose"
      | "penrose()"
      | "permit"
      | "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
      | "permitBorrow"
      | "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"
      | "protocolFee"
      | "protocolFee()"
      | "sellCollateral"
      | "sellCollateral(address,uint256,uint256,address,bytes)"
      | "setBorrowCap"
      | "setBorrowCap(uint256)"
      | "setBorrowOpeningFee"
      | "setBorrowOpeningFee(uint256)"
      | "setMarketConfig"
      | "setMarketConfig(uint256,address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
      | "totalBorrow"
      | "totalBorrow()"
      | "totalBorrowCap"
      | "totalBorrowCap()"
      | "totalCollateralShare"
      | "totalCollateralShare()"
      | "totalSupply"
      | "totalSupply()"
      | "transfer"
      | "transfer(address,uint256)"
      | "transferFrom"
      | "transferFrom(address,address,uint256)"
      | "transferOwnership"
      | "transferOwnership(address,bool,bool)"
      | "updateExchangeRate"
      | "updateExchangeRate()"
      | "updatePause"
      | "updatePause(bool)"
      | "userBorrowPart"
      | "userBorrowPart(address)"
      | "userCollateralShare"
      | "userCollateralShare(address)"
      | "yieldBox"
      | "yieldBox()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accrue", values?: undefined): string;
  encodeFunctionData(functionFragment: "accrue()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accrueInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInfo()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceBorrow",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceBorrow(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveBorrow",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveBorrow(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(functionFragment: "asset()", values?: undefined): string;
  encodeFunctionData(functionFragment: "assetId", values?: undefined): string;
  encodeFunctionData(functionFragment: "assetId()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowOpeningFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowOpeningFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCollateral(address,uint256,uint256,uint256,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "callerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callerFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateral()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizationRate()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeClosingFactor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeClosingFactor(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeLiquidatorReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeLiquidatorReward(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTVLInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTVLInfo(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "conservator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "conservator()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtRateAgainstEthMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtRateAgainstEthMarket()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtStartPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtStartPoint()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRate()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtRate()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebt()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMainMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMainMarket()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationBonusAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationBonusAmount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationMultiplier()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDebtRate()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidatorReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidatorReward()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDebtRate()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLiquidatorReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLiquidatorReward()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openingFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openingFees(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleData()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "penrose", values?: undefined): string;
  encodeFunctionData(functionFragment: "penrose()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitBorrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellCollateral(address,uint256,uint256,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowCap(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowOpeningFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowOpeningFee(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketConfig(uint256,address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrow()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowCap()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralShare()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePause(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "userBorrowPart",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userBorrowPart(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollateralShare",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollateralShare(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yieldBox()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accrue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accrue()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accrueInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accrueInfo()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowanceBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowanceBorrow(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveBorrow(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetId()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowOpeningFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCollateral(address,uint256,uint256,uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callerFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateral()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizationRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeClosingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeClosingFactor(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeLiquidatorReward(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTVLInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTVLInfo(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conservator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conservator()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtRateAgainstEthMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtRateAgainstEthMarket()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtStartPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtStartPoint()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebt()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMainMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMainMarket()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationBonusAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationBonusAmount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationMultiplier()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidatorReward()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDebtRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiquidatorReward()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openingFees(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracleData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleData()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "penrose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "penrose()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCollateral(address,uint256,uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowCap(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowOpeningFee(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketConfig(uint256,address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrow()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowCap()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralShare()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePause(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBorrowPart(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollateralShare(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldBox()", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalBorrow(address,address,uint256)": EventFragment;
    "ConservatorUpdated(address,address)": EventFragment;
    "DebtRateAgainstEthUpdated(uint256,uint256)": EventFragment;
    "Liquidated(address,address[],uint256,uint256,uint256,uint256)": EventFragment;
    "LiquidationMultiplierUpdated(uint256,uint256)": EventFragment;
    "LogAccrue(uint256,uint64)": EventFragment;
    "LogAddCollateral(address,address,uint256)": EventFragment;
    "LogBorrow(address,address,uint256,uint256,uint256)": EventFragment;
    "LogBorrowCapUpdated(uint256,uint256)": EventFragment;
    "LogBorrowingFee(uint256,uint256)": EventFragment;
    "LogExchangeRate(uint256)": EventFragment;
    "LogRemoveCollateral(address,address,uint256)": EventFragment;
    "LogRepay(address,address,uint256,uint256)": EventFragment;
    "MaxDebtRateUpdated(uint256,uint256)": EventFragment;
    "MinDebtRateUpdated(uint256,uint256)": EventFragment;
    "OracleDataUpdated()": EventFragment;
    "OracleUpdated()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PausedUpdated(bool,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalBorrow"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalBorrow(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConservatorUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ConservatorUpdated(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebtRateAgainstEthUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DebtRateAgainstEthUpdated(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Liquidated(address,address[],uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationMultiplierUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationMultiplierUpdated(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAccrue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAccrue(uint256,uint64)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddCollateral"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAddCollateral(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrow"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogBorrow(address,address,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrowCapUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogBorrowCapUpdated(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrowingFee"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogBorrowingFee(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExchangeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExchangeRate(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveCollateral"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogRemoveCollateral(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRepay"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogRepay(address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxDebtRateUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxDebtRateUpdated(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinDebtRateUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinDebtRateUpdated(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleDataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleDataUpdated()"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleUpdated()"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedUpdated(bool,bool)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
  ): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalBorrowEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalBorrowEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalBorrowEventObject
>;

export type ApprovalBorrowEventFilter = TypedEventFilter<ApprovalBorrowEvent>;

export interface ConservatorUpdatedEventObject {
  old: string;
  _new: string;
}
export type ConservatorUpdatedEvent = TypedEvent<
  [string, string],
  ConservatorUpdatedEventObject
>;

export type ConservatorUpdatedEventFilter =
  TypedEventFilter<ConservatorUpdatedEvent>;

export interface DebtRateAgainstEthUpdatedEventObject {
  oldVal: BigNumber;
  newVal: BigNumber;
}
export type DebtRateAgainstEthUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DebtRateAgainstEthUpdatedEventObject
>;

export type DebtRateAgainstEthUpdatedEventFilter =
  TypedEventFilter<DebtRateAgainstEthUpdatedEvent>;

export interface LiquidatedEventObject {
  liquidator: string;
  users: string[];
  liquidatorReward: BigNumber;
  protocolReward: BigNumber;
  repayedAmount: BigNumber;
  collateralShareRemoved: BigNumber;
}
export type LiquidatedEvent = TypedEvent<
  [string, string[], BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidatedEventObject
>;

export type LiquidatedEventFilter = TypedEventFilter<LiquidatedEvent>;

export interface LiquidationMultiplierUpdatedEventObject {
  oldVal: BigNumber;
  newVal: BigNumber;
}
export type LiquidationMultiplierUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LiquidationMultiplierUpdatedEventObject
>;

export type LiquidationMultiplierUpdatedEventFilter =
  TypedEventFilter<LiquidationMultiplierUpdatedEvent>;

export interface LogAccrueEventObject {
  accruedAmount: BigNumber;
  rate: BigNumber;
}
export type LogAccrueEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogAccrueEventObject
>;

export type LogAccrueEventFilter = TypedEventFilter<LogAccrueEvent>;

export interface LogAddCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogAddCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  LogAddCollateralEventObject
>;

export type LogAddCollateralEventFilter =
  TypedEventFilter<LogAddCollateralEvent>;

export interface LogBorrowEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  feeAmount: BigNumber;
  part: BigNumber;
}
export type LogBorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  LogBorrowEventObject
>;

export type LogBorrowEventFilter = TypedEventFilter<LogBorrowEvent>;

export interface LogBorrowCapUpdatedEventObject {
  _oldVal: BigNumber;
  _newVal: BigNumber;
}
export type LogBorrowCapUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogBorrowCapUpdatedEventObject
>;

export type LogBorrowCapUpdatedEventFilter =
  TypedEventFilter<LogBorrowCapUpdatedEvent>;

export interface LogBorrowingFeeEventObject {
  _oldVal: BigNumber;
  _newVal: BigNumber;
}
export type LogBorrowingFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogBorrowingFeeEventObject
>;

export type LogBorrowingFeeEventFilter = TypedEventFilter<LogBorrowingFeeEvent>;

export interface LogExchangeRateEventObject {
  rate: BigNumber;
}
export type LogExchangeRateEvent = TypedEvent<
  [BigNumber],
  LogExchangeRateEventObject
>;

export type LogExchangeRateEventFilter = TypedEventFilter<LogExchangeRateEvent>;

export interface LogRemoveCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogRemoveCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  LogRemoveCollateralEventObject
>;

export type LogRemoveCollateralEventFilter =
  TypedEventFilter<LogRemoveCollateralEvent>;

export interface LogRepayEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  part: BigNumber;
}
export type LogRepayEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogRepayEventObject
>;

export type LogRepayEventFilter = TypedEventFilter<LogRepayEvent>;

export interface MaxDebtRateUpdatedEventObject {
  oldVal: BigNumber;
  newVal: BigNumber;
}
export type MaxDebtRateUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxDebtRateUpdatedEventObject
>;

export type MaxDebtRateUpdatedEventFilter =
  TypedEventFilter<MaxDebtRateUpdatedEvent>;

export interface MinDebtRateUpdatedEventObject {
  oldVal: BigNumber;
  newVal: BigNumber;
}
export type MinDebtRateUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinDebtRateUpdatedEventObject
>;

export type MinDebtRateUpdatedEventFilter =
  TypedEventFilter<MinDebtRateUpdatedEvent>;

export interface OracleDataUpdatedEventObject {}
export type OracleDataUpdatedEvent = TypedEvent<
  [],
  OracleDataUpdatedEventObject
>;

export type OracleDataUpdatedEventFilter =
  TypedEventFilter<OracleDataUpdatedEvent>;

export interface OracleUpdatedEventObject {}
export type OracleUpdatedEvent = TypedEvent<[], OracleUpdatedEventObject>;

export type OracleUpdatedEventFilter = TypedEventFilter<OracleUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedUpdatedEventObject {
  oldState: boolean;
  newState: boolean;
}
export type PausedUpdatedEvent = TypedEvent<
  [boolean, boolean],
  PausedUpdatedEventObject
>;

export type PausedUpdatedEventFilter = TypedEventFilter<PausedUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface BBLeverage extends BaseContract {
  contractName: "BBLeverage";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BBLeverageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "accrue()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accrueInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debtRate: BigNumber; lastAccrued: BigNumber }
    >;

    "accrueInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debtRate: BigNumber; lastAccrued: BigNumber }
    >;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowanceBorrow(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowanceBorrow(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveBorrow(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "approveBorrow(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    "asset()"(overrides?: CallOverrides): Promise<[string]>;

    assetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "assetId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowOpeningFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "borrowOpeningFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "buyCollateral(address,uint256,uint256,uint256,address,bytes)"(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "callerFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    "collateral()"(overrides?: CallOverrides): Promise<[string]>;

    collateralId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "collateralId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralizationRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "collateralizationRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    computeClosingFactor(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "computeClosingFactor(uint256,uint256,uint256)"(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "computeLiquidatorReward(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    "computeTVLInfo(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    conservator(overrides?: CallOverrides): Promise<[string]>;

    "conservator()"(overrides?: CallOverrides): Promise<[string]>;

    debtRateAgainstEthMarket(overrides?: CallOverrides): Promise<[BigNumber]>;

    "debtRateAgainstEthMarket()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debtStartPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "debtStartPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "exchangeRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDebtRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDebtRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalDebt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isMainMarket(overrides?: CallOverrides): Promise<[boolean]>;

    "isMainMarket()"(overrides?: CallOverrides): Promise<[boolean]>;

    liquidationBonusAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidationBonusAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidationMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDebtRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxDebtRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLiquidatorReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxLiquidatorReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDebtRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minDebtRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minLiquidatorReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minLiquidatorReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    openingFees(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    "openingFees(address)"(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    oracleData(overrides?: CallOverrides): Promise<[string]>;

    "oracleData()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    penrose(overrides?: CallOverrides): Promise<[string]>;

    "penrose()"(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    permitBorrow(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "protocolFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "sellCollateral(address,uint256,uint256,address,bytes)"(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBorrowCap(uint256)"(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBorrowOpeningFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBorrowOpeningFee(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketConfig(
      _borrowOpeningFee: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _callerFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMarketConfig(uint256,address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _borrowOpeningFee: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _callerFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;

    "totalBorrow()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;

    totalBorrowCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalBorrowCap()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCollateralShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalCollateralShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateExchangeRate()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePause(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userBorrowPart(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userCollateralShare(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;

    "yieldBox()"(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  accrue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "accrue()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accrueInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { debtRate: BigNumber; lastAccrued: BigNumber }
  >;

  "accrueInfo()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { debtRate: BigNumber; lastAccrued: BigNumber }
  >;

  allowance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowanceBorrow(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowanceBorrow(address,address)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveBorrow(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "approveBorrow(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  "asset()"(overrides?: CallOverrides): Promise<string>;

  assetId(overrides?: CallOverrides): Promise<BigNumber>;

  "assetId()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

  "borrowOpeningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  buyCollateral(
    from: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    supplyAmount: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    swapper: PromiseOrValue<string>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "buyCollateral(address,uint256,uint256,uint256,address,bytes)"(
    from: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    supplyAmount: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    swapper: PromiseOrValue<string>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callerFee(overrides?: CallOverrides): Promise<BigNumber>;

  "callerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collateral(overrides?: CallOverrides): Promise<string>;

  "collateral()"(overrides?: CallOverrides): Promise<string>;

  collateralId(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralId()"(overrides?: CallOverrides): Promise<BigNumber>;

  collateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  computeClosingFactor(
    borrowPart: PromiseOrValue<BigNumberish>,
    collateralPartInAsset: PromiseOrValue<BigNumberish>,
    ratesPrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "computeClosingFactor(uint256,uint256,uint256)"(
    borrowPart: PromiseOrValue<BigNumberish>,
    collateralPartInAsset: PromiseOrValue<BigNumberish>,
    ratesPrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeLiquidatorReward(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "computeLiquidatorReward(address,uint256)"(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeTVLInfo(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountToSolvency: BigNumber;
      minTVL: BigNumber;
      maxTVL: BigNumber;
    }
  >;

  "computeTVLInfo(address,uint256)"(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountToSolvency: BigNumber;
      minTVL: BigNumber;
      maxTVL: BigNumber;
    }
  >;

  conservator(overrides?: CallOverrides): Promise<string>;

  "conservator()"(overrides?: CallOverrides): Promise<string>;

  debtRateAgainstEthMarket(overrides?: CallOverrides): Promise<BigNumber>;

  "debtRateAgainstEthMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

  debtStartPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "debtStartPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  "exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

  "getDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

  isMainMarket(overrides?: CallOverrides): Promise<boolean>;

  "isMainMarket()"(overrides?: CallOverrides): Promise<boolean>;

  liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidationBonusAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidationMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

  "maxDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

  "maxLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  minDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

  "minDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

  "minLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  nonces(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonces(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openingFees(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "openingFees(address)"(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  oracleData(overrides?: CallOverrides): Promise<string>;

  "oracleData()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  penrose(overrides?: CallOverrides): Promise<string>;

  "penrose()"(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  permitBorrow(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  "protocolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  sellCollateral(
    from: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    swapper: PromiseOrValue<string>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "sellCollateral(address,uint256,uint256,address,bytes)"(
    from: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    swapper: PromiseOrValue<string>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBorrowCap(
    _cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBorrowCap(uint256)"(
    _cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBorrowOpeningFee(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBorrowOpeningFee(uint256)"(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketConfig(
    _borrowOpeningFee: PromiseOrValue<BigNumberish>,
    _oracle: PromiseOrValue<string>,
    _oracleData: PromiseOrValue<BytesLike>,
    _conservator: PromiseOrValue<string>,
    _callerFee: PromiseOrValue<BigNumberish>,
    _protocolFee: PromiseOrValue<BigNumberish>,
    _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
    _minLiquidatorReward: PromiseOrValue<BigNumberish>,
    _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
    _totalBorrowCap: PromiseOrValue<BigNumberish>,
    _collateralizationRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMarketConfig(uint256,address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
    _borrowOpeningFee: PromiseOrValue<BigNumberish>,
    _oracle: PromiseOrValue<string>,
    _oracleData: PromiseOrValue<BytesLike>,
    _conservator: PromiseOrValue<string>,
    _callerFee: PromiseOrValue<BigNumberish>,
    _protocolFee: PromiseOrValue<BigNumberish>,
    _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
    _minLiquidatorReward: PromiseOrValue<BigNumberish>,
    _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
    _totalBorrowCap: PromiseOrValue<BigNumberish>,
    _collateralizationRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalBorrow(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }>;

  "totalBorrow()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }>;

  totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

  "totalBorrowCap()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

  "totalCollateralShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    direct: PromiseOrValue<boolean>,
    renounce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address,bool,bool)"(
    newOwner: PromiseOrValue<string>,
    direct: PromiseOrValue<boolean>,
    renounce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExchangeRate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateExchangeRate()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePause(
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePause(bool)"(
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userBorrowPart(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userBorrowPart(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userCollateralShare(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userCollateralShare(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  "yieldBox()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    accrue(overrides?: CallOverrides): Promise<void>;

    "accrue()"(overrides?: CallOverrides): Promise<void>;

    accrueInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debtRate: BigNumber; lastAccrued: BigNumber }
    >;

    "accrueInfo()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debtRate: BigNumber; lastAccrued: BigNumber }
    >;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowanceBorrow(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowanceBorrow(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveBorrow(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approveBorrow(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    "asset()"(overrides?: CallOverrides): Promise<string>;

    assetId(overrides?: CallOverrides): Promise<BigNumber>;

    "assetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowOpeningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyCollateral(address,uint256,uint256,uint256,address,bytes)"(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callerFee(overrides?: CallOverrides): Promise<BigNumber>;

    "callerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    collateral(overrides?: CallOverrides): Promise<string>;

    "collateral()"(overrides?: CallOverrides): Promise<string>;

    collateralId(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralId()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    computeClosingFactor(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeClosingFactor(uint256,uint256,uint256)"(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeLiquidatorReward(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    "computeTVLInfo(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    conservator(overrides?: CallOverrides): Promise<string>;

    "conservator()"(overrides?: CallOverrides): Promise<string>;

    debtRateAgainstEthMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "debtRateAgainstEthMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtStartPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "debtStartPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    isMainMarket(overrides?: CallOverrides): Promise<boolean>;

    "isMainMarket()"(overrides?: CallOverrides): Promise<boolean>;

    liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationBonusAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    minDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    "minDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    "minLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openingFees(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openingFees(address)"(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    oracleData(overrides?: CallOverrides): Promise<string>;

    "oracleData()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    penrose(overrides?: CallOverrides): Promise<string>;

    "penrose()"(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    permitBorrow(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellCollateral(address,uint256,uint256,address,bytes)"(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBorrowCap(uint256)"(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowOpeningFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBorrowOpeningFee(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketConfig(
      _borrowOpeningFee: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _callerFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketConfig(uint256,address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _borrowOpeningFee: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _callerFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;

    "totalBorrow()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;

    totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBorrowCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCollateralShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExchangeRate(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { updated: boolean; rate: BigNumber }>;

    "updateExchangeRate()"(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { updated: boolean; rate: BigNumber }>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePause(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBorrowPart(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userCollateralShare(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<string>;

    "yieldBox()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "ApprovalBorrow(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalBorrowEventFilter;
    ApprovalBorrow(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalBorrowEventFilter;

    "ConservatorUpdated(address,address)"(
      old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): ConservatorUpdatedEventFilter;
    ConservatorUpdated(
      old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): ConservatorUpdatedEventFilter;

    "DebtRateAgainstEthUpdated(uint256,uint256)"(
      oldVal?: null,
      newVal?: null
    ): DebtRateAgainstEthUpdatedEventFilter;
    DebtRateAgainstEthUpdated(
      oldVal?: null,
      newVal?: null
    ): DebtRateAgainstEthUpdatedEventFilter;

    "Liquidated(address,address[],uint256,uint256,uint256,uint256)"(
      liquidator?: PromiseOrValue<string> | null,
      users?: null,
      liquidatorReward?: null,
      protocolReward?: null,
      repayedAmount?: null,
      collateralShareRemoved?: null
    ): LiquidatedEventFilter;
    Liquidated(
      liquidator?: PromiseOrValue<string> | null,
      users?: null,
      liquidatorReward?: null,
      protocolReward?: null,
      repayedAmount?: null,
      collateralShareRemoved?: null
    ): LiquidatedEventFilter;

    "LiquidationMultiplierUpdated(uint256,uint256)"(
      oldVal?: null,
      newVal?: null
    ): LiquidationMultiplierUpdatedEventFilter;
    LiquidationMultiplierUpdated(
      oldVal?: null,
      newVal?: null
    ): LiquidationMultiplierUpdatedEventFilter;

    "LogAccrue(uint256,uint64)"(
      accruedAmount?: null,
      rate?: null
    ): LogAccrueEventFilter;
    LogAccrue(accruedAmount?: null, rate?: null): LogAccrueEventFilter;

    "LogAddCollateral(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogAddCollateralEventFilter;
    LogAddCollateral(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogAddCollateralEventFilter;

    "LogBorrow(address,address,uint256,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
      part?: null
    ): LogBorrowEventFilter;
    LogBorrow(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
      part?: null
    ): LogBorrowEventFilter;

    "LogBorrowCapUpdated(uint256,uint256)"(
      _oldVal?: null,
      _newVal?: null
    ): LogBorrowCapUpdatedEventFilter;
    LogBorrowCapUpdated(
      _oldVal?: null,
      _newVal?: null
    ): LogBorrowCapUpdatedEventFilter;

    "LogBorrowingFee(uint256,uint256)"(
      _oldVal?: null,
      _newVal?: null
    ): LogBorrowingFeeEventFilter;
    LogBorrowingFee(_oldVal?: null, _newVal?: null): LogBorrowingFeeEventFilter;

    "LogExchangeRate(uint256)"(rate?: null): LogExchangeRateEventFilter;
    LogExchangeRate(rate?: null): LogExchangeRateEventFilter;

    "LogRemoveCollateral(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogRemoveCollateralEventFilter;
    LogRemoveCollateral(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogRemoveCollateralEventFilter;

    "LogRepay(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      part?: null
    ): LogRepayEventFilter;
    LogRepay(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      part?: null
    ): LogRepayEventFilter;

    "MaxDebtRateUpdated(uint256,uint256)"(
      oldVal?: null,
      newVal?: null
    ): MaxDebtRateUpdatedEventFilter;
    MaxDebtRateUpdated(
      oldVal?: null,
      newVal?: null
    ): MaxDebtRateUpdatedEventFilter;

    "MinDebtRateUpdated(uint256,uint256)"(
      oldVal?: null,
      newVal?: null
    ): MinDebtRateUpdatedEventFilter;
    MinDebtRateUpdated(
      oldVal?: null,
      newVal?: null
    ): MinDebtRateUpdatedEventFilter;

    "OracleDataUpdated()"(): OracleDataUpdatedEventFilter;
    OracleDataUpdated(): OracleDataUpdatedEventFilter;

    "OracleUpdated()"(): OracleUpdatedEventFilter;
    OracleUpdated(): OracleUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PausedUpdated(bool,bool)"(
      oldState?: null,
      newState?: null
    ): PausedUpdatedEventFilter;
    PausedUpdated(oldState?: null, newState?: null): PausedUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "accrue()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accrueInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "accrueInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowanceBorrow(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowanceBorrow(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveBorrow(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "approveBorrow(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    "asset()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetId(overrides?: CallOverrides): Promise<BigNumber>;

    "assetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

    "borrowOpeningFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "buyCollateral(address,uint256,uint256,uint256,address,bytes)"(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callerFee(overrides?: CallOverrides): Promise<BigNumber>;

    "callerFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    "collateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralId(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralId()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    computeClosingFactor(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeClosingFactor(uint256,uint256,uint256)"(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeLiquidatorReward(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeTVLInfo(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conservator(overrides?: CallOverrides): Promise<BigNumber>;

    "conservator()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtRateAgainstEthMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "debtRateAgainstEthMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtStartPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "debtStartPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    isMainMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "isMainMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationBonusAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    "maxDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    minDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    "minDebtRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    "minLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openingFees(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openingFees(address)"(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleData(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleData()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    penrose(overrides?: CallOverrides): Promise<BigNumber>;

    "penrose()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    permitBorrow(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "sellCollateral(address,uint256,uint256,address,bytes)"(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBorrowCap(uint256)"(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBorrowOpeningFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBorrowOpeningFee(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketConfig(
      _borrowOpeningFee: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _callerFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMarketConfig(uint256,address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _borrowOpeningFee: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _callerFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBorrow()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBorrowCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCollateralShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateExchangeRate()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePause(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBorrowPart(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userCollateralShare(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;

    "yieldBox()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "accrue()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accrueInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accrueInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowanceBorrow(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowanceBorrow(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveBorrow(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "approveBorrow(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "asset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowOpeningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "borrowOpeningFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "buyCollateral(address,uint256,uint256,uint256,address,bytes)"(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "callerFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateral()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralizationRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeClosingFactor(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeClosingFactor(uint256,uint256,uint256)"(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeLiquidatorReward(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeTVLInfo(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conservator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "conservator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtRateAgainstEthMarket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtRateAgainstEthMarket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtStartPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debtStartPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exchangeRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebtRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDebtRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalDebt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMainMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isMainMarket()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationBonusAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationBonusAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDebtRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxDebtRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLiquidatorReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxLiquidatorReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDebtRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minDebtRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minLiquidatorReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minLiquidatorReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openingFees(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "openingFees(address)"(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracleData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penrose(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "penrose()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    permitBorrow(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "sellCollateral(address,uint256,uint256,address,bytes)"(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBorrowCap(uint256)"(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowOpeningFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBorrowOpeningFee(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketConfig(
      _borrowOpeningFee: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _callerFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMarketConfig(uint256,address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _borrowOpeningFee: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _callerFee: PromiseOrValue<BigNumberish>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBorrow()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrowCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalBorrowCap()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCollateralShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalCollateralShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateExchangeRate()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePause(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBorrowPart(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userCollateralShare(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yieldBox()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
