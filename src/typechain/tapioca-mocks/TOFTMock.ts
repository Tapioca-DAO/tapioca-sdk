/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TOFTMockInterface extends utils.Interface {
  functions: {
    "erc20()": FunctionFragment;
    "erc20_()": FunctionFragment;
    "tAsset()": FunctionFragment;
    "unwrap(address,uint256)": FunctionFragment;
    "wrap(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "erc20"
      | "erc20()"
      | "erc20_"
      | "erc20_()"
      | "tAsset"
      | "tAsset()"
      | "unwrap"
      | "unwrap(address,uint256)"
      | "wrap"
      | "wrap(address,address,uint256)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
  encodeFunctionData(functionFragment: "erc20()", values?: undefined): string;
  encodeFunctionData(functionFragment: "erc20_", values?: undefined): string;
  encodeFunctionData(functionFragment: "erc20_()", values?: undefined): string;
  encodeFunctionData(functionFragment: "tAsset", values?: undefined): string;
  encodeFunctionData(functionFragment: "tAsset()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unwrap",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrap(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "wrap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wrap(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc20()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc20_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc20_()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tAsset()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unwrap(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrap(address,address,uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TOFTMock extends BaseContract {
  contractName: "TOFTMock";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TOFTMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    erc20(overrides?: CallOverrides): Promise<[string]>;

    "erc20()"(overrides?: CallOverrides): Promise<[string]>;

    erc20_(overrides?: CallOverrides): Promise<[string]>;

    "erc20_()"(overrides?: CallOverrides): Promise<[string]>;

    tAsset(overrides?: CallOverrides): Promise<[string]>;

    "tAsset()"(overrides?: CallOverrides): Promise<[string]>;

    unwrap(
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unwrap(address,uint256)"(
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrap(
      _fromAddress: PromiseOrValue<string>,
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "wrap(address,address,uint256)"(
      _fromAddress: PromiseOrValue<string>,
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  erc20(overrides?: CallOverrides): Promise<string>;

  "erc20()"(overrides?: CallOverrides): Promise<string>;

  erc20_(overrides?: CallOverrides): Promise<string>;

  "erc20_()"(overrides?: CallOverrides): Promise<string>;

  tAsset(overrides?: CallOverrides): Promise<string>;

  "tAsset()"(overrides?: CallOverrides): Promise<string>;

  unwrap(
    _toAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unwrap(address,uint256)"(
    _toAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrap(
    _fromAddress: PromiseOrValue<string>,
    _toAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "wrap(address,address,uint256)"(
    _fromAddress: PromiseOrValue<string>,
    _toAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    erc20(overrides?: CallOverrides): Promise<string>;

    "erc20()"(overrides?: CallOverrides): Promise<string>;

    erc20_(overrides?: CallOverrides): Promise<string>;

    "erc20_()"(overrides?: CallOverrides): Promise<string>;

    tAsset(overrides?: CallOverrides): Promise<string>;

    "tAsset()"(overrides?: CallOverrides): Promise<string>;

    unwrap(
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "unwrap(address,uint256)"(
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wrap(
      _fromAddress: PromiseOrValue<string>,
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "wrap(address,address,uint256)"(
      _fromAddress: PromiseOrValue<string>,
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    erc20(overrides?: CallOverrides): Promise<BigNumber>;

    "erc20()"(overrides?: CallOverrides): Promise<BigNumber>;

    erc20_(overrides?: CallOverrides): Promise<BigNumber>;

    "erc20_()"(overrides?: CallOverrides): Promise<BigNumber>;

    tAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "tAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    unwrap(
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unwrap(address,uint256)"(
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrap(
      _fromAddress: PromiseOrValue<string>,
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "wrap(address,address,uint256)"(
      _fromAddress: PromiseOrValue<string>,
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    erc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "erc20()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "erc20_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tAsset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unwrap(
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unwrap(address,uint256)"(
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrap(
      _fromAddress: PromiseOrValue<string>,
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "wrap(address,address,uint256)"(
      _fromAddress: PromiseOrValue<string>,
      _toAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
