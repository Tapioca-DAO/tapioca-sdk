/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  BalancerVaultMock,
  BalancerVaultMockInterface,
} from "../BalancerVaultMock";

const _abi = [
  {
    inputs: [],
    name: "getPoolId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "enum BalancerVaultMock.SwapKind",
            name: "kind",
            type: "uint8",
          },
          {
            internalType: "contract IAsset",
            name: "assetIn",
            type: "address",
          },
          {
            internalType: "contract IAsset",
            name: "assetOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
        ],
        internalType: "struct BalancerVaultMock.SingleSwap",
        name: "singleSwap",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bool",
            name: "toInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct BalancerVaultMock.FundManagement",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountCalculated",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576104a2908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816338fff2d01461038d57506352bbbe291461003957600080fd5b60031960e0368201126103675781359167ffffffffffffffff9182841161036f5760c09084360301126103895783519160c083018381108282111761037657855283820135835260248085013596600288101561037357602097888601526044926100a58488016103e2565b8887019081526064966100b9888a016103e2565b9060608101918252608081019960848101358b5260a48101359085821161035157013660238201121561036f579081898d930135906101036100fa83610408565b945194856103aa565b8184523689838301011161036b578e8260a094938b8b9401838801378501015201526080366023190112610367578951916080830183811085821117610355578b5273ffffffffffffffffffffffffffffffffffffffff928635848116810361035157815287358015158103610351578d82015289358481168103610351578c820152608435908115158203610351579060608593920152511689518b518d8101916323b872dd60e01b83523389830152308a8301528b8201528a815260a081018181108782111761033f578d5251869283929083905af16101e3610424565b8161030f575b50156102ce575116908751908951908b82019263a9059cbb60e01b84523387840152878301528682526080820190828210908211176102bc578493929184918c5251925af1610236610424565b8161028c575b501561024e5750505050519051908152f35b855162461bcd60e51b8152928301879052601c908301527f426f72696e6745524332303a205472616e73666572206661696c65640000000090820152fd5b805180159250899083156102a4575b5050503861023c565b6102b49350820181019101610454565b38888161029b565b634e487b7160e01b8552604188528585fd5b5050875162461bcd60e51b8152948501899052505082018690527f426f72696e6745524332303a205472616e7366657246726f6d206661696c656490820152fd5b8051801592508d908315610327575b505050386101e9565b6103379350820181019101610454565b388c8161031e565b634e487b7160e01b885260418b528888fd5b8680fd5b634e487b7160e01b8652604189528686fd5b8380fd5b8780fd5b8580fd5b80fd5b634e487b7160e01b875260418352602487fd5b8480fd5b8490346103a657816003193601126103a6576020918152f35b5080fd5b90601f8019910116810190811067ffffffffffffffff8211176103cc57604052565b634e487b7160e01b600052604160045260246000fd5b359073ffffffffffffffffffffffffffffffffffffffff8216820361040357565b600080fd5b67ffffffffffffffff81116103cc57601f01601f191660200190565b3d1561044f573d9061043582610408565b9161044360405193846103aa565b82523d6000602084013e565b606090565b9081602091031261040357518015158103610403579056fea264697066735822122070ac12b505cb2ca5cb56d67706e97a215a9038e709f4d2bd18e78bc66d14102164736f6c63430008120033";

type BalancerVaultMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalancerVaultMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalancerVaultMock__factory extends ContractFactory {
  constructor(...args: BalancerVaultMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BalancerVaultMock";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BalancerVaultMock> {
    return super.deploy(overrides || {}) as Promise<BalancerVaultMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BalancerVaultMock {
    return super.attach(address) as BalancerVaultMock;
  }
  override connect(signer: Signer): BalancerVaultMock__factory {
    return super.connect(signer) as BalancerVaultMock__factory;
  }
  static readonly contractName: "BalancerVaultMock";

  public readonly contractName: "BalancerVaultMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalancerVaultMockInterface {
    return new utils.Interface(_abi) as BalancerVaultMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BalancerVaultMock {
    return new Contract(address, _abi, signerOrProvider) as BalancerVaultMock;
  }
}
