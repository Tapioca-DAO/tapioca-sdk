/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ContractThatCannotBeDeployed,
  ContractThatCannotBeDeployedInterface,
} from "../ContractThatCannotBeDeployed";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "revertStr",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e0604052602160808181529061024260a03960009061001f90826100f2565b5034801561002c57600080fd5b50600060405162461bcd60e51b815260040161004891906101b1565b60405180910390fd5b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061007b57607f821691505b60208210810361009b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100ed576000816000526020600020601f850160051c810160208610156100ca5750805b601f850160051c820191505b818110156100e9578281556001016100d6565b5050505b505050565b81516001600160401b0381111561010b5761010b610051565b61011f816101198454610067565b846100a1565b602080601f831160018114610154576000841561013c5750858301515b600019600386901b1c1916600185901b1785556100e9565b600085815260208120601f198616915b8281101561018357888601518255948401946001909101908401610164565b50858210156101a15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352600084546101c581610067565b80602087015260406001808416600081146101e7576001811461020357610233565b60ff19851660408a0152604084151560051b8a01019550610233565b89600052602060002060005b8581101561022a5781548b820186015290830190880161020f565b8a016040019650505b50939897505050505050505056fe54686973206d6574686f642072657665727465642e20536f20617765736f6d6521";

type ContractThatCannotBeDeployedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractThatCannotBeDeployedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContractThatCannotBeDeployed__factory extends ContractFactory {
  constructor(...args: ContractThatCannotBeDeployedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ContractThatCannotBeDeployed";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractThatCannotBeDeployed> {
    return super.deploy(
      overrides || {}
    ) as Promise<ContractThatCannotBeDeployed>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ContractThatCannotBeDeployed {
    return super.attach(address) as ContractThatCannotBeDeployed;
  }
  override connect(signer: Signer): ContractThatCannotBeDeployed__factory {
    return super.connect(signer) as ContractThatCannotBeDeployed__factory;
  }
  static readonly contractName: "ContractThatCannotBeDeployed";

  public readonly contractName: "ContractThatCannotBeDeployed";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractThatCannotBeDeployedInterface {
    return new utils.Interface(_abi) as ContractThatCannotBeDeployedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContractThatCannotBeDeployed {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ContractThatCannotBeDeployed;
  }
}
