/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  GLPManagerMock,
  GLPManagerMockInterface,
} from "../GLPManagerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_glpPrice",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "glpPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_glpPrice",
        type: "uint256",
      },
    ],
    name: "setGlpPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102db3803806102db83398101604081905261002f916100e4565b6c0c9f2c9cd04674edea400000008110156100dc5760405162461bcd60e51b815260206004820152605360248201527f474c504d616e616765724d6f636b3a20696e76616c69642070726963652e204e60448201527f6565647320746f206265206174206c6561737420316532372e2050726563697360648201527f696f6e20697320333020646563696d616c732e00000000000000000000000000608482015260a40160405180910390fd5b6000556100fd565b6000602082840312156100f657600080fd5b5051919050565b6101cf8061010c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063c1f22c1314610046578063e245b5af14610061578063ef419f1e14610076575b600080fd5b61004f60005481565b60405190815260200160405180910390f35b61004f61006f366004610157565b5060005490565b610089610084366004610180565b61008b565b005b6c0c9f2c9cd04674edea40000000811015610152576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605360248201527f474c504d616e616765724d6f636b3a20696e76616c69642070726963652e204e60448201527f6565647320746f206265206174206c6561737420316532372e2050726563697360648201527f696f6e20697320333020646563696d616c732e00000000000000000000000000608482015260a40160405180910390fd5b600055565b60006020828403121561016957600080fd5b8135801515811461017957600080fd5b9392505050565b60006020828403121561019257600080fd5b503591905056fea2646970667358221220098c822934566b1b1c12c53155ef9465319b00a084c941376ac8c1034c5e14f364736f6c63430008160033";

type GLPManagerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GLPManagerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GLPManagerMock__factory extends ContractFactory {
  constructor(...args: GLPManagerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "GLPManagerMock";
  }

  override deploy(
    _glpPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GLPManagerMock> {
    return super.deploy(_glpPrice, overrides || {}) as Promise<GLPManagerMock>;
  }
  override getDeployTransaction(
    _glpPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_glpPrice, overrides || {});
  }
  override attach(address: string): GLPManagerMock {
    return super.attach(address) as GLPManagerMock;
  }
  override connect(signer: Signer): GLPManagerMock__factory {
    return super.connect(signer) as GLPManagerMock__factory;
  }
  static readonly contractName: "GLPManagerMock";

  public readonly contractName: "GLPManagerMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GLPManagerMockInterface {
    return new utils.Interface(_abi) as GLPManagerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GLPManagerMock {
    return new Contract(address, _abi, signerOrProvider) as GLPManagerMock;
  }
}
