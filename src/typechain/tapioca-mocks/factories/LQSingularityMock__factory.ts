/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  LQSingularityMock,
  LQSingularityMockInterface,
} from "../LQSingularityMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPenroseMock",
        name: "_penrose",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_assetId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract ILiquidationQueueMock",
        name: "liquidationQueue",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "activationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBidAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "feeCollector",
            type: "address",
          },
          {
            internalType: "contract IBidderMock",
            name: "bidExecutionSwapper",
            type: "address",
          },
          {
            internalType: "contract IBidderMock",
            name: "usdoSwapper",
            type: "address",
          },
        ],
        internalType: "struct ILiquidationQueueMock.LiquidationQueueMeta",
        name: "lqMeta",
        type: "tuple",
      },
    ],
    name: "initLq",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516102a13803806102a183398101604081905261002f91610045565b6001600160a01b0390911660805260a05261007f565b6000806040838503121561005857600080fd5b82516001600160a01b038116811461006f57600080fd5b6020939093015192949293505050565b60805160a05161020361009e60003960005050600050506102036000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f9b84cb014610030575b600080fd5b61004361003e3660046100f4565b610045565b005b6040517ff50f78cd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063f50f78cd906100999084903090600401610153565b600060405180830381600087803b1580156100b357600080fd5b505af11580156100c7573d6000803e3d6000fd5b505050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146100f157600080fd5b50565b60008082840360c081121561010857600080fd5b8335610113816100cf565b925060a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561014557600080fd5b506020830190509250929050565b823581526020808401359082015260c081016040840135610173816100cf565b73ffffffffffffffffffffffffffffffffffffffff908116604084015260608501359061019f826100cf565b90811660608401526080850135906101b6826100cf565b90811660808401529290921660a09091015291905056fea2646970667358221220f8c9dc1c5f5c425fbaa8ed3819f623693fcf75bd35f1ebd23cc2cdb8ce1a7e1964736f6c63430008160033";

type LQSingularityMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LQSingularityMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LQSingularityMock__factory extends ContractFactory {
  constructor(...args: LQSingularityMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "LQSingularityMock";
  }

  override deploy(
    _penrose: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LQSingularityMock> {
    return super.deploy(
      _penrose,
      _assetId,
      overrides || {}
    ) as Promise<LQSingularityMock>;
  }
  override getDeployTransaction(
    _penrose: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_penrose, _assetId, overrides || {});
  }
  override attach(address: string): LQSingularityMock {
    return super.attach(address) as LQSingularityMock;
  }
  override connect(signer: Signer): LQSingularityMock__factory {
    return super.connect(signer) as LQSingularityMock__factory;
  }
  static readonly contractName: "LQSingularityMock";

  public readonly contractName: "LQSingularityMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LQSingularityMockInterface {
    return new utils.Interface(_abi) as LQSingularityMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LQSingularityMock {
    return new Contract(address, _abi, signerOrProvider) as LQSingularityMock;
  }
}
