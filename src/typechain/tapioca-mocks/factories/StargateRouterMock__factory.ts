/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  StargateRouterMock,
  StargateRouterMockInterface,
} from "../StargateRouterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_refundAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountLD",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "dstGasForCall",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dstNativeAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "dstNativeAddr",
            type: "bytes",
          },
        ],
        internalType: "struct IStargateRouterMock.lzTxObj",
        name: "",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "_to",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461007457601f61048b38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b0319169190911790556040516103fb90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9182639fbf10fc1461006f57505063fc0c546a1461003a57600080fd5b3461006b578160031936011261006b5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b5080fd5b915091600319926101208436011261033e57823561ffff81160361033e576064359373ffffffffffffffffffffffffffffffffffffffff9182861680960361033a5760843560c4359667ffffffffffffffff93848911610309576060908936030112610336576060830183811085821117610323578652878701358352602492602098848101358a83015260448101359086821161031f5701903660238301121561030557888201359086821161030d578b8951936101378d601f19601f8701160186610342565b8385523688858301011161006b57838b94898f93018388013785010152015260e4358481116103095761016d903690890161037a565b91909461010435908111610305576101889036908a0161037a565b505082156102c357156102725790889291881161026e5782888682541660648951809481936323b872dd60e01b83528d339084015230898401528760448401525af180156102645791899695939160449593610247575b5085835416918851998a97889663a9059cbb60e01b88523516908601528401525af190811561023e5750610211578280f35b8161023092903d10610237575b6102288183610342565b8101906103ad565b5038808280f35b503d61021e565b513d85823e3d90fd5b61025d90883d8a11610237576102288183610342565b50386101df565b87513d86823e3d90fd5b8280fd5b855162461bcd60e51b81528088018990526026818501527f53746172676174653a205f726566756e64416464726573732063616e6e6f742060448201526506265203078360d41b6064820152608490fd5b865162461bcd60e51b81528089018a90526017818601527f53746172676174653a2063616e6e6f74207377617020300000000000000000006044820152606490fd5b8a80fd5b8980fd5b634e487b7160e01b8c5260418a52858cfd5b8b80fd5b634e487b7160e01b8a526041885260248afd5b8880fd5b8680fd5b8480fd5b90601f8019910116810190811067ffffffffffffffff82111761036457604052565b634e487b7160e01b600052604160045260246000fd5b9181601f840112156103a85782359167ffffffffffffffff83116103a857602083818601950101116103a857565b600080fd5b908160209103126103a8575180151581036103a8579056fea2646970667358221220071ba1033397c89ff7dc66c3ec131930e597d5af825de5b86c669a31158d9cdb64736f6c63430008120033";

type StargateRouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StargateRouterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StargateRouterMock__factory extends ContractFactory {
  constructor(...args: StargateRouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "StargateRouterMock";
  }

  override deploy(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StargateRouterMock> {
    return super.deploy(_token, overrides || {}) as Promise<StargateRouterMock>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): StargateRouterMock {
    return super.attach(address) as StargateRouterMock;
  }
  override connect(signer: Signer): StargateRouterMock__factory {
    return super.connect(signer) as StargateRouterMock__factory;
  }
  static readonly contractName: "StargateRouterMock";

  public readonly contractName: "StargateRouterMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StargateRouterMockInterface {
    return new utils.Interface(_abi) as StargateRouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StargateRouterMock {
    return new Contract(address, _abi, signerOrProvider) as StargateRouterMock;
  }
}
