/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  TapiocaDeployerMock,
  TapiocaDeployerMockInterface,
} from "../TapiocaDeployerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "bytecodeHash",
        type: "bytes32",
      },
    ],
    name: "computeAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "bytecodeHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "deployer",
        type: "address",
      },
    ],
    name: "computeAddress",
    outputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "contractName",
        type: "string",
      },
    ],
    name: "deploy",
    outputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610545806100206000396000f3fe6080604052600436106100345760003560e01c8063481286e61461003957806378065306146100825780638f3b6593146100a2575b600080fd5b34801561004557600080fd5b50610059610054366004610256565b6100b5565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34801561008e57600080fd5b5061005961009d366004610278565b6100c9565b6100596100b036600461038d565b6100f3565b60006100c28383306100c9565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b600084471015610164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b82516000036101cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015260640161015b565b8383516020850187f560405190915073ffffffffffffffffffffffffffffffffffffffff8216151590610206908490602001610453565b6040516020818303038152906040529061024d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015b91906104be565b50949350505050565b6000806040838503121561026957600080fd5b50508035926020909101359150565b60008060006060848603121561028d57600080fd5b8335925060208401359150604084013573ffffffffffffffffffffffffffffffffffffffff811681146102bf57600080fd5b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff80841115610314576103146102ca565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561035a5761035a6102ca565b8160405280935085815286868601111561037357600080fd5b858560208301376000602087830101525050509392505050565b600080600080608085870312156103a357600080fd5b8435935060208501359250604085013567ffffffffffffffff808211156103c957600080fd5b818701915087601f8301126103dd57600080fd5b6103ec888335602085016102f9565b9350606087013591508082111561040257600080fd5b508501601f8101871361041457600080fd5b610423878235602084016102f9565b91505092959194509250565b60005b8381101561044a578181015183820152602001610432565b50506000910152565b7f437265617465323a204661696c6564206465706c6f79696e6720636f6e74726181527f63742000000000000000000000000000000000000000000000000000000000006020820152600082516104b181602385016020870161042f565b9190910160230192915050565b60208152600082518060208401526104dd81604085016020870161042f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122044a2bf7ecab3c6d6eeba17ce575590af8a9052f2fd799892412e766f18fb75b264736f6c63430008160033";

type TapiocaDeployerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TapiocaDeployerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TapiocaDeployerMock__factory extends ContractFactory {
  constructor(...args: TapiocaDeployerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TapiocaDeployerMock";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TapiocaDeployerMock> {
    return super.deploy(overrides || {}) as Promise<TapiocaDeployerMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TapiocaDeployerMock {
    return super.attach(address) as TapiocaDeployerMock;
  }
  override connect(signer: Signer): TapiocaDeployerMock__factory {
    return super.connect(signer) as TapiocaDeployerMock__factory;
  }
  static readonly contractName: "TapiocaDeployerMock";

  public readonly contractName: "TapiocaDeployerMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TapiocaDeployerMockInterface {
    return new utils.Interface(_abi) as TapiocaDeployerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TapiocaDeployerMock {
    return new Contract(address, _abi, signerOrProvider) as TapiocaDeployerMock;
  }
}
