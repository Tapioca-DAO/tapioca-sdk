/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TwTwapMock,
  TwTwapMockInterface,
} from "../../TwTapMock.sol/TwTwapMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "addRewardToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rewardTokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "distributeReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    name: "rewardTokenIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rewardTokens",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061048d806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631c03e6cc14610051578063415be3b5146100f55780637bb7bed114610115578063e3bcd27c1461014d575b600080fd5b6100e261005f36600461035f565b60008054600180820183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638201805473ffffffffffffffffffffffffffffffffffffffff9095167fffffffffffffffffffffffff0000000000000000000000000000000000000000909516851790559282526020929092526040902081905590565b6040519081526020015b60405180910390f35b6100e261010336600461035f565b60016020526000908152604090205481565b61012861012336600461039c565b610162565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ec565b61016061015b3660046103b5565b610199565b005b6000818154811061017257600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60008083815481106101ad576101ad6103d7565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1690506101dd813330856101e2565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916102819190610406565b6000604051808303816000865af19150503d80600081146102be576040519150601f19603f3d011682016040523d82523d6000602084013e6102c3565b606091505b50915091508180156102ed5750805115806102ed5750808060200190518101906102ed9190610435565b610357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604482015260640160405180910390fd5b505050505050565b60006020828403121561037157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461039557600080fd5b9392505050565b6000602082840312156103ae57600080fd5b5035919050565b600080604083850312156103c857600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000825160005b81811015610427576020818601810151858301520161040d565b506000920191825250919050565b60006020828403121561044757600080fd5b8151801515811461039557600080fdfea2646970667358221220a0a4c9160f98d635edc59d8427f7730edfa8529c7c4eb180366f91b9122d79cd64736f6c63430008160033";

type TwTwapMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TwTwapMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TwTwapMock__factory extends ContractFactory {
  constructor(...args: TwTwapMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TwTwapMock";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TwTwapMock> {
    return super.deploy(overrides || {}) as Promise<TwTwapMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TwTwapMock {
    return super.attach(address) as TwTwapMock;
  }
  override connect(signer: Signer): TwTwapMock__factory {
    return super.connect(signer) as TwTwapMock__factory;
  }
  static readonly contractName: "TwTwapMock";

  public readonly contractName: "TwTwapMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TwTwapMockInterface {
    return new utils.Interface(_abi) as TwTwapMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TwTwapMock {
    return new Contract(address, _abi, signerOrProvider) as TwTwapMock;
  }
}
