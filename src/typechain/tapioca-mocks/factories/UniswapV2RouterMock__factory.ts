/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  UniswapV2RouterMock,
  UniswapV2RouterMockInterface,
} from "../UniswapV2RouterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761060c908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c90816338ed1739146100b5575063d06ca61f1461003b57600080fd5b346100b157806003193601126100b1578235916024359067ffffffffffffffff82116100ae57506100aa9361007291369101610280565b5050805191610080836102f1565b60028352813660208501378061009584610323565b5261009f83610346565b5251918291826102b6565b0390f35b80fd5b5080fd5b92939050346102415760a03660031901126102415780359267ffffffffffffffff9060443582811161027c576100ee9036908501610280565b6064979197359773ffffffffffffffffffffffffffffffffffffffff91828a16809a03610241578015610269578261012583610356565b16946323b872dd60e01b602082015260249533878301523060448301528a60648301526064825260a0820182811089821117610257578a526101679190610377565b60011015610245576020018161017c82610356565b16803b1561024157838091868b8b519485938492637c928fe960e01b84528d8401525af1801561023757610213575b506101b590610356565b169385519763a9059cbb60e01b60208a015283890152866044890152604488526080880193888510908511176102035750505082526100aa936101f791610377565b805191610080836102f1565b634e487b7160e01b825260419052fd5b8581116102245787526101b56101ab565b5050634e487b7160e01b82525060418452fd5b88513d86823e3d90fd5b8380fd5b5050634e487b7160e01b815260328452fd5b634e487b7160e01b875260418a528787fd5b634e487b7160e01b845260328752602484fd5b8680fd5b9181601f840112156102b15782359167ffffffffffffffff83116102b1576020808501948460051b0101116102b157565b600080fd5b6020908160408183019282815285518094520193019160005b8281106102dd575050505090565b8351855293810193928101926001016102cf565b6060810190811067ffffffffffffffff82111761030d57604052565b634e487b7160e01b600052604160045260246000fd5b8051156103305760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156103305760400190565b3573ffffffffffffffffffffffffffffffffffffffff811681036102b15790565b73ffffffffffffffffffffffffffffffffffffffff909291921660408051938185019467ffffffffffffffff958181108782111761030d5783526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808487829651910182855af13d156104f5573d918883116104e157855192601f19603f81601f8401160116840199848b10908b11176104cd578697989961042f96975283528286893d92013e610502565b80518061043e575b5050505050565b818591810103126100b157830151908115918215036100ae575061046457808080610437565b60849250519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b85526041600452602485fd5b61042f9394959697506060915b919290156105645750815115610516575090565b3b1561051f5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156105775750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106105bd575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061059a56fea2646970667358221220f761fd337a3049e586b39183b7219c603981f34d4990845b28486cd5e3347ec464736f6c63430008120033";

type UniswapV2RouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV2RouterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV2RouterMock__factory extends ContractFactory {
  constructor(...args: UniswapV2RouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UniswapV2RouterMock";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UniswapV2RouterMock> {
    return super.deploy(overrides || {}) as Promise<UniswapV2RouterMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UniswapV2RouterMock {
    return super.attach(address) as UniswapV2RouterMock;
  }
  override connect(signer: Signer): UniswapV2RouterMock__factory {
    return super.connect(signer) as UniswapV2RouterMock__factory;
  }
  static readonly contractName: "UniswapV2RouterMock";

  public readonly contractName: "UniswapV2RouterMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV2RouterMockInterface {
    return new utils.Interface(_abi) as UniswapV2RouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV2RouterMock {
    return new Contract(address, _abi, signerOrProvider) as UniswapV2RouterMock;
  }
}
