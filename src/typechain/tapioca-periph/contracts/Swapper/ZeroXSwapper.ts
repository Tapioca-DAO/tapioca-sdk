/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IZeroXSwapper {
  export type SZeroXSwapDataStruct = {
    sellToken: PromiseOrValue<string>;
    buyToken: PromiseOrValue<string>;
    swapTarget: PromiseOrValue<string>;
    swapCallData: PromiseOrValue<BytesLike>;
  };

  export type SZeroXSwapDataStructOutput = [string, string, string, string] & {
    sellToken: string;
    buyToken: string;
    swapTarget: string;
    swapCallData: string;
  };
}

export interface ZeroXSwapperInterface extends utils.Interface {
  functions: {
    "cluster()": FunctionFragment;
    "isOneInchEnabled()": FunctionFragment;
    "oneInchProxy()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setIsOneInchEnabled(bool)": FunctionFragment;
    "swap((address,address,address,bytes),uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "zeroXProxy()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cluster"
      | "cluster()"
      | "isOneInchEnabled"
      | "isOneInchEnabled()"
      | "oneInchProxy"
      | "oneInchProxy()"
      | "owner"
      | "owner()"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "setIsOneInchEnabled"
      | "setIsOneInchEnabled(bool)"
      | "swap"
      | "swap((address,address,address,bytes),uint256,uint256)"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "zeroXProxy"
      | "zeroXProxy()"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "cluster", values?: undefined): string;
  encodeFunctionData(functionFragment: "cluster()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOneInchEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOneInchEnabled()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oneInchProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oneInchProxy()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIsOneInchEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsOneInchEnabled(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      IZeroXSwapper.SZeroXSwapDataStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap((address,address,address,bytes),uint256,uint256)",
    values: [
      IZeroXSwapper.SZeroXSwapDataStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "zeroXProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zeroXProxy()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "cluster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cluster()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOneInchEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOneInchEnabled()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneInchProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneInchProxy()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsOneInchEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsOneInchEnabled(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swap((address,address,address,bytes),uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeroXProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zeroXProxy()",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ZeroXSwapper extends BaseContract {
  contractName: "ZeroXSwapper";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZeroXSwapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cluster(overrides?: CallOverrides): Promise<[string]>;

    "cluster()"(overrides?: CallOverrides): Promise<[string]>;

    isOneInchEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "isOneInchEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    oneInchProxy(overrides?: CallOverrides): Promise<[string]>;

    "oneInchProxy()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsOneInchEnabled(
      _isOneInchEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setIsOneInchEnabled(bool)"(
      _isOneInchEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      swapData: IZeroXSwapper.SZeroXSwapDataStruct,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swap((address,address,address,bytes),uint256,uint256)"(
      swapData: IZeroXSwapper.SZeroXSwapDataStruct,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zeroXProxy(overrides?: CallOverrides): Promise<[string]>;

    "zeroXProxy()"(overrides?: CallOverrides): Promise<[string]>;
  };

  cluster(overrides?: CallOverrides): Promise<string>;

  "cluster()"(overrides?: CallOverrides): Promise<string>;

  isOneInchEnabled(overrides?: CallOverrides): Promise<boolean>;

  "isOneInchEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  oneInchProxy(overrides?: CallOverrides): Promise<string>;

  "oneInchProxy()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsOneInchEnabled(
    _isOneInchEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setIsOneInchEnabled(bool)"(
    _isOneInchEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    swapData: IZeroXSwapper.SZeroXSwapDataStruct,
    amountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swap((address,address,address,bytes),uint256,uint256)"(
    swapData: IZeroXSwapper.SZeroXSwapDataStruct,
    amountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zeroXProxy(overrides?: CallOverrides): Promise<string>;

  "zeroXProxy()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cluster(overrides?: CallOverrides): Promise<string>;

    "cluster()"(overrides?: CallOverrides): Promise<string>;

    isOneInchEnabled(overrides?: CallOverrides): Promise<boolean>;

    "isOneInchEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    oneInchProxy(overrides?: CallOverrides): Promise<string>;

    "oneInchProxy()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setIsOneInchEnabled(
      _isOneInchEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIsOneInchEnabled(bool)"(
      _isOneInchEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      swapData: IZeroXSwapper.SZeroXSwapDataStruct,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swap((address,address,address,bytes),uint256,uint256)"(
      swapData: IZeroXSwapper.SZeroXSwapDataStruct,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    zeroXProxy(overrides?: CallOverrides): Promise<string>;

    "zeroXProxy()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    cluster(overrides?: CallOverrides): Promise<BigNumber>;

    "cluster()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOneInchEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "isOneInchEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    oneInchProxy(overrides?: CallOverrides): Promise<BigNumber>;

    "oneInchProxy()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsOneInchEnabled(
      _isOneInchEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setIsOneInchEnabled(bool)"(
      _isOneInchEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      swapData: IZeroXSwapper.SZeroXSwapDataStruct,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swap((address,address,address,bytes),uint256,uint256)"(
      swapData: IZeroXSwapper.SZeroXSwapDataStruct,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zeroXProxy(overrides?: CallOverrides): Promise<BigNumber>;

    "zeroXProxy()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cluster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cluster()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOneInchEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOneInchEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oneInchProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oneInchProxy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsOneInchEnabled(
      _isOneInchEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setIsOneInchEnabled(bool)"(
      _isOneInchEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      swapData: IZeroXSwapper.SZeroXSwapDataStruct,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swap((address,address,address,bytes),uint256,uint256)"(
      swapData: IZeroXSwapper.SZeroXSwapDataStruct,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zeroXProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "zeroXProxy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
