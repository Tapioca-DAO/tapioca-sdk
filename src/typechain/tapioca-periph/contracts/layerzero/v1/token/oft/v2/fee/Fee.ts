/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../../common";

export interface FeeInterface extends utils.Interface {
  functions: {
    "BP_DENOMINATOR()": FunctionFragment;
    "chainIdToFeeBps(uint16)": FunctionFragment;
    "defaultFeeBp()": FunctionFragment;
    "feeOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "quoteOFTFee(uint16,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDefaultFeeBp(uint16)": FunctionFragment;
    "setFeeBp(uint16,bool,uint16)": FunctionFragment;
    "setFeeOwner(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BP_DENOMINATOR"
      | "BP_DENOMINATOR()"
      | "chainIdToFeeBps"
      | "chainIdToFeeBps(uint16)"
      | "defaultFeeBp"
      | "defaultFeeBp()"
      | "feeOwner"
      | "feeOwner()"
      | "owner"
      | "owner()"
      | "quoteOFTFee"
      | "quoteOFTFee(uint16,uint256)"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "setDefaultFeeBp"
      | "setDefaultFeeBp(uint16)"
      | "setFeeBp"
      | "setFeeBp(uint16,bool,uint16)"
      | "setFeeOwner"
      | "setFeeOwner(address)"
      | "transferOwnership"
      | "transferOwnership(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BP_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BP_DENOMINATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdToFeeBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdToFeeBps(uint16)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFeeBp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFeeBp()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeOwner()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteOFTFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteOFTFee(uint16,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFeeBp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFeeBp(uint16)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBp",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBp(uint16,bool,uint16)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeOwner(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BP_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BP_DENOMINATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdToFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdToFeeBps(uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultFeeBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultFeeBp()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeOwner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteOFTFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteOFTFee(uint16,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFeeBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFeeBp(uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeBp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBp(uint16,bool,uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeOwner(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetDefaultFeeBp(uint16)": EventFragment;
    "SetFeeBp(uint16,bool,uint16)": EventFragment;
    "SetFeeOwner(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultFeeBp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultFeeBp(uint16)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeBp"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetFeeBp(uint16,bool,uint16)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeOwner(address)"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetDefaultFeeBpEventObject {
  feeBp: number;
}
export type SetDefaultFeeBpEvent = TypedEvent<
  [number],
  SetDefaultFeeBpEventObject
>;

export type SetDefaultFeeBpEventFilter = TypedEventFilter<SetDefaultFeeBpEvent>;

export interface SetFeeBpEventObject {
  dstchainId: number;
  enabled: boolean;
  feeBp: number;
}
export type SetFeeBpEvent = TypedEvent<
  [number, boolean, number],
  SetFeeBpEventObject
>;

export type SetFeeBpEventFilter = TypedEventFilter<SetFeeBpEvent>;

export interface SetFeeOwnerEventObject {
  feeOwner: string;
}
export type SetFeeOwnerEvent = TypedEvent<[string], SetFeeOwnerEventObject>;

export type SetFeeOwnerEventFilter = TypedEventFilter<SetFeeOwnerEvent>;

export interface Fee extends BaseContract {
  contractName: "Fee";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BP_DENOMINATOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainIdToFeeBps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { feeBP: number; enabled: boolean }>;

    "chainIdToFeeBps(uint16)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { feeBP: number; enabled: boolean }>;

    defaultFeeBp(overrides?: CallOverrides): Promise<[number]>;

    "defaultFeeBp()"(overrides?: CallOverrides): Promise<[number]>;

    feeOwner(overrides?: CallOverrides): Promise<[string]>;

    "feeOwner()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    quoteOFTFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    "quoteOFTFee(uint16,uint256)"(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultFeeBp(
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setDefaultFeeBp(uint16)"(
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeBp(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setFeeBp(uint16,bool,uint16)"(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeOwner(
      _feeOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setFeeOwner(address)"(
      _feeOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "BP_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  chainIdToFeeBps(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, boolean] & { feeBP: number; enabled: boolean }>;

  "chainIdToFeeBps(uint16)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, boolean] & { feeBP: number; enabled: boolean }>;

  defaultFeeBp(overrides?: CallOverrides): Promise<number>;

  "defaultFeeBp()"(overrides?: CallOverrides): Promise<number>;

  feeOwner(overrides?: CallOverrides): Promise<string>;

  "feeOwner()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  quoteOFTFee(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quoteOFTFee(uint16,uint256)"(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultFeeBp(
    _feeBp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setDefaultFeeBp(uint16)"(
    _feeBp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeBp(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _enabled: PromiseOrValue<boolean>,
    _feeBp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setFeeBp(uint16,bool,uint16)"(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _enabled: PromiseOrValue<boolean>,
    _feeBp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeOwner(
    _feeOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setFeeOwner(address)"(
    _feeOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "BP_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    chainIdToFeeBps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { feeBP: number; enabled: boolean }>;

    "chainIdToFeeBps(uint16)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { feeBP: number; enabled: boolean }>;

    defaultFeeBp(overrides?: CallOverrides): Promise<number>;

    "defaultFeeBp()"(overrides?: CallOverrides): Promise<number>;

    feeOwner(overrides?: CallOverrides): Promise<string>;

    "feeOwner()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    quoteOFTFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteOFTFee(uint16,uint256)"(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDefaultFeeBp(
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDefaultFeeBp(uint16)"(
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeBp(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeBp(uint16,bool,uint16)"(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeOwner(
      _feeOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeOwner(address)"(
      _feeOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetDefaultFeeBp(uint16)"(feeBp?: null): SetDefaultFeeBpEventFilter;
    SetDefaultFeeBp(feeBp?: null): SetDefaultFeeBpEventFilter;

    "SetFeeBp(uint16,bool,uint16)"(
      dstchainId?: null,
      enabled?: null,
      feeBp?: null
    ): SetFeeBpEventFilter;
    SetFeeBp(
      dstchainId?: null,
      enabled?: null,
      feeBp?: null
    ): SetFeeBpEventFilter;

    "SetFeeOwner(address)"(feeOwner?: null): SetFeeOwnerEventFilter;
    SetFeeOwner(feeOwner?: null): SetFeeOwnerEventFilter;
  };

  estimateGas: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "BP_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    chainIdToFeeBps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "chainIdToFeeBps(uint16)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultFeeBp(overrides?: CallOverrides): Promise<BigNumber>;

    "defaultFeeBp()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "feeOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteOFTFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteOFTFee(uint16,uint256)"(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultFeeBp(
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setDefaultFeeBp(uint16)"(
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeBp(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setFeeBp(uint16,bool,uint16)"(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeOwner(
      _feeOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setFeeOwner(address)"(
      _feeOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BP_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainIdToFeeBps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "chainIdToFeeBps(uint16)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultFeeBp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "defaultFeeBp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteOFTFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteOFTFee(uint16,uint256)"(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultFeeBp(
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setDefaultFeeBp(uint16)"(
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBp(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setFeeBp(uint16,bool,uint16)"(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      _feeBp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeOwner(
      _feeOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setFeeOwner(address)"(
      _feeOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
