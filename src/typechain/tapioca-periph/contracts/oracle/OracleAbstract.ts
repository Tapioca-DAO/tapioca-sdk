/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface OracleAbstractInterface extends utils.Interface {
  functions: {
    "BASE()": FunctionFragment;
    "description()": FunctionFragment;
    "inBase()": FunctionFragment;
    "read()": FunctionFragment;
    "readAll()": FunctionFragment;
    "readLower()": FunctionFragment;
    "readQuote(uint256)": FunctionFragment;
    "readQuoteLower(uint256)": FunctionFragment;
    "readUpper()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE"
      | "BASE()"
      | "description"
      | "description()"
      | "inBase"
      | "inBase()"
      | "read"
      | "read()"
      | "readAll"
      | "readAll()"
      | "readLower"
      | "readLower()"
      | "readQuote"
      | "readQuote(uint256)"
      | "readQuoteLower"
      | "readQuoteLower(uint256)"
      | "readUpper"
      | "readUpper()"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BASE", values?: undefined): string;
  encodeFunctionData(functionFragment: "BASE()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "description()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "inBase", values?: undefined): string;
  encodeFunctionData(functionFragment: "inBase()", values?: undefined): string;
  encodeFunctionData(functionFragment: "read", values?: undefined): string;
  encodeFunctionData(functionFragment: "read()", values?: undefined): string;
  encodeFunctionData(functionFragment: "readAll", values?: undefined): string;
  encodeFunctionData(functionFragment: "readAll()", values?: undefined): string;
  encodeFunctionData(functionFragment: "readLower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readLower()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readQuote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "readQuote(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "readQuoteLower",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "readQuoteLower(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "readUpper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readUpper()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BASE()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inBase()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "read()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readAll()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readLower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readLower()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readQuote(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readQuoteLower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readQuoteLower(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "readUpper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readUpper()",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OracleAbstract extends BaseContract {
  contractName: "OracleAbstract";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleAbstractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BASE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    "description()"(overrides?: CallOverrides): Promise<[string]>;

    inBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    "inBase()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    read(overrides?: CallOverrides): Promise<[BigNumber] & { rate: BigNumber }>;

    "read()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rate: BigNumber }>;

    readAll(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    "readAll()"(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    readLower(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rate: BigNumber }>;

    "readLower()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rate: BigNumber }>;

    readQuote(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "readQuote(uint256)"(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    readQuoteLower(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "readQuoteLower(uint256)"(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    readUpper(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rate: BigNumber }>;

    "readUpper()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rate: BigNumber }>;
  };

  BASE(overrides?: CallOverrides): Promise<BigNumber>;

  "BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

  description(overrides?: CallOverrides): Promise<string>;

  "description()"(overrides?: CallOverrides): Promise<string>;

  inBase(overrides?: CallOverrides): Promise<BigNumber>;

  "inBase()"(overrides?: CallOverrides): Promise<BigNumber>;

  read(overrides?: CallOverrides): Promise<BigNumber>;

  "read()"(overrides?: CallOverrides): Promise<BigNumber>;

  readAll(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  "readAll()"(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  readLower(overrides?: CallOverrides): Promise<BigNumber>;

  "readLower()"(overrides?: CallOverrides): Promise<BigNumber>;

  readQuote(
    quoteAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "readQuote(uint256)"(
    quoteAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  readQuoteLower(
    quoteAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "readQuoteLower(uint256)"(
    quoteAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  readUpper(overrides?: CallOverrides): Promise<BigNumber>;

  "readUpper()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    "BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<string>;

    "description()"(overrides?: CallOverrides): Promise<string>;

    inBase(overrides?: CallOverrides): Promise<BigNumber>;

    "inBase()"(overrides?: CallOverrides): Promise<BigNumber>;

    read(overrides?: CallOverrides): Promise<BigNumber>;

    "read()"(overrides?: CallOverrides): Promise<BigNumber>;

    readAll(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    "readAll()"(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    readLower(overrides?: CallOverrides): Promise<BigNumber>;

    "readLower()"(overrides?: CallOverrides): Promise<BigNumber>;

    readQuote(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readQuote(uint256)"(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readQuoteLower(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readQuoteLower(uint256)"(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readUpper(overrides?: CallOverrides): Promise<BigNumber>;

    "readUpper()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    "BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    "description()"(overrides?: CallOverrides): Promise<BigNumber>;

    inBase(overrides?: CallOverrides): Promise<BigNumber>;

    "inBase()"(overrides?: CallOverrides): Promise<BigNumber>;

    read(overrides?: CallOverrides): Promise<BigNumber>;

    "read()"(overrides?: CallOverrides): Promise<BigNumber>;

    readAll(overrides?: CallOverrides): Promise<BigNumber>;

    "readAll()"(overrides?: CallOverrides): Promise<BigNumber>;

    readLower(overrides?: CallOverrides): Promise<BigNumber>;

    "readLower()"(overrides?: CallOverrides): Promise<BigNumber>;

    readQuote(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readQuote(uint256)"(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readQuoteLower(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readQuoteLower(uint256)"(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readUpper(overrides?: CallOverrides): Promise<BigNumber>;

    "readUpper()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BASE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "description()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "inBase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    read(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "read()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "readAll()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readLower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "readLower()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readQuote(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readQuote(uint256)"(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readQuoteLower(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readQuoteLower(uint256)"(
      quoteAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readUpper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "readUpper()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
