/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type OrderFillAmountsStruct = {
  orderStartAmount: PromiseOrValue<BigNumberish>;
  requestedFillAmount: PromiseOrValue<BigNumberish>;
  minimumFillAmount: PromiseOrValue<BigNumberish>;
};

export type OrderFillAmountsStructOutput = [BigNumber, BigNumber, BigNumber] & {
  orderStartAmount: BigNumber;
  requestedFillAmount: BigNumber;
  minimumFillAmount: BigNumber;
};

export declare namespace IPearlmit {
  export type SignatureApprovalStruct = {
    tokenType: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<string>;
  };

  export type SignatureApprovalStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    tokenType: number;
    token: string;
    id: BigNumber;
    amount: BigNumber;
    operator: string;
  };

  export type PermitBatchTransferFromStruct = {
    approvals: IPearlmit.SignatureApprovalStruct[];
    owner: PromiseOrValue<string>;
    nonce: PromiseOrValue<BigNumberish>;
    sigDeadline: PromiseOrValue<BigNumberish>;
    signedPermit: PromiseOrValue<BytesLike>;
    executor: PromiseOrValue<string>;
    hashedData: PromiseOrValue<BytesLike>;
  };

  export type PermitBatchTransferFromStructOutput = [
    IPearlmit.SignatureApprovalStructOutput[],
    string,
    BigNumber,
    number,
    string,
    string,
    string
  ] & {
    approvals: IPearlmit.SignatureApprovalStructOutput[];
    owner: string;
    nonce: BigNumber;
    sigDeadline: number;
    signedPermit: string;
    executor: string;
    hashedData: string;
  };
}

export interface PearlmitInterface extends utils.Interface {
  functions: {
    "allowance(address,address,address,uint256,bytes32)": FunctionFragment;
    "allowance(address,address,address,uint256)": FunctionFragment;
    "approve(address,uint256,address,uint200,uint48)": FunctionFragment;
    "clearAllowance(address,address,uint256)": FunctionFragment;
    "closePermittedOrder(address,address,uint256,bytes32)": FunctionFragment;
    "domainSeparatorV4()": FunctionFragment;
    "fillPermittedOrderERC1155(bytes,(uint256,uint256,uint256),address,uint256,address,address,uint256,uint48,bytes32,bytes32)": FunctionFragment;
    "fillPermittedOrderERC20(bytes,(uint256,uint256,uint256),address,address,address,uint256,uint48,bytes32,bytes32)": FunctionFragment;
    "invalidateUnorderedNonce(uint256)": FunctionFragment;
    "isRegisteredAdditionalDataHash(bytes32)": FunctionFragment;
    "isValidUnorderedNonce(address,uint256)": FunctionFragment;
    "lockdown()": FunctionFragment;
    "masterNonce(address)": FunctionFragment;
    "permitBatchApprove(((uint8,address,uint256,uint200,address)[],address,uint256,uint48,bytes,address,bytes32),bytes32)": FunctionFragment;
    "permitTransferFromERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes)": FunctionFragment;
    "permitTransferFromERC20(address,uint256,uint256,uint256,address,address,uint256,bytes)": FunctionFragment;
    "permitTransferFromERC721(address,uint256,uint256,uint256,address,address,bytes)": FunctionFragment;
    "permitTransferFromWithAdditionalDataERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)": FunctionFragment;
    "permitTransferFromWithAdditionalDataERC20(address,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)": FunctionFragment;
    "permitTransferFromWithAdditionalDataERC721(address,uint256,uint256,uint256,address,address,bytes32,bytes32,bytes)": FunctionFragment;
    "registerAdditionalDataHash(string)": FunctionFragment;
    "transferFromERC1155(address,address,address,uint256,uint256)": FunctionFragment;
    "transferFromERC20(address,address,address,uint256)": FunctionFragment;
    "transferFromERC721(address,address,address,uint256)": FunctionFragment;
    "updateApprovalBySignature(address,uint256,uint256,uint200,address,uint48,uint48,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance(address,address,address,uint256,bytes32)"
      | "allowance(address,address,address,uint256)"
      | "approve"
      | "approve(address,uint256,address,uint200,uint48)"
      | "clearAllowance"
      | "clearAllowance(address,address,uint256)"
      | "closePermittedOrder"
      | "closePermittedOrder(address,address,uint256,bytes32)"
      | "domainSeparatorV4"
      | "domainSeparatorV4()"
      | "fillPermittedOrderERC1155"
      | "fillPermittedOrderERC1155(bytes,(uint256,uint256,uint256),address,uint256,address,address,uint256,uint48,bytes32,bytes32)"
      | "fillPermittedOrderERC20"
      | "fillPermittedOrderERC20(bytes,(uint256,uint256,uint256),address,address,address,uint256,uint48,bytes32,bytes32)"
      | "invalidateUnorderedNonce"
      | "invalidateUnorderedNonce(uint256)"
      | "isRegisteredAdditionalDataHash"
      | "isRegisteredAdditionalDataHash(bytes32)"
      | "isValidUnorderedNonce"
      | "isValidUnorderedNonce(address,uint256)"
      | "lockdown"
      | "lockdown()"
      | "masterNonce"
      | "masterNonce(address)"
      | "permitBatchApprove"
      | "permitBatchApprove(((uint8,address,uint256,uint200,address)[],address,uint256,uint48,bytes,address,bytes32),bytes32)"
      | "permitTransferFromERC1155"
      | "permitTransferFromERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes)"
      | "permitTransferFromERC20"
      | "permitTransferFromERC20(address,uint256,uint256,uint256,address,address,uint256,bytes)"
      | "permitTransferFromERC721"
      | "permitTransferFromERC721(address,uint256,uint256,uint256,address,address,bytes)"
      | "permitTransferFromWithAdditionalDataERC1155"
      | "permitTransferFromWithAdditionalDataERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"
      | "permitTransferFromWithAdditionalDataERC20"
      | "permitTransferFromWithAdditionalDataERC20(address,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"
      | "permitTransferFromWithAdditionalDataERC721"
      | "permitTransferFromWithAdditionalDataERC721(address,uint256,uint256,uint256,address,address,bytes32,bytes32,bytes)"
      | "registerAdditionalDataHash"
      | "registerAdditionalDataHash(string)"
      | "transferFromERC1155"
      | "transferFromERC1155(address,address,address,uint256,uint256)"
      | "transferFromERC20"
      | "transferFromERC20(address,address,address,uint256)"
      | "transferFromERC721"
      | "transferFromERC721(address,address,address,uint256)"
      | "updateApprovalBySignature"
      | "updateApprovalBySignature(address,uint256,uint256,uint200,address,uint48,uint48,address,bytes)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance(address,address,address,uint256,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256,address,uint200,uint48)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "clearAllowance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "clearAllowance(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closePermittedOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "closePermittedOrder(address,address,uint256,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparatorV4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparatorV4()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillPermittedOrderERC1155",
    values: [
      PromiseOrValue<BytesLike>,
      OrderFillAmountsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPermittedOrderERC1155(bytes,(uint256,uint256,uint256),address,uint256,address,address,uint256,uint48,bytes32,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      OrderFillAmountsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPermittedOrderERC20",
    values: [
      PromiseOrValue<BytesLike>,
      OrderFillAmountsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPermittedOrderERC20(bytes,(uint256,uint256,uint256),address,address,address,uint256,uint48,bytes32,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      OrderFillAmountsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateUnorderedNonce",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateUnorderedNonce(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredAdditionalDataHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredAdditionalDataHash(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidUnorderedNonce",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidUnorderedNonce(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "lockdown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockdown()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "masterNonce(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "permitBatchApprove",
    values: [IPearlmit.PermitBatchTransferFromStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "permitBatchApprove(((uint8,address,uint256,uint200,address)[],address,uint256,uint48,bytes,address,bytes32),bytes32)",
    values: [IPearlmit.PermitBatchTransferFromStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromERC1155",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromERC20(address,uint256,uint256,uint256,address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromERC721(address,uint256,uint256,uint256,address,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromWithAdditionalDataERC1155",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromWithAdditionalDataERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromWithAdditionalDataERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromWithAdditionalDataERC20(address,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromWithAdditionalDataERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTransferFromWithAdditionalDataERC721(address,uint256,uint256,uint256,address,address,bytes32,bytes32,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAdditionalDataHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAdditionalDataHash(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromERC1155",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromERC1155(address,address,address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromERC20(address,address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromERC721(address,address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateApprovalBySignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateApprovalBySignature(address,uint256,uint256,uint200,address,uint48,uint48,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowance(address,address,address,uint256,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256,address,uint200,uint48)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearAllowance(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePermittedOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePermittedOrder(address,address,uint256,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparatorV4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparatorV4()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillPermittedOrderERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillPermittedOrderERC1155(bytes,(uint256,uint256,uint256),address,uint256,address,address,uint256,uint48,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillPermittedOrderERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillPermittedOrderERC20(bytes,(uint256,uint256,uint256),address,address,address,uint256,uint48,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateUnorderedNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateUnorderedNonce(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredAdditionalDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredAdditionalDataHash(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidUnorderedNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidUnorderedNonce(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockdown()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterNonce(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitBatchApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitBatchApprove(((uint8,address,uint256,uint200,address)[],address,uint256,uint48,bytes,address,bytes32),bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromERC20(address,uint256,uint256,uint256,address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromERC721(address,uint256,uint256,uint256,address,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromWithAdditionalDataERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromWithAdditionalDataERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromWithAdditionalDataERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromWithAdditionalDataERC20(address,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromWithAdditionalDataERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTransferFromWithAdditionalDataERC721(address,uint256,uint256,uint256,address,address,bytes32,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAdditionalDataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAdditionalDataHash(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromERC1155(address,address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromERC20(address,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromERC721(address,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateApprovalBySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateApprovalBySignature(address,uint256,uint256,uint200,address,uint48,uint48,address,bytes)",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,address,uint256,uint200,uint48)": EventFragment;
    "Lockdown(address)": EventFragment;
    "OrderClosed(bytes32,address,address,bool)": EventFragment;
    "OrderFilled(bytes32,address,address,uint256)": EventFragment;
    "OrderOpened(bytes32,address,address,uint256)": EventFragment;
    "OrderRestored(bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,address,uint256,uint200,uint48)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lockdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lockdown(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderClosed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OrderClosed(bytes32,address,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFilled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OrderFilled(bytes32,address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderOpened"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OrderOpened(bytes32,address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderRestored"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OrderRestored(bytes32,address,uint256)"
  ): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  token: string;
  operator: string;
  id: BigNumber;
  amount: BigNumber;
  expiration: number;
}
export type ApprovalEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, number],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface LockdownEventObject {
  owner: string;
}
export type LockdownEvent = TypedEvent<[string], LockdownEventObject>;

export type LockdownEventFilter = TypedEventFilter<LockdownEvent>;

export interface OrderClosedEventObject {
  orderId: string;
  owner: string;
  operator: string;
  wasCancellation: boolean;
}
export type OrderClosedEvent = TypedEvent<
  [string, string, string, boolean],
  OrderClosedEventObject
>;

export type OrderClosedEventFilter = TypedEventFilter<OrderClosedEvent>;

export interface OrderFilledEventObject {
  orderId: string;
  owner: string;
  operator: string;
  amount: BigNumber;
}
export type OrderFilledEvent = TypedEvent<
  [string, string, string, BigNumber],
  OrderFilledEventObject
>;

export type OrderFilledEventFilter = TypedEventFilter<OrderFilledEvent>;

export interface OrderOpenedEventObject {
  orderId: string;
  owner: string;
  operator: string;
  fillableQuantity: BigNumber;
}
export type OrderOpenedEvent = TypedEvent<
  [string, string, string, BigNumber],
  OrderOpenedEventObject
>;

export type OrderOpenedEventFilter = TypedEventFilter<OrderOpenedEvent>;

export interface OrderRestoredEventObject {
  orderId: string;
  owner: string;
  amountRestoredToOrder: BigNumber;
}
export type OrderRestoredEvent = TypedEvent<
  [string, string, BigNumber],
  OrderRestoredEventObject
>;

export type OrderRestoredEventFilter = TypedEventFilter<OrderRestoredEvent>;

export interface Pearlmit extends BaseContract {
  contractName: "Pearlmit";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PearlmitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "allowance(address,address,address,uint256,bytes32)"(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        allowedAmount: BigNumber;
        expiration: BigNumber;
      }
    >;

    "allowance(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        allowedAmount: BigNumber;
        expiration: BigNumber;
      }
    >;

    approve(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256,address,uint200,uint48)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearAllowance(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "clearAllowance(address,address,uint256)"(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closePermittedOrder(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "closePermittedOrder(address,address,uint256,bytes32)"(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    domainSeparatorV4(
      overrides?: CallOverrides
    ): Promise<[string] & { domainSeparator: string }>;

    "domainSeparatorV4()"(
      overrides?: CallOverrides
    ): Promise<[string] & { domainSeparator: string }>;

    fillPermittedOrderERC1155(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "fillPermittedOrderERC1155(bytes,(uint256,uint256,uint256),address,uint256,address,address,uint256,uint48,bytes32,bytes32)"(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillPermittedOrderERC20(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "fillPermittedOrderERC20(bytes,(uint256,uint256,uint256),address,address,address,uint256,uint48,bytes32,bytes32)"(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    invalidateUnorderedNonce(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "invalidateUnorderedNonce(uint256)"(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isRegisteredAdditionalDataHash(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isRegistered: boolean }>;

    "isRegisteredAdditionalDataHash(bytes32)"(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isRegistered: boolean }>;

    isValidUnorderedNonce(
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    "isValidUnorderedNonce(address,uint256)"(
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    lockdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "lockdown()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    masterNonce(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "masterNonce(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    permitBatchApprove(
      batch: IPearlmit.PermitBatchTransferFromStruct,
      hashedData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permitBatchApprove(((uint8,address,uint256,uint200,address)[],address,uint256,uint48,bytes,address,bytes32),bytes32)"(
      batch: IPearlmit.PermitBatchTransferFromStruct,
      hashedData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    permitTransferFromERC1155(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permitTransferFromERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    permitTransferFromERC20(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permitTransferFromERC20(address,uint256,uint256,uint256,address,address,uint256,bytes)"(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    permitTransferFromERC721(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permitTransferFromERC721(address,uint256,uint256,uint256,address,address,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    permitTransferFromWithAdditionalDataERC1155(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permitTransferFromWithAdditionalDataERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    permitTransferFromWithAdditionalDataERC20(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permitTransferFromWithAdditionalDataERC20(address,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    permitTransferFromWithAdditionalDataERC721(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permitTransferFromWithAdditionalDataERC721(address,uint256,uint256,uint256,address,address,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerAdditionalDataHash(
      additionalDataTypeString: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "registerAdditionalDataHash(string)"(
      additionalDataTypeString: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFromERC1155(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFromERC1155(address,address,address,uint256,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFromERC20(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFromERC20(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFromERC721(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFromERC721(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateApprovalBySignature(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approvalExpiration: PromiseOrValue<BigNumberish>,
      sigDeadline: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateApprovalBySignature(address,uint256,uint256,uint200,address,uint48,uint48,address,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approvalExpiration: PromiseOrValue<BigNumberish>,
      sigDeadline: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "allowance(address,address,address,uint256,bytes32)"(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    orderId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { allowedAmount: BigNumber; expiration: BigNumber }
  >;

  "allowance(address,address,address,uint256)"(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { allowedAmount: BigNumber; expiration: BigNumber }
  >;

  approve(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256,address,uint200,uint48)"(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearAllowance(
    owner: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "clearAllowance(address,address,uint256)"(
    owner: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closePermittedOrder(
    owner: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    orderId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "closePermittedOrder(address,address,uint256,bytes32)"(
    owner: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    orderId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  domainSeparatorV4(overrides?: CallOverrides): Promise<string>;

  "domainSeparatorV4()"(overrides?: CallOverrides): Promise<string>;

  fillPermittedOrderERC1155(
    signedPermit: PromiseOrValue<BytesLike>,
    orderFillAmounts: OrderFillAmountsStruct,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    orderId: PromiseOrValue<BytesLike>,
    advancedPermitHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "fillPermittedOrderERC1155(bytes,(uint256,uint256,uint256),address,uint256,address,address,uint256,uint48,bytes32,bytes32)"(
    signedPermit: PromiseOrValue<BytesLike>,
    orderFillAmounts: OrderFillAmountsStruct,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    orderId: PromiseOrValue<BytesLike>,
    advancedPermitHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillPermittedOrderERC20(
    signedPermit: PromiseOrValue<BytesLike>,
    orderFillAmounts: OrderFillAmountsStruct,
    token: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    orderId: PromiseOrValue<BytesLike>,
    advancedPermitHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "fillPermittedOrderERC20(bytes,(uint256,uint256,uint256),address,address,address,uint256,uint48,bytes32,bytes32)"(
    signedPermit: PromiseOrValue<BytesLike>,
    orderFillAmounts: OrderFillAmountsStruct,
    token: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    orderId: PromiseOrValue<BytesLike>,
    advancedPermitHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  invalidateUnorderedNonce(
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "invalidateUnorderedNonce(uint256)"(
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isRegisteredAdditionalDataHash(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRegisteredAdditionalDataHash(bytes32)"(
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidUnorderedNonce(
    owner: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidUnorderedNonce(address,uint256)"(
    owner: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockdown(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "lockdown()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  masterNonce(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "masterNonce(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  permitBatchApprove(
    batch: IPearlmit.PermitBatchTransferFromStruct,
    hashedData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permitBatchApprove(((uint8,address,uint256,uint200,address)[],address,uint256,uint48,bytes,address,bytes32),bytes32)"(
    batch: IPearlmit.PermitBatchTransferFromStruct,
    hashedData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  permitTransferFromERC1155(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    permitAmount: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    transferAmount: PromiseOrValue<BigNumberish>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permitTransferFromERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes)"(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    permitAmount: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    transferAmount: PromiseOrValue<BigNumberish>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  permitTransferFromERC20(
    token: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    permitAmount: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    transferAmount: PromiseOrValue<BigNumberish>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permitTransferFromERC20(address,uint256,uint256,uint256,address,address,uint256,bytes)"(
    token: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    permitAmount: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    transferAmount: PromiseOrValue<BigNumberish>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  permitTransferFromERC721(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permitTransferFromERC721(address,uint256,uint256,uint256,address,address,bytes)"(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  permitTransferFromWithAdditionalDataERC1155(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    permitAmount: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    transferAmount: PromiseOrValue<BigNumberish>,
    additionalData: PromiseOrValue<BytesLike>,
    advancedPermitHash: PromiseOrValue<BytesLike>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permitTransferFromWithAdditionalDataERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    permitAmount: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    transferAmount: PromiseOrValue<BigNumberish>,
    additionalData: PromiseOrValue<BytesLike>,
    advancedPermitHash: PromiseOrValue<BytesLike>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  permitTransferFromWithAdditionalDataERC20(
    token: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    permitAmount: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    transferAmount: PromiseOrValue<BigNumberish>,
    additionalData: PromiseOrValue<BytesLike>,
    advancedPermitHash: PromiseOrValue<BytesLike>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permitTransferFromWithAdditionalDataERC20(address,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"(
    token: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    permitAmount: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    transferAmount: PromiseOrValue<BigNumberish>,
    additionalData: PromiseOrValue<BytesLike>,
    advancedPermitHash: PromiseOrValue<BytesLike>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  permitTransferFromWithAdditionalDataERC721(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    additionalData: PromiseOrValue<BytesLike>,
    advancedPermitHash: PromiseOrValue<BytesLike>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permitTransferFromWithAdditionalDataERC721(address,uint256,uint256,uint256,address,address,bytes32,bytes32,bytes)"(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    additionalData: PromiseOrValue<BytesLike>,
    advancedPermitHash: PromiseOrValue<BytesLike>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerAdditionalDataHash(
    additionalDataTypeString: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "registerAdditionalDataHash(string)"(
    additionalDataTypeString: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFromERC1155(
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFromERC1155(address,address,address,uint256,uint256)"(
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFromERC20(
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFromERC20(address,address,address,uint256)"(
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFromERC721(
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFromERC721(address,address,address,uint256)"(
    owner: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateApprovalBySignature(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    approvalExpiration: PromiseOrValue<BigNumberish>,
    sigDeadline: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateApprovalBySignature(address,uint256,uint256,uint200,address,uint48,uint48,address,bytes)"(
    token: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    approvalExpiration: PromiseOrValue<BigNumberish>,
    sigDeadline: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    signedPermit: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "allowance(address,address,address,uint256,bytes32)"(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        allowedAmount: BigNumber;
        expiration: BigNumber;
      }
    >;

    "allowance(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        allowedAmount: BigNumber;
        expiration: BigNumber;
      }
    >;

    approve(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256,address,uint200,uint48)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    clearAllowance(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "clearAllowance(address,address,uint256)"(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closePermittedOrder(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "closePermittedOrder(address,address,uint256,bytes32)"(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<string>;

    "domainSeparatorV4()"(overrides?: CallOverrides): Promise<string>;

    fillPermittedOrderERC1155(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { quantityFilled: BigNumber; isError: boolean }
    >;

    "fillPermittedOrderERC1155(bytes,(uint256,uint256,uint256),address,uint256,address,address,uint256,uint48,bytes32,bytes32)"(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { quantityFilled: BigNumber; isError: boolean }
    >;

    fillPermittedOrderERC20(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { quantityFilled: BigNumber; isError: boolean }
    >;

    "fillPermittedOrderERC20(bytes,(uint256,uint256,uint256),address,address,address,uint256,uint48,bytes32,bytes32)"(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { quantityFilled: BigNumber; isError: boolean }
    >;

    invalidateUnorderedNonce(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "invalidateUnorderedNonce(uint256)"(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isRegisteredAdditionalDataHash(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRegisteredAdditionalDataHash(bytes32)"(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidUnorderedNonce(
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidUnorderedNonce(address,uint256)"(
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockdown(overrides?: CallOverrides): Promise<void>;

    "lockdown()"(overrides?: CallOverrides): Promise<void>;

    masterNonce(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "masterNonce(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permitBatchApprove(
      batch: IPearlmit.PermitBatchTransferFromStruct,
      hashedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitBatchApprove(((uint8,address,uint256,uint200,address)[],address,uint256,uint48,bytes,address,bytes32),bytes32)"(
      batch: IPearlmit.PermitBatchTransferFromStruct,
      hashedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    permitTransferFromERC1155(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "permitTransferFromERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    permitTransferFromERC20(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "permitTransferFromERC20(address,uint256,uint256,uint256,address,address,uint256,bytes)"(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    permitTransferFromERC721(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "permitTransferFromERC721(address,uint256,uint256,uint256,address,address,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    permitTransferFromWithAdditionalDataERC1155(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "permitTransferFromWithAdditionalDataERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    permitTransferFromWithAdditionalDataERC20(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "permitTransferFromWithAdditionalDataERC20(address,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    permitTransferFromWithAdditionalDataERC721(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "permitTransferFromWithAdditionalDataERC721(address,uint256,uint256,uint256,address,address,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerAdditionalDataHash(
      additionalDataTypeString: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerAdditionalDataHash(string)"(
      additionalDataTypeString: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromERC1155(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFromERC1155(address,address,address,uint256,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFromERC20(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFromERC20(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFromERC721(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFromERC721(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateApprovalBySignature(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approvalExpiration: PromiseOrValue<BigNumberish>,
      sigDeadline: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateApprovalBySignature(address,uint256,uint256,uint200,address,uint48,uint48,address,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approvalExpiration: PromiseOrValue<BigNumberish>,
      sigDeadline: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,address,uint256,uint200,uint48)"(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      id?: null,
      amount?: null,
      expiration?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      id?: null,
      amount?: null,
      expiration?: null
    ): ApprovalEventFilter;

    "Lockdown(address)"(
      owner?: PromiseOrValue<string> | null
    ): LockdownEventFilter;
    Lockdown(owner?: PromiseOrValue<string> | null): LockdownEventFilter;

    "OrderClosed(bytes32,address,address,bool)"(
      orderId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      wasCancellation?: null
    ): OrderClosedEventFilter;
    OrderClosed(
      orderId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      wasCancellation?: null
    ): OrderClosedEventFilter;

    "OrderFilled(bytes32,address,address,uint256)"(
      orderId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      amount?: null
    ): OrderFilledEventFilter;
    OrderFilled(
      orderId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      amount?: null
    ): OrderFilledEventFilter;

    "OrderOpened(bytes32,address,address,uint256)"(
      orderId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      fillableQuantity?: null
    ): OrderOpenedEventFilter;
    OrderOpened(
      orderId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      fillableQuantity?: null
    ): OrderOpenedEventFilter;

    "OrderRestored(bytes32,address,uint256)"(
      orderId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      amountRestoredToOrder?: null
    ): OrderRestoredEventFilter;
    OrderRestored(
      orderId?: PromiseOrValue<BytesLike> | null,
      owner?: PromiseOrValue<string> | null,
      amountRestoredToOrder?: null
    ): OrderRestoredEventFilter;
  };

  estimateGas: {
    "allowance(address,address,address,uint256,bytes32)"(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256,address,uint200,uint48)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearAllowance(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "clearAllowance(address,address,uint256)"(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closePermittedOrder(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "closePermittedOrder(address,address,uint256,bytes32)"(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<BigNumber>;

    "domainSeparatorV4()"(overrides?: CallOverrides): Promise<BigNumber>;

    fillPermittedOrderERC1155(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "fillPermittedOrderERC1155(bytes,(uint256,uint256,uint256),address,uint256,address,address,uint256,uint48,bytes32,bytes32)"(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillPermittedOrderERC20(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "fillPermittedOrderERC20(bytes,(uint256,uint256,uint256),address,address,address,uint256,uint48,bytes32,bytes32)"(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    invalidateUnorderedNonce(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "invalidateUnorderedNonce(uint256)"(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isRegisteredAdditionalDataHash(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRegisteredAdditionalDataHash(bytes32)"(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidUnorderedNonce(
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidUnorderedNonce(address,uint256)"(
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "lockdown()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    masterNonce(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "masterNonce(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permitBatchApprove(
      batch: IPearlmit.PermitBatchTransferFromStruct,
      hashedData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permitBatchApprove(((uint8,address,uint256,uint200,address)[],address,uint256,uint48,bytes,address,bytes32),bytes32)"(
      batch: IPearlmit.PermitBatchTransferFromStruct,
      hashedData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    permitTransferFromERC1155(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permitTransferFromERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    permitTransferFromERC20(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permitTransferFromERC20(address,uint256,uint256,uint256,address,address,uint256,bytes)"(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    permitTransferFromERC721(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permitTransferFromERC721(address,uint256,uint256,uint256,address,address,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    permitTransferFromWithAdditionalDataERC1155(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permitTransferFromWithAdditionalDataERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    permitTransferFromWithAdditionalDataERC20(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permitTransferFromWithAdditionalDataERC20(address,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    permitTransferFromWithAdditionalDataERC721(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permitTransferFromWithAdditionalDataERC721(address,uint256,uint256,uint256,address,address,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerAdditionalDataHash(
      additionalDataTypeString: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "registerAdditionalDataHash(string)"(
      additionalDataTypeString: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFromERC1155(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFromERC1155(address,address,address,uint256,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFromERC20(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFromERC20(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFromERC721(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFromERC721(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateApprovalBySignature(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approvalExpiration: PromiseOrValue<BigNumberish>,
      sigDeadline: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateApprovalBySignature(address,uint256,uint256,uint200,address,uint48,uint48,address,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approvalExpiration: PromiseOrValue<BigNumberish>,
      sigDeadline: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "allowance(address,address,address,uint256,bytes32)"(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256,address,uint200,uint48)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearAllowance(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "clearAllowance(address,address,uint256)"(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closePermittedOrder(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "closePermittedOrder(address,address,uint256,bytes32)"(
      owner: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domainSeparatorV4()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fillPermittedOrderERC1155(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "fillPermittedOrderERC1155(bytes,(uint256,uint256,uint256),address,uint256,address,address,uint256,uint48,bytes32,bytes32)"(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillPermittedOrderERC20(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "fillPermittedOrderERC20(bytes,(uint256,uint256,uint256),address,address,address,uint256,uint48,bytes32,bytes32)"(
      signedPermit: PromiseOrValue<BytesLike>,
      orderFillAmounts: OrderFillAmountsStruct,
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      orderId: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    invalidateUnorderedNonce(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "invalidateUnorderedNonce(uint256)"(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isRegisteredAdditionalDataHash(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRegisteredAdditionalDataHash(bytes32)"(
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidUnorderedNonce(
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidUnorderedNonce(address,uint256)"(
      owner: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "lockdown()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    masterNonce(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "masterNonce(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permitBatchApprove(
      batch: IPearlmit.PermitBatchTransferFromStruct,
      hashedData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permitBatchApprove(((uint8,address,uint256,uint200,address)[],address,uint256,uint48,bytes,address,bytes32),bytes32)"(
      batch: IPearlmit.PermitBatchTransferFromStruct,
      hashedData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    permitTransferFromERC1155(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permitTransferFromERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    permitTransferFromERC20(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permitTransferFromERC20(address,uint256,uint256,uint256,address,address,uint256,bytes)"(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    permitTransferFromERC721(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permitTransferFromERC721(address,uint256,uint256,uint256,address,address,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    permitTransferFromWithAdditionalDataERC1155(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permitTransferFromWithAdditionalDataERC1155(address,uint256,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    permitTransferFromWithAdditionalDataERC20(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permitTransferFromWithAdditionalDataERC20(address,uint256,uint256,uint256,address,address,uint256,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      permitAmount: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      transferAmount: PromiseOrValue<BigNumberish>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    permitTransferFromWithAdditionalDataERC721(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permitTransferFromWithAdditionalDataERC721(address,uint256,uint256,uint256,address,address,bytes32,bytes32,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      advancedPermitHash: PromiseOrValue<BytesLike>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerAdditionalDataHash(
      additionalDataTypeString: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "registerAdditionalDataHash(string)"(
      additionalDataTypeString: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFromERC1155(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFromERC1155(address,address,address,uint256,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFromERC20(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFromERC20(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFromERC721(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFromERC721(address,address,address,uint256)"(
      owner: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateApprovalBySignature(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approvalExpiration: PromiseOrValue<BigNumberish>,
      sigDeadline: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateApprovalBySignature(address,uint256,uint256,uint200,address,uint48,uint48,address,bytes)"(
      token: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      approvalExpiration: PromiseOrValue<BigNumberish>,
      sigDeadline: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      signedPermit: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
