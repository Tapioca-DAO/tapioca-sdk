/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFT__factory>;
    getContractFactory(
      name: "OFTCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFTCore__factory>;
    getContractFactory(
      name: "Cluster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cluster__factory>;
    getContractFactory(
      name: "AccessControlledOffchainAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlledOffchainAggregator__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "LzApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LzApp__factory>;
    getContractFactory(
      name: "NonblockingLzApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonblockingLzApp__factory>;
    getContractFactory(
      name: "ComposableBasedOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComposableBasedOFT__factory>;
    getContractFactory(
      name: "ComposableOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComposableOFT__factory>;
    getContractFactory(
      name: "ComposableOFTCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComposableOFTCore__factory>;
    getContractFactory(
      name: "ComposableProxyOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComposableProxyOFT__factory>;
    getContractFactory(
      name: "BasedOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasedOFT__factory>;
    getContractFactory(
      name: "GlobalCappedOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GlobalCappedOFT__factory>;
    getContractFactory(
      name: "NativeOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NativeOFT__factory>;
    getContractFactory(
      name: "PausableOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableOFT__factory>;
    getContractFactory(
      name: "ProxyOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyOFT__factory>;
    getContractFactory(
      name: "OFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFT__factory>;
    getContractFactory(
      name: "OFTCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFTCore__factory>;
    getContractFactory(
      name: "BaseOFTV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseOFTV2__factory>;
    getContractFactory(
      name: "BaseOFTWithFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseOFTWithFee__factory>;
    getContractFactory(
      name: "Fee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Fee__factory>;
    getContractFactory(
      name: "OFTWithFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFTWithFee__factory>;
    getContractFactory(
      name: "ProxyOFTWithFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyOFTWithFee__factory>;
    getContractFactory(
      name: "OFTCoreV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFTCoreV2__factory>;
    getContractFactory(
      name: "OFTV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFTV2__factory>;
    getContractFactory(
      name: "ProxyOFTV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyOFTV2__factory>;
    getContractFactory(
      name: "ProxyONFT1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyONFT1155__factory>;
    getContractFactory(
      name: "ProxyONFT721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyONFT721__factory>;
    getContractFactory(
      name: "UniversalONFT721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniversalONFT721__factory>;
    getContractFactory(
      name: "ONFT1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ONFT1155__factory>;
    getContractFactory(
      name: "ONFT1155Core",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ONFT1155Core__factory>;
    getContractFactory(
      name: "ONFT721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ONFT721__factory>;
    getContractFactory(
      name: "ONFT721Core",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ONFT721Core__factory>;
    getContractFactory(
      name: "BaseMagnetar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseMagnetar__factory>;
    getContractFactory(
      name: "Magnetar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Magnetar__factory>;
    getContractFactory(
      name: "MagnetarHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarHelper__factory>;
    getContractFactory(
      name: "MagnetarStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarStorage__factory>;
    getContractFactory(
      name: "MagnetarAssetCommonModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarAssetCommonModule__factory>;
    getContractFactory(
      name: "MagnetarAssetModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarAssetModule__factory>;
    getContractFactory(
      name: "MagnetarAssetXChainModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarAssetXChainModule__factory>;
    getContractFactory(
      name: "MagnetarBaseModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarBaseModule__factory>;
    getContractFactory(
      name: "MagnetarBaseModuleExternal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarBaseModuleExternal__factory>;
    getContractFactory(
      name: "MagnetarCollateralModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarCollateralModule__factory>;
    getContractFactory(
      name: "MagnetarMintCommonModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarMintCommonModule__factory>;
    getContractFactory(
      name: "MagnetarMintModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarMintModule__factory>;
    getContractFactory(
      name: "MagnetarMintXChainModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarMintXChainModule__factory>;
    getContractFactory(
      name: "MagnetarOptionModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarOptionModule__factory>;
    getContractFactory(
      name: "MagnetarYieldBoxModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MagnetarYieldBoxModule__factory>;
    getContractFactory(
      name: "SequencerFeedMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SequencerFeedMock__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlDefaultAdminRules",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlDefaultAdminRules__factory>;
    getContractFactory(
      name: "EthGlpOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthGlpOracle__factory>;
    getContractFactory(
      name: "GLPOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GLPOracle__factory>;
    getContractFactory(
      name: "TapOptionOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapOptionOracle__factory>;
    getContractFactory(
      name: "ModuleChainlinkMulti",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleChainlinkMulti__factory>;
    getContractFactory(
      name: "ModuleChainlinkSingle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleChainlinkSingle__factory>;
    getContractFactory(
      name: "ModuleUniswapMulti",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleUniswapMulti__factory>;
    getContractFactory(
      name: "OracleAbstract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleAbstract__factory>;
    getContractFactory(
      name: "OracleChainlinkMulti",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleChainlinkMulti__factory>;
    getContractFactory(
      name: "OracleChainlinkMultiEfficient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleChainlinkMultiEfficient__factory>;
    getContractFactory(
      name: "OracleChainlinkSingle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleChainlinkSingle__factory>;
    getContractFactory(
      name: "OracleMulti",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleMulti__factory>;
    getContractFactory(
      name: "OracleUniSolo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleUniSolo__factory>;
    getContractFactory(
      name: "Seer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Seer__factory>;
    getContractFactory(
      name: "SeerCLSolo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SeerCLSolo__factory>;
    getContractFactory(
      name: "SeerUniSolo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SeerUniSolo__factory>;
    getContractFactory(
      name: "ChainlinkUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkUtils__factory>;
    getContractFactory(
      name: "FunctionUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FunctionUtils__factory>;
    getContractFactory(
      name: "PausableMapUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableMapUpgradeable__factory>;
    getContractFactory(
      name: "SequencerCheck",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SequencerCheck__factory>;
    getContractFactory(
      name: "UniswapUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapUtils__factory>;
    getContractFactory(
      name: "Pearlmit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pearlmit__factory>;
    getContractFactory(
      name: "PearlmitHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PearlmitHandler__factory>;
    getContractFactory(
      name: "PearlmitHash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PearlmitHash__factory>;
    getContractFactory(
      name: "ZeroXSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZeroXSwapper__factory>;
    getContractFactory(
      name: "ForgeIERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForgeIERC20__factory>;
    getContractFactory(
      name: "TapiocaDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapiocaDeployer__factory>;
    getContractFactory(
      name: "TapiocaMulticall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapiocaMulticall__factory>;
    getContractFactory(
      name: "BaseTapiocaOmnichainEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseTapiocaOmnichainEngine__factory>;
    getContractFactory(
      name: "BaseToeMsgType",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseToeMsgType__factory>;
    getContractFactory(
      name: "TapiocaOmnichainEngineHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapiocaOmnichainEngineHelper__factory>;
    getContractFactory(
      name: "TapiocaOmnichainExtExec",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapiocaOmnichainExtExec__factory>;
    getContractFactory(
      name: "TapiocaOmnichainReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapiocaOmnichainReceiver__factory>;
    getContractFactory(
      name: "TapiocaOmnichainSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapiocaOmnichainSender__factory>;
    getContractFactory(
      name: "ERC721Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Permit__factory>;
    getContractFactory(
      name: "ModuleManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleManager__factory>;
    getContractFactory(
      name: "TapiocaDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapiocaDeployer__factory>;
    getContractFactory(
      name: "AccessControlledOffchainAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlledOffchainAggregator__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "PearlmitHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PearlmitHandler__factory>;
    getContractFactory(
      name: "BaseToeMsgType",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseToeMsgType__factory>;
    getContractFactory(
      name: "TapiocaOmnichainEngineHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapiocaOmnichainEngineHelper__factory>;
    getContractFactory(
      name: "ERC721Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Permit__factory>;

    getContractAt(
      name: "OFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFT>;
    getContractAt(
      name: "OFTCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFTCore>;
    getContractAt(
      name: "Cluster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cluster>;
    getContractAt(
      name: "AccessControlledOffchainAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlledOffchainAggregator>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "LzApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LzApp>;
    getContractAt(
      name: "NonblockingLzApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonblockingLzApp>;
    getContractAt(
      name: "ComposableBasedOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComposableBasedOFT>;
    getContractAt(
      name: "ComposableOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComposableOFT>;
    getContractAt(
      name: "ComposableOFTCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComposableOFTCore>;
    getContractAt(
      name: "ComposableProxyOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComposableProxyOFT>;
    getContractAt(
      name: "BasedOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasedOFT>;
    getContractAt(
      name: "GlobalCappedOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GlobalCappedOFT>;
    getContractAt(
      name: "NativeOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NativeOFT>;
    getContractAt(
      name: "PausableOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableOFT>;
    getContractAt(
      name: "ProxyOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyOFT>;
    getContractAt(
      name: "OFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFT>;
    getContractAt(
      name: "OFTCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFTCore>;
    getContractAt(
      name: "BaseOFTV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseOFTV2>;
    getContractAt(
      name: "BaseOFTWithFee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseOFTWithFee>;
    getContractAt(
      name: "Fee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Fee>;
    getContractAt(
      name: "OFTWithFee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFTWithFee>;
    getContractAt(
      name: "ProxyOFTWithFee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyOFTWithFee>;
    getContractAt(
      name: "OFTCoreV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFTCoreV2>;
    getContractAt(
      name: "OFTV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFTV2>;
    getContractAt(
      name: "ProxyOFTV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyOFTV2>;
    getContractAt(
      name: "ProxyONFT1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyONFT1155>;
    getContractAt(
      name: "ProxyONFT721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyONFT721>;
    getContractAt(
      name: "UniversalONFT721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniversalONFT721>;
    getContractAt(
      name: "ONFT1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ONFT1155>;
    getContractAt(
      name: "ONFT1155Core",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ONFT1155Core>;
    getContractAt(
      name: "ONFT721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ONFT721>;
    getContractAt(
      name: "ONFT721Core",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ONFT721Core>;
    getContractAt(
      name: "BaseMagnetar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseMagnetar>;
    getContractAt(
      name: "Magnetar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Magnetar>;
    getContractAt(
      name: "MagnetarHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarHelper>;
    getContractAt(
      name: "MagnetarStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarStorage>;
    getContractAt(
      name: "MagnetarAssetCommonModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarAssetCommonModule>;
    getContractAt(
      name: "MagnetarAssetModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarAssetModule>;
    getContractAt(
      name: "MagnetarAssetXChainModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarAssetXChainModule>;
    getContractAt(
      name: "MagnetarBaseModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarBaseModule>;
    getContractAt(
      name: "MagnetarBaseModuleExternal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarBaseModuleExternal>;
    getContractAt(
      name: "MagnetarCollateralModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarCollateralModule>;
    getContractAt(
      name: "MagnetarMintCommonModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarMintCommonModule>;
    getContractAt(
      name: "MagnetarMintModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarMintModule>;
    getContractAt(
      name: "MagnetarMintXChainModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarMintXChainModule>;
    getContractAt(
      name: "MagnetarOptionModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarOptionModule>;
    getContractAt(
      name: "MagnetarYieldBoxModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MagnetarYieldBoxModule>;
    getContractAt(
      name: "SequencerFeedMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SequencerFeedMock>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlDefaultAdminRules",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlDefaultAdminRules>;
    getContractAt(
      name: "EthGlpOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthGlpOracle>;
    getContractAt(
      name: "GLPOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GLPOracle>;
    getContractAt(
      name: "TapOptionOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapOptionOracle>;
    getContractAt(
      name: "ModuleChainlinkMulti",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleChainlinkMulti>;
    getContractAt(
      name: "ModuleChainlinkSingle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleChainlinkSingle>;
    getContractAt(
      name: "ModuleUniswapMulti",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleUniswapMulti>;
    getContractAt(
      name: "OracleAbstract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleAbstract>;
    getContractAt(
      name: "OracleChainlinkMulti",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleChainlinkMulti>;
    getContractAt(
      name: "OracleChainlinkMultiEfficient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleChainlinkMultiEfficient>;
    getContractAt(
      name: "OracleChainlinkSingle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleChainlinkSingle>;
    getContractAt(
      name: "OracleMulti",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleMulti>;
    getContractAt(
      name: "OracleUniSolo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleUniSolo>;
    getContractAt(
      name: "Seer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Seer>;
    getContractAt(
      name: "SeerCLSolo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SeerCLSolo>;
    getContractAt(
      name: "SeerUniSolo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SeerUniSolo>;
    getContractAt(
      name: "ChainlinkUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkUtils>;
    getContractAt(
      name: "FunctionUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FunctionUtils>;
    getContractAt(
      name: "PausableMapUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableMapUpgradeable>;
    getContractAt(
      name: "SequencerCheck",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SequencerCheck>;
    getContractAt(
      name: "UniswapUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapUtils>;
    getContractAt(
      name: "Pearlmit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pearlmit>;
    getContractAt(
      name: "PearlmitHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PearlmitHandler>;
    getContractAt(
      name: "PearlmitHash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PearlmitHash>;
    getContractAt(
      name: "ZeroXSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZeroXSwapper>;
    getContractAt(
      name: "ForgeIERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ForgeIERC20>;
    getContractAt(
      name: "TapiocaDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapiocaDeployer>;
    getContractAt(
      name: "TapiocaMulticall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapiocaMulticall>;
    getContractAt(
      name: "BaseTapiocaOmnichainEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseTapiocaOmnichainEngine>;
    getContractAt(
      name: "BaseToeMsgType",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseToeMsgType>;
    getContractAt(
      name: "TapiocaOmnichainEngineHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapiocaOmnichainEngineHelper>;
    getContractAt(
      name: "TapiocaOmnichainExtExec",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapiocaOmnichainExtExec>;
    getContractAt(
      name: "TapiocaOmnichainReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapiocaOmnichainReceiver>;
    getContractAt(
      name: "TapiocaOmnichainSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapiocaOmnichainSender>;
    getContractAt(
      name: "ERC721Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Permit>;
    getContractAt(
      name: "ModuleManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleManager>;
    getContractAt(
      name: "TapiocaDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapiocaDeployer>;
    getContractAt(
      name: "AccessControlledOffchainAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlledOffchainAggregator>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "PearlmitHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PearlmitHandler>;
    getContractAt(
      name: "BaseToeMsgType",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseToeMsgType>;
    getContractAt(
      name: "TapiocaOmnichainEngineHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapiocaOmnichainEngineHelper>;
    getContractAt(
      name: "ERC721Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Permit>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
