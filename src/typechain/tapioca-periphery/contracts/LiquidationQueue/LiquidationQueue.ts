/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ILiquidationQueue {
  export type BidderStruct = {
    isUsdo: PromiseOrValue<boolean>;
    swapOnExecute: PromiseOrValue<boolean>;
    usdoAmount: PromiseOrValue<BigNumberish>;
    liquidatedAssetAmount: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type BidderStructOutput = [
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    isUsdo: boolean;
    swapOnExecute: boolean;
    usdoAmount: BigNumber;
    liquidatedAssetAmount: BigNumber;
    timestamp: BigNumber;
  };

  export type OrderBookPoolEntryStruct = {
    bidder: PromiseOrValue<string>;
    bidInfo: ILiquidationQueue.BidderStruct;
  };

  export type OrderBookPoolEntryStructOutput = [
    string,
    ILiquidationQueue.BidderStructOutput
  ] & { bidder: string; bidInfo: ILiquidationQueue.BidderStructOutput };

  export type LiquidationQueueMetaStruct = {
    activationTime: PromiseOrValue<BigNumberish>;
    minBidAmount: PromiseOrValue<BigNumberish>;
    feeCollector: PromiseOrValue<string>;
    bidExecutionSwapper: PromiseOrValue<string>;
    usdoSwapper: PromiseOrValue<string>;
  };

  export type LiquidationQueueMetaStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    activationTime: BigNumber;
    minBidAmount: BigNumber;
    feeCollector: string;
    bidExecutionSwapper: string;
    usdoSwapper: string;
  };
}

export interface LiquidationQueueInterface extends utils.Interface {
  functions: {
    "activateBid(address,uint256)": FunctionFragment;
    "balancesDue(address)": FunctionFragment;
    "bid(address,uint256,uint256)": FunctionFragment;
    "bidPools(uint256)": FunctionFragment;
    "bidWithStable(address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "executeBids(uint256,bytes)": FunctionFragment;
    "getBidPoolUserInfo(uint256,address)": FunctionFragment;
    "getNextAvailBidPool()": FunctionFragment;
    "getOrderBookPoolEntries(uint256)": FunctionFragment;
    "getOrderBookSize(uint256)": FunctionFragment;
    "init((uint256,uint256,address,address,address),address)": FunctionFragment;
    "liquidatedAssetId()": FunctionFragment;
    "liquidationQueueMeta()": FunctionFragment;
    "lqAssetId()": FunctionFragment;
    "market()": FunctionFragment;
    "marketAssetId()": FunctionFragment;
    "onlyOnce()": FunctionFragment;
    "orderBookEntries(uint256,uint256)": FunctionFragment;
    "orderBookInfos(uint256)": FunctionFragment;
    "penrose()": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "removeBid(address,uint256)": FunctionFragment;
    "setBidExecutionSwapper(address)": FunctionFragment;
    "setUsdoSwapper(address)": FunctionFragment;
    "singularity()": FunctionFragment;
    "userBidIndexLength(address,uint256)": FunctionFragment;
    "userBidIndexes(address,uint256,uint256)": FunctionFragment;
    "yieldBox()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateBid"
      | "activateBid(address,uint256)"
      | "balancesDue"
      | "balancesDue(address)"
      | "bid"
      | "bid(address,uint256,uint256)"
      | "bidPools"
      | "bidPools(uint256)"
      | "bidWithStable"
      | "bidWithStable(address,uint256,uint256,uint256,bytes)"
      | "executeBids"
      | "executeBids(uint256,bytes)"
      | "getBidPoolUserInfo"
      | "getBidPoolUserInfo(uint256,address)"
      | "getNextAvailBidPool"
      | "getNextAvailBidPool()"
      | "getOrderBookPoolEntries"
      | "getOrderBookPoolEntries(uint256)"
      | "getOrderBookSize"
      | "getOrderBookSize(uint256)"
      | "init"
      | "init((uint256,uint256,address,address,address),address)"
      | "liquidatedAssetId"
      | "liquidatedAssetId()"
      | "liquidationQueueMeta"
      | "liquidationQueueMeta()"
      | "lqAssetId"
      | "lqAssetId()"
      | "market"
      | "market()"
      | "marketAssetId"
      | "marketAssetId()"
      | "onlyOnce"
      | "onlyOnce()"
      | "orderBookEntries"
      | "orderBookEntries(uint256,uint256)"
      | "orderBookInfos"
      | "orderBookInfos(uint256)"
      | "penrose"
      | "penrose()"
      | "redeem"
      | "redeem(address)"
      | "removeBid"
      | "removeBid(address,uint256)"
      | "setBidExecutionSwapper"
      | "setBidExecutionSwapper(address)"
      | "setUsdoSwapper"
      | "setUsdoSwapper(address)"
      | "singularity"
      | "singularity()"
      | "userBidIndexLength"
      | "userBidIndexLength(address,uint256)"
      | "userBidIndexes"
      | "userBidIndexes(address,uint256,uint256)"
      | "yieldBox"
      | "yieldBox()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateBid",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "activateBid(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balancesDue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balancesDue(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bid(address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bidPools",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bidPools(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bidWithStable",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bidWithStable(address,uint256,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBids",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBids(uint256,bytes)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidPoolUserInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidPoolUserInfo(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextAvailBidPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextAvailBidPool()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBookPoolEntries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBookPoolEntries(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBookSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBookSize(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      ILiquidationQueue.LiquidationQueueMetaStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "init((uint256,uint256,address,address,address),address)",
    values: [
      ILiquidationQueue.LiquidationQueueMetaStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatedAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatedAssetId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationQueueMeta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationQueueMeta()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lqAssetId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lqAssetId()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(functionFragment: "market()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketAssetId()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "onlyOnce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onlyOnce()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderBookEntries",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderBookEntries(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderBookInfos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderBookInfos(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "penrose", values?: undefined): string;
  encodeFunctionData(functionFragment: "penrose()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBid",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBid(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBidExecutionSwapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBidExecutionSwapper(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdoSwapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdoSwapper(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "singularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "singularity()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userBidIndexLength",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userBidIndexLength(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userBidIndexes",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userBidIndexes(address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yieldBox()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activateBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateBid(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancesDue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancesDue(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bid(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bidPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidPools(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidWithStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidWithStable(address,uint256,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBids(uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidPoolUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidPoolUserInfo(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextAvailBidPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextAvailBidPool()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBookPoolEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBookPoolEntries(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBookSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBookSize(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "init((uint256,uint256,address,address,address),address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatedAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatedAssetId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationQueueMeta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationQueueMeta()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lqAssetId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lqAssetId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketAssetId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onlyOnce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onlyOnce()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderBookEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderBookEntries(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderBookInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderBookInfos(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "penrose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "penrose()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeem(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBid(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBidExecutionSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBidExecutionSwapper(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdoSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdoSwapper(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularity()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBidIndexLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBidIndexLength(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBidIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBidIndexes(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldBox()", data: BytesLike): Result;

  events: {
    "ActivateBid(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Bid(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "BidSwapperUpdated(address,address)": EventFragment;
    "ExecuteBids(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Redeem(address,address,uint256)": EventFragment;
    "RemoveBid(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "UsdoSwapperUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivateBid"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ActivateBid(address,address,uint256,uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Bid(address,address,uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidSwapperUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BidSwapperUpdated(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteBids"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExecuteBids(address,uint256,uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Redeem(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveBid"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveBid(address,address,uint256,uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsdoSwapperUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UsdoSwapperUpdated(address,address)"
  ): EventFragment;
}

export interface ActivateBidEventObject {
  caller: string;
  bidder: string;
  pool: BigNumber;
  usdoAmount: BigNumber;
  liquidatedAssetAmount: BigNumber;
  collateralValue: BigNumber;
  timestamp: BigNumber;
}
export type ActivateBidEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  ActivateBidEventObject
>;

export type ActivateBidEventFilter = TypedEventFilter<ActivateBidEvent>;

export interface BidEventObject {
  caller: string;
  bidder: string;
  pool: BigNumber;
  usdoAmount: BigNumber;
  liquidatedAssetAmount: BigNumber;
  timestamp: BigNumber;
}
export type BidEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  BidEventObject
>;

export type BidEventFilter = TypedEventFilter<BidEvent>;

export interface BidSwapperUpdatedEventObject {
  _old: string;
  _new: string;
}
export type BidSwapperUpdatedEvent = TypedEvent<
  [string, string],
  BidSwapperUpdatedEventObject
>;

export type BidSwapperUpdatedEventFilter =
  TypedEventFilter<BidSwapperUpdatedEvent>;

export interface ExecuteBidsEventObject {
  caller: string;
  pool: BigNumber;
  usdoAmountExecuted: BigNumber;
  liquidatedAssetAmountExecuted: BigNumber;
  collateralLiquidated: BigNumber;
  timestamp: BigNumber;
}
export type ExecuteBidsEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  ExecuteBidsEventObject
>;

export type ExecuteBidsEventFilter = TypedEventFilter<ExecuteBidsEvent>;

export interface RedeemEventObject {
  redeemer: string;
  to: string;
  amount: BigNumber;
}
export type RedeemEvent = TypedEvent<
  [string, string, BigNumber],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface RemoveBidEventObject {
  caller: string;
  bidder: string;
  pool: BigNumber;
  usdoAmount: BigNumber;
  liquidatedAssetAmount: BigNumber;
  collateralValue: BigNumber;
  timestamp: BigNumber;
}
export type RemoveBidEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  RemoveBidEventObject
>;

export type RemoveBidEventFilter = TypedEventFilter<RemoveBidEvent>;

export interface UsdoSwapperUpdatedEventObject {
  _old: string;
  _new: string;
}
export type UsdoSwapperUpdatedEvent = TypedEvent<
  [string, string],
  UsdoSwapperUpdatedEventObject
>;

export type UsdoSwapperUpdatedEventFilter =
  TypedEventFilter<UsdoSwapperUpdatedEvent>;

export interface LiquidationQueue extends BaseContract {
  contractName: "LiquidationQueue";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidationQueueInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "activateBid(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balancesDue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balancesDue(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "bid(address,uint256,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bidPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalAmount: BigNumber }>;

    "bidPools(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalAmount: BigNumber }>;

    bidWithStable(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      stableAssetId: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "bidWithStable(address,uint256,uint256,uint256,bytes)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      stableAssetId: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "executeBids(uint256,bytes)"(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBidPoolUserInfo(
      pool: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ILiquidationQueue.BidderStructOutput]>;

    "getBidPoolUserInfo(uint256,address)"(
      pool: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ILiquidationQueue.BidderStructOutput]>;

    getNextAvailBidPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        i: BigNumber;
        available: boolean;
        totalAmount: BigNumber;
      }
    >;

    "getNextAvailBidPool()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        i: BigNumber;
        available: boolean;
        totalAmount: BigNumber;
      }
    >;

    getOrderBookPoolEntries(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ILiquidationQueue.OrderBookPoolEntryStructOutput[]] & {
        x: ILiquidationQueue.OrderBookPoolEntryStructOutput[];
      }
    >;

    "getOrderBookPoolEntries(uint256)"(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ILiquidationQueue.OrderBookPoolEntryStructOutput[]] & {
        x: ILiquidationQueue.OrderBookPoolEntryStructOutput[];
      }
    >;

    getOrderBookSize(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { size: BigNumber }>;

    "getOrderBookSize(uint256)"(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { size: BigNumber }>;

    init(
      _liquidationQueueMeta: ILiquidationQueue.LiquidationQueueMetaStruct,
      _singularity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "init((uint256,uint256,address,address,address),address)"(
      _liquidationQueueMeta: ILiquidationQueue.LiquidationQueueMetaStruct,
      _singularity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidatedAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidatedAssetId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationQueueMeta(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        activationTime: BigNumber;
        minBidAmount: BigNumber;
        feeCollector: string;
        bidExecutionSwapper: string;
        usdoSwapper: string;
      }
    >;

    "liquidationQueueMeta()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        activationTime: BigNumber;
        minBidAmount: BigNumber;
        feeCollector: string;
        bidExecutionSwapper: string;
        usdoSwapper: string;
      }
    >;

    lqAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lqAssetId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    market(overrides?: CallOverrides): Promise<[string]>;

    "market()"(overrides?: CallOverrides): Promise<[string]>;

    marketAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "marketAssetId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    onlyOnce(overrides?: CallOverrides): Promise<[boolean]>;

    "onlyOnce()"(overrides?: CallOverrides): Promise<[boolean]>;

    orderBookEntries(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, ILiquidationQueue.BidderStructOutput] & {
        bidder: string;
        bidInfo: ILiquidationQueue.BidderStructOutput;
      }
    >;

    "orderBookEntries(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, ILiquidationQueue.BidderStructOutput] & {
        bidder: string;
        bidInfo: ILiquidationQueue.BidderStructOutput;
      }
    >;

    orderBookInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        poolId: number;
        nextBidPull: number;
        nextBidPush: number;
      }
    >;

    "orderBookInfos(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        poolId: number;
        nextBidPull: number;
        nextBidPush: number;
      }
    >;

    penrose(overrides?: CallOverrides): Promise<[string]>;

    "penrose()"(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "redeem(address)"(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeBid(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBidExecutionSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBidExecutionSwapper(address)"(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUsdoSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUsdoSwapper(address)"(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    singularity(overrides?: CallOverrides): Promise<[string]>;

    "singularity()"(overrides?: CallOverrides): Promise<[string]>;

    userBidIndexLength(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { len: BigNumber }>;

    "userBidIndexLength(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { len: BigNumber }>;

    userBidIndexes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userBidIndexes(address,uint256,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;

    "yieldBox()"(overrides?: CallOverrides): Promise<[string]>;
  };

  activateBid(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "activateBid(address,uint256)"(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balancesDue(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balancesDue(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bid(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "bid(address,uint256,uint256)"(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bidPools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "bidPools(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bidWithStable(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    stableAssetId: PromiseOrValue<BigNumberish>,
    amountIn: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "bidWithStable(address,uint256,uint256,uint256,bytes)"(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    stableAssetId: PromiseOrValue<BigNumberish>,
    amountIn: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeBids(
    collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
    swapData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "executeBids(uint256,bytes)"(
    collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
    swapData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBidPoolUserInfo(
    pool: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ILiquidationQueue.BidderStructOutput>;

  "getBidPoolUserInfo(uint256,address)"(
    pool: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ILiquidationQueue.BidderStructOutput>;

  getNextAvailBidPool(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      i: BigNumber;
      available: boolean;
      totalAmount: BigNumber;
    }
  >;

  "getNextAvailBidPool()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      i: BigNumber;
      available: boolean;
      totalAmount: BigNumber;
    }
  >;

  getOrderBookPoolEntries(
    pool: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILiquidationQueue.OrderBookPoolEntryStructOutput[]>;

  "getOrderBookPoolEntries(uint256)"(
    pool: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILiquidationQueue.OrderBookPoolEntryStructOutput[]>;

  getOrderBookSize(
    pool: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOrderBookSize(uint256)"(
    pool: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    _liquidationQueueMeta: ILiquidationQueue.LiquidationQueueMetaStruct,
    _singularity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "init((uint256,uint256,address,address,address),address)"(
    _liquidationQueueMeta: ILiquidationQueue.LiquidationQueueMetaStruct,
    _singularity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidatedAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidatedAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationQueueMeta(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string] & {
      activationTime: BigNumber;
      minBidAmount: BigNumber;
      feeCollector: string;
      bidExecutionSwapper: string;
      usdoSwapper: string;
    }
  >;

  "liquidationQueueMeta()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string] & {
      activationTime: BigNumber;
      minBidAmount: BigNumber;
      feeCollector: string;
      bidExecutionSwapper: string;
      usdoSwapper: string;
    }
  >;

  lqAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  "lqAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

  market(overrides?: CallOverrides): Promise<string>;

  "market()"(overrides?: CallOverrides): Promise<string>;

  marketAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  "marketAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

  onlyOnce(overrides?: CallOverrides): Promise<boolean>;

  "onlyOnce()"(overrides?: CallOverrides): Promise<boolean>;

  orderBookEntries(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, ILiquidationQueue.BidderStructOutput] & {
      bidder: string;
      bidInfo: ILiquidationQueue.BidderStructOutput;
    }
  >;

  "orderBookEntries(uint256,uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, ILiquidationQueue.BidderStructOutput] & {
      bidder: string;
      bidInfo: ILiquidationQueue.BidderStructOutput;
    }
  >;

  orderBookInfos(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      poolId: number;
      nextBidPull: number;
      nextBidPush: number;
    }
  >;

  "orderBookInfos(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      poolId: number;
      nextBidPull: number;
      nextBidPush: number;
    }
  >;

  penrose(overrides?: CallOverrides): Promise<string>;

  "penrose()"(overrides?: CallOverrides): Promise<string>;

  redeem(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "redeem(address)"(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeBid(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeBid(address,uint256)"(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBidExecutionSwapper(
    _swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBidExecutionSwapper(address)"(
    _swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUsdoSwapper(
    _swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUsdoSwapper(address)"(
    _swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  singularity(overrides?: CallOverrides): Promise<string>;

  "singularity()"(overrides?: CallOverrides): Promise<string>;

  userBidIndexLength(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userBidIndexLength(address,uint256)"(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userBidIndexes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userBidIndexes(address,uint256,uint256)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  "yieldBox()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    activateBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "activateBid(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balancesDue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balancesDue(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "bid(address,uint256,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bidPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bidPools(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidWithStable(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      stableAssetId: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "bidWithStable(address,uint256,uint256,uint256,bytes)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      stableAssetId: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalAmountExecuted: BigNumber;
        totalCollateralLiquidated: BigNumber;
      }
    >;

    "executeBids(uint256,bytes)"(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalAmountExecuted: BigNumber;
        totalCollateralLiquidated: BigNumber;
      }
    >;

    getBidPoolUserInfo(
      pool: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ILiquidationQueue.BidderStructOutput>;

    "getBidPoolUserInfo(uint256,address)"(
      pool: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ILiquidationQueue.BidderStructOutput>;

    getNextAvailBidPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        i: BigNumber;
        available: boolean;
        totalAmount: BigNumber;
      }
    >;

    "getNextAvailBidPool()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        i: BigNumber;
        available: boolean;
        totalAmount: BigNumber;
      }
    >;

    getOrderBookPoolEntries(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILiquidationQueue.OrderBookPoolEntryStructOutput[]>;

    "getOrderBookPoolEntries(uint256)"(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILiquidationQueue.OrderBookPoolEntryStructOutput[]>;

    getOrderBookSize(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrderBookSize(uint256)"(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _liquidationQueueMeta: ILiquidationQueue.LiquidationQueueMetaStruct,
      _singularity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "init((uint256,uint256,address,address,address),address)"(
      _liquidationQueueMeta: ILiquidationQueue.LiquidationQueueMetaStruct,
      _singularity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatedAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidatedAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationQueueMeta(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        activationTime: BigNumber;
        minBidAmount: BigNumber;
        feeCollector: string;
        bidExecutionSwapper: string;
        usdoSwapper: string;
      }
    >;

    "liquidationQueueMeta()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        activationTime: BigNumber;
        minBidAmount: BigNumber;
        feeCollector: string;
        bidExecutionSwapper: string;
        usdoSwapper: string;
      }
    >;

    lqAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "lqAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<string>;

    "market()"(overrides?: CallOverrides): Promise<string>;

    marketAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "marketAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOnce(overrides?: CallOverrides): Promise<boolean>;

    "onlyOnce()"(overrides?: CallOverrides): Promise<boolean>;

    orderBookEntries(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, ILiquidationQueue.BidderStructOutput] & {
        bidder: string;
        bidInfo: ILiquidationQueue.BidderStructOutput;
      }
    >;

    "orderBookEntries(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, ILiquidationQueue.BidderStructOutput] & {
        bidder: string;
        bidInfo: ILiquidationQueue.BidderStructOutput;
      }
    >;

    orderBookInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        poolId: number;
        nextBidPull: number;
        nextBidPush: number;
      }
    >;

    "orderBookInfos(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        poolId: number;
        nextBidPull: number;
        nextBidPush: number;
      }
    >;

    penrose(overrides?: CallOverrides): Promise<string>;

    "penrose()"(overrides?: CallOverrides): Promise<string>;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeem(address)"(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeBid(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBidExecutionSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBidExecutionSwapper(address)"(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsdoSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUsdoSwapper(address)"(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    singularity(overrides?: CallOverrides): Promise<string>;

    "singularity()"(overrides?: CallOverrides): Promise<string>;

    userBidIndexLength(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBidIndexLength(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBidIndexes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBidIndexes(address,uint256,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<string>;

    "yieldBox()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ActivateBid(address,address,uint256,uint256,uint256,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      usdoAmount?: null,
      liquidatedAssetAmount?: null,
      collateralValue?: null,
      timestamp?: null
    ): ActivateBidEventFilter;
    ActivateBid(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      usdoAmount?: null,
      liquidatedAssetAmount?: null,
      collateralValue?: null,
      timestamp?: null
    ): ActivateBidEventFilter;

    "Bid(address,address,uint256,uint256,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      usdoAmount?: null,
      liquidatedAssetAmount?: null,
      timestamp?: null
    ): BidEventFilter;
    Bid(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      usdoAmount?: null,
      liquidatedAssetAmount?: null,
      timestamp?: null
    ): BidEventFilter;

    "BidSwapperUpdated(address,address)"(
      _old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): BidSwapperUpdatedEventFilter;
    BidSwapperUpdated(
      _old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): BidSwapperUpdatedEventFilter;

    "ExecuteBids(address,uint256,uint256,uint256,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      usdoAmountExecuted?: null,
      liquidatedAssetAmountExecuted?: null,
      collateralLiquidated?: null,
      timestamp?: null
    ): ExecuteBidsEventFilter;
    ExecuteBids(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      usdoAmountExecuted?: null,
      liquidatedAssetAmountExecuted?: null,
      collateralLiquidated?: null,
      timestamp?: null
    ): ExecuteBidsEventFilter;

    "Redeem(address,address,uint256)"(
      redeemer?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RedeemEventFilter;
    Redeem(
      redeemer?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): RedeemEventFilter;

    "RemoveBid(address,address,uint256,uint256,uint256,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      usdoAmount?: null,
      liquidatedAssetAmount?: null,
      collateralValue?: null,
      timestamp?: null
    ): RemoveBidEventFilter;
    RemoveBid(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      usdoAmount?: null,
      liquidatedAssetAmount?: null,
      collateralValue?: null,
      timestamp?: null
    ): RemoveBidEventFilter;

    "UsdoSwapperUpdated(address,address)"(
      _old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): UsdoSwapperUpdatedEventFilter;
    UsdoSwapperUpdated(
      _old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): UsdoSwapperUpdatedEventFilter;
  };

  estimateGas: {
    activateBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "activateBid(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balancesDue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balancesDue(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "bid(address,uint256,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bidPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bidPools(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidWithStable(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      stableAssetId: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "bidWithStable(address,uint256,uint256,uint256,bytes)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      stableAssetId: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "executeBids(uint256,bytes)"(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBidPoolUserInfo(
      pool: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBidPoolUserInfo(uint256,address)"(
      pool: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextAvailBidPool(overrides?: CallOverrides): Promise<BigNumber>;

    "getNextAvailBidPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderBookPoolEntries(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrderBookPoolEntries(uint256)"(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBookSize(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrderBookSize(uint256)"(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _liquidationQueueMeta: ILiquidationQueue.LiquidationQueueMetaStruct,
      _singularity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "init((uint256,uint256,address,address,address),address)"(
      _liquidationQueueMeta: ILiquidationQueue.LiquidationQueueMetaStruct,
      _singularity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidatedAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidatedAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationQueueMeta(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationQueueMeta()"(overrides?: CallOverrides): Promise<BigNumber>;

    lqAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "lqAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    "market()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    "marketAssetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOnce(overrides?: CallOverrides): Promise<BigNumber>;

    "onlyOnce()"(overrides?: CallOverrides): Promise<BigNumber>;

    orderBookEntries(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "orderBookEntries(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderBookInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "orderBookInfos(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penrose(overrides?: CallOverrides): Promise<BigNumber>;

    "penrose()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "redeem(address)"(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeBid(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBidExecutionSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBidExecutionSwapper(address)"(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUsdoSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUsdoSwapper(address)"(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    singularity(overrides?: CallOverrides): Promise<BigNumber>;

    "singularity()"(overrides?: CallOverrides): Promise<BigNumber>;

    userBidIndexLength(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBidIndexLength(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBidIndexes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userBidIndexes(address,uint256,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;

    "yieldBox()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activateBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "activateBid(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balancesDue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balancesDue(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "bid(address,uint256,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bidPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bidPools(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidWithStable(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      stableAssetId: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "bidWithStable(address,uint256,uint256,uint256,bytes)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      stableAssetId: PromiseOrValue<BigNumberish>,
      amountIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "executeBids(uint256,bytes)"(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBidPoolUserInfo(
      pool: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBidPoolUserInfo(uint256,address)"(
      pool: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextAvailBidPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNextAvailBidPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBookPoolEntries(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrderBookPoolEntries(uint256)"(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBookSize(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrderBookSize(uint256)"(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _liquidationQueueMeta: ILiquidationQueue.LiquidationQueueMetaStruct,
      _singularity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "init((uint256,uint256,address,address,address),address)"(
      _liquidationQueueMeta: ILiquidationQueue.LiquidationQueueMetaStruct,
      _singularity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidatedAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidatedAssetId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationQueueMeta(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationQueueMeta()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lqAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lqAssetId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "market()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketAssetId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyOnce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "onlyOnce()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderBookEntries(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orderBookEntries(uint256,uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderBookInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orderBookInfos(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    penrose(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "penrose()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "redeem(address)"(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeBid(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBidExecutionSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBidExecutionSwapper(address)"(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUsdoSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUsdoSwapper(address)"(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    singularity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "singularity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userBidIndexLength(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBidIndexLength(address,uint256)"(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBidIndexes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userBidIndexes(address,uint256,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yieldBox()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
