/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type RebaseStruct = {
  elastic: PromiseOrValue<BigNumberish>;
  base: PromiseOrValue<BigNumberish>;
};

export type RebaseStructOutput = [BigNumber, BigNumber] & {
  elastic: BigNumber;
  base: BigNumber;
};

export declare namespace MagnetarHelper {
  export type MarketInfoStruct = {
    collateral: PromiseOrValue<string>;
    collateralId: PromiseOrValue<BigNumberish>;
    asset: PromiseOrValue<string>;
    assetId: PromiseOrValue<BigNumberish>;
    oracle: PromiseOrValue<string>;
    oracleData: PromiseOrValue<BytesLike>;
    totalCollateralShare: PromiseOrValue<BigNumberish>;
    userCollateralShare: PromiseOrValue<BigNumberish>;
    totalBorrow: RebaseStruct;
    userBorrowPart: PromiseOrValue<BigNumberish>;
    currentExchangeRate: PromiseOrValue<BigNumberish>;
    spotExchangeRate: PromiseOrValue<BigNumberish>;
    oracleExchangeRate: PromiseOrValue<BigNumberish>;
    totalBorrowCap: PromiseOrValue<BigNumberish>;
    totalYieldBoxCollateralShare: PromiseOrValue<BigNumberish>;
    totalYieldBoxCollateralAmount: PromiseOrValue<BigNumberish>;
    totalYieldBoxAssetShare: PromiseOrValue<BigNumberish>;
    totalYieldBoxAssetAmount: PromiseOrValue<BigNumberish>;
    yieldBoxCollateralTokenType: PromiseOrValue<BigNumberish>;
    yieldBoxCollateralContractAddress: PromiseOrValue<string>;
    yieldBoxCollateralStrategyAddress: PromiseOrValue<string>;
    yieldBoxCollateralTokenId: PromiseOrValue<BigNumberish>;
    yieldBoxAssetTokenType: PromiseOrValue<BigNumberish>;
    yieldBoxAssetContractAddress: PromiseOrValue<string>;
    yieldBoxAssetStrategyAddress: PromiseOrValue<string>;
    yieldBoxAssetTokenId: PromiseOrValue<BigNumberish>;
    collateralizationRate: PromiseOrValue<BigNumberish>;
  };

  export type MarketInfoStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    RebaseStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    BigNumber,
    number,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    collateral: string;
    collateralId: BigNumber;
    asset: string;
    assetId: BigNumber;
    oracle: string;
    oracleData: string;
    totalCollateralShare: BigNumber;
    userCollateralShare: BigNumber;
    totalBorrow: RebaseStructOutput;
    userBorrowPart: BigNumber;
    currentExchangeRate: BigNumber;
    spotExchangeRate: BigNumber;
    oracleExchangeRate: BigNumber;
    totalBorrowCap: BigNumber;
    totalYieldBoxCollateralShare: BigNumber;
    totalYieldBoxCollateralAmount: BigNumber;
    totalYieldBoxAssetShare: BigNumber;
    totalYieldBoxAssetAmount: BigNumber;
    yieldBoxCollateralTokenType: number;
    yieldBoxCollateralContractAddress: string;
    yieldBoxCollateralStrategyAddress: string;
    yieldBoxCollateralTokenId: BigNumber;
    yieldBoxAssetTokenType: number;
    yieldBoxAssetContractAddress: string;
    yieldBoxAssetStrategyAddress: string;
    yieldBoxAssetTokenId: BigNumber;
    collateralizationRate: BigNumber;
  };

  export type BigBangInfoStruct = {
    market: MagnetarHelper.MarketInfoStruct;
    accrueInfo: IBigBang.AccrueInfoStruct;
    minDebtRate: PromiseOrValue<BigNumberish>;
    maxDebtRate: PromiseOrValue<BigNumberish>;
    debtRateAgainstEthMarket: PromiseOrValue<BigNumberish>;
    mainBBMarket: PromiseOrValue<string>;
    mainBBDebtRate: PromiseOrValue<BigNumberish>;
    currentDebtRate: PromiseOrValue<BigNumberish>;
  };

  export type BigBangInfoStructOutput = [
    MagnetarHelper.MarketInfoStructOutput,
    IBigBang.AccrueInfoStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    market: MagnetarHelper.MarketInfoStructOutput;
    accrueInfo: IBigBang.AccrueInfoStructOutput;
    minDebtRate: BigNumber;
    maxDebtRate: BigNumber;
    debtRateAgainstEthMarket: BigNumber;
    mainBBMarket: string;
    mainBBDebtRate: BigNumber;
    currentDebtRate: BigNumber;
  };

  export type SingularityInfoStruct = {
    market: MagnetarHelper.MarketInfoStruct;
    totalAsset: RebaseStruct;
    userAssetFraction: PromiseOrValue<BigNumberish>;
    accrueInfo: ISingularity.AccrueInfoStruct;
    utilization: PromiseOrValue<BigNumberish>;
    minimumTargetUtilization: PromiseOrValue<BigNumberish>;
    maximumTargetUtilization: PromiseOrValue<BigNumberish>;
    minimumInterestPerSecond: PromiseOrValue<BigNumberish>;
    maximumInterestPerSecond: PromiseOrValue<BigNumberish>;
    interestElasticity: PromiseOrValue<BigNumberish>;
    startingInterestPerSecond: PromiseOrValue<BigNumberish>;
  };

  export type SingularityInfoStructOutput = [
    MagnetarHelper.MarketInfoStructOutput,
    RebaseStructOutput,
    BigNumber,
    ISingularity.AccrueInfoStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    market: MagnetarHelper.MarketInfoStructOutput;
    totalAsset: RebaseStructOutput;
    userAssetFraction: BigNumber;
    accrueInfo: ISingularity.AccrueInfoStructOutput;
    utilization: BigNumber;
    minimumTargetUtilization: BigNumber;
    maximumTargetUtilization: BigNumber;
    minimumInterestPerSecond: BigNumber;
    maximumInterestPerSecond: BigNumber;
    interestElasticity: BigNumber;
    startingInterestPerSecond: BigNumber;
  };
}

export declare namespace IBigBang {
  export type AccrueInfoStruct = {
    debtRate: PromiseOrValue<BigNumberish>;
    lastAccrued: PromiseOrValue<BigNumberish>;
  };

  export type AccrueInfoStructOutput = [BigNumber, BigNumber] & {
    debtRate: BigNumber;
    lastAccrued: BigNumber;
  };
}

export declare namespace ISingularity {
  export type AccrueInfoStruct = {
    interestPerSecond: PromiseOrValue<BigNumberish>;
    lastAccrued: PromiseOrValue<BigNumberish>;
    feesEarnedFraction: PromiseOrValue<BigNumberish>;
  };

  export type AccrueInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    interestPerSecond: BigNumber;
    lastAccrued: BigNumber;
    feesEarnedFraction: BigNumber;
  };
}

export interface MagnetarHelperInterface extends utils.Interface {
  functions: {
    "bigBangMarketInfo(address,address[])": FunctionFragment;
    "getAmountForAssetFraction(address,uint256)": FunctionFragment;
    "getAmountForBorrowPart(address,uint256)": FunctionFragment;
    "getBorrowPartForAmount(address,uint256)": FunctionFragment;
    "getCollateralAmountForShare(address,uint256)": FunctionFragment;
    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)": FunctionFragment;
    "getFractionForAmount(address,uint256)": FunctionFragment;
    "singularityMarketInfo(address,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bigBangMarketInfo"
      | "bigBangMarketInfo(address,address[])"
      | "getAmountForAssetFraction"
      | "getAmountForAssetFraction(address,uint256)"
      | "getAmountForBorrowPart"
      | "getAmountForBorrowPart(address,uint256)"
      | "getBorrowPartForAmount"
      | "getBorrowPartForAmount(address,uint256)"
      | "getCollateralAmountForShare"
      | "getCollateralAmountForShare(address,uint256)"
      | "getCollateralSharesForBorrowPart"
      | "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"
      | "getFractionForAmount"
      | "getFractionForAmount(address,uint256)"
      | "singularityMarketInfo"
      | "singularityMarketInfo(address,address[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bigBangMarketInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangMarketInfo(address,address[])",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForAssetFraction",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForAssetFraction(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForBorrowPart",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForBorrowPart(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowPartForAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowPartForAmount(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralAmountForShare",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralAmountForShare(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralSharesForBorrowPart",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFractionForAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFractionForAmount(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMarketInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMarketInfo(address,address[])",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "bigBangMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangMarketInfo(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForAssetFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForAssetFraction(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForBorrowPart(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowPartForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowPartForAmount(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralAmountForShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralAmountForShare(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralSharesForBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFractionForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFractionForAmount(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMarketInfo(address,address[])",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MagnetarHelper extends BaseContract {
  contractName: "MagnetarHelper";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MagnetarHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarHelper.BigBangInfoStructOutput[]]>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarHelper.BigBangInfoStructOutput[]]>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getBorrowPartForAmount(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { part: BigNumber }>;

    "getBorrowPartForAmount(address,uint256)"(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { part: BigNumber }>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralizationRatePrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralShares: BigNumber }>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralizationRatePrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralShares: BigNumber }>;

    getFractionForAmount(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fraction: BigNumber }>;

    "getFractionForAmount(address,uint256)"(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fraction: BigNumber }>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarHelper.SingularityInfoStructOutput[]]>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarHelper.SingularityInfoStructOutput[]]>;
  };

  bigBangMarketInfo(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarHelper.BigBangInfoStructOutput[]>;

  "bigBangMarketInfo(address,address[])"(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarHelper.BigBangInfoStructOutput[]>;

  getAmountForAssetFraction(
    singularity: PromiseOrValue<string>,
    fraction: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountForAssetFraction(address,uint256)"(
    singularity: PromiseOrValue<string>,
    fraction: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountForBorrowPart(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountForBorrowPart(address,uint256)"(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBorrowPartForAmount(
    market: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBorrowPartForAmount(address,uint256)"(
    market: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralAmountForShare(
    market: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCollateralAmountForShare(address,uint256)"(
    market: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralSharesForBorrowPart(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    collateralizationRatePrecision: PromiseOrValue<BigNumberish>,
    exchangeRatePrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    collateralizationRatePrecision: PromiseOrValue<BigNumberish>,
    exchangeRatePrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFractionForAmount(
    singularity: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFractionForAmount(address,uint256)"(
    singularity: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  singularityMarketInfo(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarHelper.SingularityInfoStructOutput[]>;

  "singularityMarketInfo(address,address[])"(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarHelper.SingularityInfoStructOutput[]>;

  callStatic: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarHelper.BigBangInfoStructOutput[]>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarHelper.BigBangInfoStructOutput[]>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowPartForAmount(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBorrowPartForAmount(address,uint256)"(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralizationRatePrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralizationRatePrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFractionForAmount(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFractionForAmount(address,uint256)"(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarHelper.SingularityInfoStructOutput[]>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarHelper.SingularityInfoStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowPartForAmount(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBorrowPartForAmount(address,uint256)"(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralizationRatePrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralizationRatePrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFractionForAmount(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFractionForAmount(address,uint256)"(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowPartForAmount(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBorrowPartForAmount(address,uint256)"(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralizationRatePrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralizationRatePrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFractionForAmount(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFractionForAmount(address,uint256)"(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
