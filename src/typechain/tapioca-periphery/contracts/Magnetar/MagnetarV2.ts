/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type RebaseStruct = {
  elastic: PromiseOrValue<BigNumberish>;
  base: PromiseOrValue<BigNumberish>;
};

export type RebaseStructOutput = [BigNumber, BigNumber] & {
  elastic: BigNumber;
  base: BigNumber;
};

export declare namespace MagnetarV2Storage {
  export type MarketInfoStruct = {
    collateral: PromiseOrValue<string>;
    collateralId: PromiseOrValue<BigNumberish>;
    asset: PromiseOrValue<string>;
    assetId: PromiseOrValue<BigNumberish>;
    oracle: PromiseOrValue<string>;
    oracleData: PromiseOrValue<BytesLike>;
    totalCollateralShare: PromiseOrValue<BigNumberish>;
    userCollateralShare: PromiseOrValue<BigNumberish>;
    totalBorrow: RebaseStruct;
    userBorrowPart: PromiseOrValue<BigNumberish>;
    currentExchangeRate: PromiseOrValue<BigNumberish>;
    spotExchangeRate: PromiseOrValue<BigNumberish>;
    oracleExchangeRate: PromiseOrValue<BigNumberish>;
    totalBorrowCap: PromiseOrValue<BigNumberish>;
    totalYieldBoxCollateralShare: PromiseOrValue<BigNumberish>;
    totalYieldBoxCollateralAmount: PromiseOrValue<BigNumberish>;
    totalYieldBoxAssetShare: PromiseOrValue<BigNumberish>;
    totalYieldBoxAssetAmount: PromiseOrValue<BigNumberish>;
    yieldBoxCollateralTokenType: PromiseOrValue<BigNumberish>;
    yieldBoxCollateralContractAddress: PromiseOrValue<string>;
    yieldBoxCollateralStrategyAddress: PromiseOrValue<string>;
    yieldBoxCollateralTokenId: PromiseOrValue<BigNumberish>;
    yieldBoxAssetTokenType: PromiseOrValue<BigNumberish>;
    yieldBoxAssetContractAddress: PromiseOrValue<string>;
    yieldBoxAssetStrategyAddress: PromiseOrValue<string>;
    yieldBoxAssetTokenId: PromiseOrValue<BigNumberish>;
    collateralizationRate: PromiseOrValue<BigNumberish>;
  };

  export type MarketInfoStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    RebaseStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    BigNumber,
    number,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    collateral: string;
    collateralId: BigNumber;
    asset: string;
    assetId: BigNumber;
    oracle: string;
    oracleData: string;
    totalCollateralShare: BigNumber;
    userCollateralShare: BigNumber;
    totalBorrow: RebaseStructOutput;
    userBorrowPart: BigNumber;
    currentExchangeRate: BigNumber;
    spotExchangeRate: BigNumber;
    oracleExchangeRate: BigNumber;
    totalBorrowCap: BigNumber;
    totalYieldBoxCollateralShare: BigNumber;
    totalYieldBoxCollateralAmount: BigNumber;
    totalYieldBoxAssetShare: BigNumber;
    totalYieldBoxAssetAmount: BigNumber;
    yieldBoxCollateralTokenType: number;
    yieldBoxCollateralContractAddress: string;
    yieldBoxCollateralStrategyAddress: string;
    yieldBoxCollateralTokenId: BigNumber;
    yieldBoxAssetTokenType: number;
    yieldBoxAssetContractAddress: string;
    yieldBoxAssetStrategyAddress: string;
    yieldBoxAssetTokenId: BigNumber;
    collateralizationRate: BigNumber;
  };

  export type BigBangInfoStruct = {
    market: MagnetarV2Storage.MarketInfoStruct;
    accrueInfo: IBigBang.AccrueInfoStruct;
    minDebtRate: PromiseOrValue<BigNumberish>;
    maxDebtRate: PromiseOrValue<BigNumberish>;
    debtRateAgainstEthMarket: PromiseOrValue<BigNumberish>;
    mainBBMarket: PromiseOrValue<string>;
    mainBBDebtRate: PromiseOrValue<BigNumberish>;
    currentDebtRate: PromiseOrValue<BigNumberish>;
  };

  export type BigBangInfoStructOutput = [
    MagnetarV2Storage.MarketInfoStructOutput,
    IBigBang.AccrueInfoStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    market: MagnetarV2Storage.MarketInfoStructOutput;
    accrueInfo: IBigBang.AccrueInfoStructOutput;
    minDebtRate: BigNumber;
    maxDebtRate: BigNumber;
    debtRateAgainstEthMarket: BigNumber;
    mainBBMarket: string;
    mainBBDebtRate: BigNumber;
    currentDebtRate: BigNumber;
  };

  export type CallStruct = {
    id: PromiseOrValue<BigNumberish>;
    target: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    allowFailure: PromiseOrValue<boolean>;
    call: PromiseOrValue<BytesLike>;
  };

  export type CallStructOutput = [
    number,
    string,
    BigNumber,
    boolean,
    string
  ] & {
    id: number;
    target: string;
    value: BigNumber;
    allowFailure: boolean;
    call: string;
  };

  export type ResultStruct = {
    success: PromiseOrValue<boolean>;
    returnData: PromiseOrValue<BytesLike>;
  };

  export type ResultStructOutput = [boolean, string] & {
    success: boolean;
    returnData: string;
  };

  export type SingularityInfoStruct = {
    market: MagnetarV2Storage.MarketInfoStruct;
    totalAsset: RebaseStruct;
    userAssetFraction: PromiseOrValue<BigNumberish>;
    accrueInfo: ISingularity.AccrueInfoStruct;
    utilization: PromiseOrValue<BigNumberish>;
    minimumTargetUtilization: PromiseOrValue<BigNumberish>;
    maximumTargetUtilization: PromiseOrValue<BigNumberish>;
    minimumInterestPerSecond: PromiseOrValue<BigNumberish>;
    maximumInterestPerSecond: PromiseOrValue<BigNumberish>;
    interestElasticity: PromiseOrValue<BigNumberish>;
    startingInterestPerSecond: PromiseOrValue<BigNumberish>;
  };

  export type SingularityInfoStructOutput = [
    MagnetarV2Storage.MarketInfoStructOutput,
    RebaseStructOutput,
    BigNumber,
    ISingularity.AccrueInfoStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    market: MagnetarV2Storage.MarketInfoStructOutput;
    totalAsset: RebaseStructOutput;
    userAssetFraction: BigNumber;
    accrueInfo: ISingularity.AccrueInfoStructOutput;
    utilization: BigNumber;
    minimumTargetUtilization: BigNumber;
    maximumTargetUtilization: BigNumber;
    minimumInterestPerSecond: BigNumber;
    maximumInterestPerSecond: BigNumber;
    interestElasticity: BigNumber;
    startingInterestPerSecond: BigNumber;
  };
}

export declare namespace IBigBang {
  export type AccrueInfoStruct = {
    debtRate: PromiseOrValue<BigNumberish>;
    lastAccrued: PromiseOrValue<BigNumberish>;
  };

  export type AccrueInfoStructOutput = [BigNumber, BigNumber] & {
    debtRate: BigNumber;
    lastAccrued: BigNumber;
  };
}

export declare namespace ICommonData {
  export type IWithdrawParamsStruct = {
    withdraw: PromiseOrValue<boolean>;
    withdrawLzFeeAmount: PromiseOrValue<BigNumberish>;
    withdrawOnOtherChain: PromiseOrValue<boolean>;
    withdrawLzChainId: PromiseOrValue<BigNumberish>;
    withdrawAdapterParams: PromiseOrValue<BytesLike>;
  };

  export type IWithdrawParamsStructOutput = [
    boolean,
    BigNumber,
    boolean,
    number,
    string
  ] & {
    withdraw: boolean;
    withdrawLzFeeAmount: BigNumber;
    withdrawOnOtherChain: boolean;
    withdrawLzChainId: number;
    withdrawAdapterParams: string;
  };

  export type ICommonExternalContractsStruct = {
    magnetar: PromiseOrValue<string>;
    singularity: PromiseOrValue<string>;
    bigBang: PromiseOrValue<string>;
  };

  export type ICommonExternalContractsStructOutput = [
    string,
    string,
    string
  ] & { magnetar: string; singularity: string; bigBang: string };

  export type IDepositDataStruct = {
    deposit: PromiseOrValue<boolean>;
    amount: PromiseOrValue<BigNumberish>;
    extractFromSender: PromiseOrValue<boolean>;
  };

  export type IDepositDataStructOutput = [boolean, BigNumber, boolean] & {
    deposit: boolean;
    amount: BigNumber;
    extractFromSender: boolean;
  };
}

export declare namespace ITapiocaOptionsBroker {
  export type IOptionsExitDataStruct = {
    exit: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    oTAPTokenID: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsExitDataStructOutput = [boolean, string, BigNumber] & {
    exit: boolean;
    target: string;
    oTAPTokenID: BigNumber;
  };

  export type IOptionsParticipateDataStruct = {
    participate: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    tOLPTokenId: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsParticipateDataStructOutput = [
    boolean,
    string,
    BigNumber
  ] & { participate: boolean; target: string; tOLPTokenId: BigNumber };
}

export declare namespace ITapiocaOptionLiquidityProvision {
  export type IOptionsUnlockDataStruct = {
    unlock: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsUnlockDataStructOutput = [boolean, string, BigNumber] & {
    unlock: boolean;
    target: string;
    tokenId: BigNumber;
  };

  export type IOptionsLockDataStruct = {
    lock: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    lockDuration: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    fraction: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsLockDataStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    lock: boolean;
    target: string;
    lockDuration: BigNumber;
    amount: BigNumber;
    fraction: BigNumber;
  };
}

export declare namespace IUSDOBase {
  export type IRemoveAndRepayStruct = {
    removeAssetFromSGL: PromiseOrValue<boolean>;
    removeAmount: PromiseOrValue<BigNumberish>;
    repayAssetOnBB: PromiseOrValue<boolean>;
    repayAmount: PromiseOrValue<BigNumberish>;
    removeCollateralFromBB: PromiseOrValue<boolean>;
    collateralAmount: PromiseOrValue<BigNumberish>;
    exitData: ITapiocaOptionsBroker.IOptionsExitDataStruct;
    unlockData: ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStruct;
    assetWithdrawData: ICommonData.IWithdrawParamsStruct;
    collateralWithdrawData: ICommonData.IWithdrawParamsStruct;
  };

  export type IRemoveAndRepayStructOutput = [
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    ITapiocaOptionsBroker.IOptionsExitDataStructOutput,
    ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStructOutput,
    ICommonData.IWithdrawParamsStructOutput,
    ICommonData.IWithdrawParamsStructOutput
  ] & {
    removeAssetFromSGL: boolean;
    removeAmount: BigNumber;
    repayAssetOnBB: boolean;
    repayAmount: BigNumber;
    removeCollateralFromBB: boolean;
    collateralAmount: BigNumber;
    exitData: ITapiocaOptionsBroker.IOptionsExitDataStructOutput;
    unlockData: ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStructOutput;
    assetWithdrawData: ICommonData.IWithdrawParamsStructOutput;
    collateralWithdrawData: ICommonData.IWithdrawParamsStructOutput;
  };

  export type IMintDataStruct = {
    mint: PromiseOrValue<boolean>;
    mintAmount: PromiseOrValue<BigNumberish>;
    collateralDepositData: ICommonData.IDepositDataStruct;
  };

  export type IMintDataStructOutput = [
    boolean,
    BigNumber,
    ICommonData.IDepositDataStructOutput
  ] & {
    mint: boolean;
    mintAmount: BigNumber;
    collateralDepositData: ICommonData.IDepositDataStructOutput;
  };
}

export declare namespace ISingularity {
  export type AccrueInfoStruct = {
    interestPerSecond: PromiseOrValue<BigNumberish>;
    lastAccrued: PromiseOrValue<BigNumberish>;
    feesEarnedFraction: PromiseOrValue<BigNumberish>;
  };

  export type AccrueInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    interestPerSecond: BigNumber;
    lastAccrued: BigNumber;
    feesEarnedFraction: BigNumber;
  };
}

export interface MagnetarV2Interface extends utils.Interface {
  functions: {
    "bigBangMarketInfo(address,address[])": FunctionFragment;
    "burst((uint16,address,uint256,bool,bytes)[])": FunctionFragment;
    "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes))": FunctionFragment;
    "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes))": FunctionFragment;
    "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))": FunctionFragment;
    "getAmountForAssetFraction(address,uint256)": FunctionFragment;
    "getAmountForBorrowPart(address,uint256)": FunctionFragment;
    "getBorrowPartForAmount(address,uint256)": FunctionFragment;
    "getCollateralAmountForShare(address,uint256)": FunctionFragment;
    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)": FunctionFragment;
    "getFractionForAmount(address,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "marketModule()": FunctionFragment;
    "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueEth(uint256,address)": FunctionFragment;
    "singularityMarketInfo(address,address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bigBangMarketInfo"
      | "bigBangMarketInfo(address,address[])"
      | "burst"
      | "burst((uint16,address,uint256,bool,bytes)[])"
      | "depositAddCollateralAndBorrowFromMarket"
      | "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes))"
      | "depositRepayAndRemoveCollateralFromMarket"
      | "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes))"
      | "exitPositionAndRemoveCollateral"
      | "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"
      | "getAmountForAssetFraction"
      | "getAmountForAssetFraction(address,uint256)"
      | "getAmountForBorrowPart"
      | "getAmountForBorrowPart(address,uint256)"
      | "getBorrowPartForAmount"
      | "getBorrowPartForAmount(address,uint256)"
      | "getCollateralAmountForShare"
      | "getCollateralAmountForShare(address,uint256)"
      | "getCollateralSharesForBorrowPart"
      | "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"
      | "getFractionForAmount"
      | "getFractionForAmount(address,uint256)"
      | "isApprovedForAll"
      | "isApprovedForAll(address,address)"
      | "marketModule"
      | "marketModule()"
      | "mintFromBBAndLendOnSGL"
      | "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"
      | "onERC721Received"
      | "onERC721Received(address,address,uint256,bytes)"
      | "owner"
      | "owner()"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "rescueEth"
      | "rescueEth(uint256,address)"
      | "singularityMarketInfo"
      | "singularityMarketInfo(address,address[])"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "withdrawToChain"
      | "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bigBangMarketInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangMarketInfo(address,address[])",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burst",
    values: [MagnetarV2Storage.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burst((uint16,address,uint256,bool,bytes)[])",
    values: [MagnetarV2Storage.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddCollateralAndBorrowFromMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      ICommonData.IWithdrawParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      ICommonData.IWithdrawParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      ICommonData.IWithdrawParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      ICommonData.IWithdrawParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPositionAndRemoveCollateral",
    values: [
      PromiseOrValue<string>,
      ICommonData.ICommonExternalContractsStruct,
      IUSDOBase.IRemoveAndRepayStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))",
    values: [
      PromiseOrValue<string>,
      ICommonData.ICommonExternalContractsStruct,
      IUSDOBase.IRemoveAndRepayStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForAssetFraction",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForAssetFraction(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForBorrowPart",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForBorrowPart(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowPartForAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowPartForAmount(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralAmountForShare",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralAmountForShare(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralSharesForBorrowPart",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFractionForAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFractionForAmount(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketModule()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromBBAndLendOnSGL",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IUSDOBase.IMintDataStruct,
      ICommonData.IDepositDataStruct,
      ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      ICommonData.ICommonExternalContractsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IUSDOBase.IMintDataStruct,
      ICommonData.IDepositDataStruct,
      ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      ICommonData.ICommonExternalContractsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueEth",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueEth(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMarketInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMarketInfo(address,address[])",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToChain",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "bigBangMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangMarketInfo(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burst", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burst((uint16,address,uint256,bool,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAddCollateralAndBorrowFromMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPositionAndRemoveCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForAssetFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForAssetFraction(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForBorrowPart(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowPartForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowPartForAmount(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralAmountForShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralAmountForShare(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralSharesForBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFractionForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFractionForAmount(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketModule()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFromBBAndLendOnSGL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescueEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rescueEth(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMarketInfo(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
}

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MagnetarV2 extends BaseContract {
  contractName: "MagnetarV2";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MagnetarV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarV2Storage.BigBangInfoStructOutput[]]>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarV2Storage.BigBangInfoStructOutput[]]>;

    burst(
      calls: MagnetarV2Storage.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "burst((uint16,address,uint256,bool,bytes)[])"(
      calls: MagnetarV2Storage.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAddCollateralAndBorrowFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes))"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositRepayAndRemoveCollateralFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes))"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitPositionAndRemoveCollateral(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getBorrowPartForAmount(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { part: BigNumber }>;

    "getBorrowPartForAmount(address,uint256)"(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { part: BigNumber }>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralShares: BigNumber }>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralShares: BigNumber }>;

    getFractionForAmount(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fraction: BigNumber }>;

    "getFractionForAmount(address,uint256)"(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fraction: BigNumber }>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketModule(overrides?: CallOverrides): Promise<[string]>;

    "marketModule()"(overrides?: CallOverrides): Promise<[string]>;

    mintFromBBAndLendOnSGL(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarV2Storage.SingularityInfoStructOutput[]]>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarV2Storage.SingularityInfoStructOutput[]]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawToChain(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bigBangMarketInfo(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarV2Storage.BigBangInfoStructOutput[]>;

  "bigBangMarketInfo(address,address[])"(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarV2Storage.BigBangInfoStructOutput[]>;

  burst(
    calls: MagnetarV2Storage.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "burst((uint16,address,uint256,bool,bytes)[])"(
    calls: MagnetarV2Storage.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAddCollateralAndBorrowFromMarket(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    deposit: PromiseOrValue<boolean>,
    withdrawParams: ICommonData.IWithdrawParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes))"(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    deposit: PromiseOrValue<boolean>,
    withdrawParams: ICommonData.IWithdrawParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositRepayAndRemoveCollateralFromMarket(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes))"(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitPositionAndRemoveCollateral(
    user: PromiseOrValue<string>,
    externalData: ICommonData.ICommonExternalContractsStruct,
    removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"(
    user: PromiseOrValue<string>,
    externalData: ICommonData.ICommonExternalContractsStruct,
    removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountForAssetFraction(
    singularity: PromiseOrValue<string>,
    fraction: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountForAssetFraction(address,uint256)"(
    singularity: PromiseOrValue<string>,
    fraction: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountForBorrowPart(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountForBorrowPart(address,uint256)"(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBorrowPartForAmount(
    market: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBorrowPartForAmount(address,uint256)"(
    market: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralAmountForShare(
    market: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCollateralAmountForShare(address,uint256)"(
    market: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralSharesForBorrowPart(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
    exchangeRatePrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
    exchangeRatePrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFractionForAmount(
    singularity: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFractionForAmount(address,uint256)"(
    singularity: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isApprovedForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketModule(overrides?: CallOverrides): Promise<string>;

  "marketModule()"(overrides?: CallOverrides): Promise<string>;

  mintFromBBAndLendOnSGL(
    user: PromiseOrValue<string>,
    lendAmount: PromiseOrValue<BigNumberish>,
    mintData: IUSDOBase.IMintDataStruct,
    depositData: ICommonData.IDepositDataStruct,
    lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
    participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
    externalContracts: ICommonData.ICommonExternalContractsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"(
    user: PromiseOrValue<string>,
    lendAmount: PromiseOrValue<BigNumberish>,
    mintData: IUSDOBase.IMintDataStruct,
    depositData: ICommonData.IDepositDataStruct,
    lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
    participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
    externalContracts: ICommonData.ICommonExternalContractsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueEth(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "rescueEth(uint256,address)"(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  singularityMarketInfo(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarV2Storage.SingularityInfoStructOutput[]>;

  "singularityMarketInfo(address,address[])"(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarV2Storage.SingularityInfoStructOutput[]>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawToChain(
    yieldBox: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    dstChainId: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    adapterParams: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<string>,
    gas: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
    yieldBox: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    dstChainId: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    adapterParams: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<string>,
    gas: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2Storage.BigBangInfoStructOutput[]>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2Storage.BigBangInfoStructOutput[]>;

    burst(
      calls: MagnetarV2Storage.CallStruct[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2Storage.ResultStructOutput[]>;

    "burst((uint16,address,uint256,bool,bytes)[])"(
      calls: MagnetarV2Storage.CallStruct[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2Storage.ResultStructOutput[]>;

    depositAddCollateralAndBorrowFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes))"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositRepayAndRemoveCollateralFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes))"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPositionAndRemoveCollateral(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowPartForAmount(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBorrowPartForAmount(address,uint256)"(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFractionForAmount(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFractionForAmount(address,uint256)"(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketModule(overrides?: CallOverrides): Promise<string>;

    "marketModule()"(overrides?: CallOverrides): Promise<string>;

    mintFromBBAndLendOnSGL(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2Storage.SingularityInfoStructOutput[]>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2Storage.SingularityInfoStructOutput[]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToChain(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burst(
      calls: MagnetarV2Storage.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "burst((uint16,address,uint256,bool,bytes)[])"(
      calls: MagnetarV2Storage.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAddCollateralAndBorrowFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes))"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositRepayAndRemoveCollateralFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes))"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitPositionAndRemoveCollateral(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowPartForAmount(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBorrowPartForAmount(address,uint256)"(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFractionForAmount(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFractionForAmount(address,uint256)"(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketModule(overrides?: CallOverrides): Promise<BigNumber>;

    "marketModule()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintFromBBAndLendOnSGL(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawToChain(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burst(
      calls: MagnetarV2Storage.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "burst((uint16,address,uint256,bool,bytes)[])"(
      calls: MagnetarV2Storage.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAddCollateralAndBorrowFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes))"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositRepayAndRemoveCollateralFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes))"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitPositionAndRemoveCollateral(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowPartForAmount(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBorrowPartForAmount(address,uint256)"(
      market: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFractionForAmount(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFractionForAmount(address,uint256)"(
      singularity: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketModule()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintFromBBAndLendOnSGL(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToChain(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
