/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MagnetarV2StorageInterface extends utils.Interface {
  functions: {
    "cluster()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "cluster" | "cluster()"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "cluster", values?: undefined): string;
  encodeFunctionData(functionFragment: "cluster()", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cluster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cluster()", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ClusterSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClusterSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ClusterSet(address,address)"
  ): EventFragment;
}

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ClusterSetEventObject {
  oldCluster: string;
  newCluster: string;
}
export type ClusterSetEvent = TypedEvent<
  [string, string],
  ClusterSetEventObject
>;

export type ClusterSetEventFilter = TypedEventFilter<ClusterSetEvent>;

export interface MagnetarV2Storage extends BaseContract {
  contractName: "MagnetarV2Storage";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MagnetarV2StorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cluster(overrides?: CallOverrides): Promise<[string]>;

    "cluster()"(overrides?: CallOverrides): Promise<[string]>;
  };

  cluster(overrides?: CallOverrides): Promise<string>;

  "cluster()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cluster(overrides?: CallOverrides): Promise<string>;

    "cluster()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ClusterSet(address,address)"(
      oldCluster?: PromiseOrValue<string> | null,
      newCluster?: PromiseOrValue<string> | null
    ): ClusterSetEventFilter;
    ClusterSet(
      oldCluster?: PromiseOrValue<string> | null,
      newCluster?: PromiseOrValue<string> | null
    ): ClusterSetEventFilter;
  };

  estimateGas: {
    cluster(overrides?: CallOverrides): Promise<BigNumber>;

    "cluster()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cluster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cluster()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
