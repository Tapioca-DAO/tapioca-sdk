/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace ICommonData {
  export type IWithdrawParamsStruct = {
    withdraw: PromiseOrValue<boolean>;
    withdrawLzFeeAmount: PromiseOrValue<BigNumberish>;
    withdrawOnOtherChain: PromiseOrValue<boolean>;
    withdrawLzChainId: PromiseOrValue<BigNumberish>;
    withdrawAdapterParams: PromiseOrValue<BytesLike>;
  };

  export type IWithdrawParamsStructOutput = [
    boolean,
    BigNumber,
    boolean,
    number,
    string
  ] & {
    withdraw: boolean;
    withdrawLzFeeAmount: BigNumber;
    withdrawOnOtherChain: boolean;
    withdrawLzChainId: number;
    withdrawAdapterParams: string;
  };

  export type ICommonExternalContractsStruct = {
    magnetar: PromiseOrValue<string>;
    singularity: PromiseOrValue<string>;
    bigBang: PromiseOrValue<string>;
  };

  export type ICommonExternalContractsStructOutput = [
    string,
    string,
    string
  ] & { magnetar: string; singularity: string; bigBang: string };

  export type IDepositDataStruct = {
    deposit: PromiseOrValue<boolean>;
    amount: PromiseOrValue<BigNumberish>;
    extractFromSender: PromiseOrValue<boolean>;
  };

  export type IDepositDataStructOutput = [boolean, BigNumber, boolean] & {
    deposit: boolean;
    amount: BigNumber;
    extractFromSender: boolean;
  };
}

export declare namespace ITapiocaOptionsBroker {
  export type IOptionsExitDataStruct = {
    exit: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    oTAPTokenID: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsExitDataStructOutput = [boolean, string, BigNumber] & {
    exit: boolean;
    target: string;
    oTAPTokenID: BigNumber;
  };

  export type IOptionsParticipateDataStruct = {
    participate: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    tOLPTokenId: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsParticipateDataStructOutput = [
    boolean,
    string,
    BigNumber
  ] & { participate: boolean; target: string; tOLPTokenId: BigNumber };
}

export declare namespace ITapiocaOptionLiquidityProvision {
  export type IOptionsUnlockDataStruct = {
    unlock: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsUnlockDataStructOutput = [boolean, string, BigNumber] & {
    unlock: boolean;
    target: string;
    tokenId: BigNumber;
  };

  export type IOptionsLockDataStruct = {
    lock: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    lockDuration: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    fraction: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsLockDataStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    lock: boolean;
    target: string;
    lockDuration: BigNumber;
    amount: BigNumber;
    fraction: BigNumber;
  };
}

export declare namespace IUSDOBase {
  export type IRemoveAndRepayStruct = {
    removeAssetFromSGL: PromiseOrValue<boolean>;
    removeAmount: PromiseOrValue<BigNumberish>;
    repayAssetOnBB: PromiseOrValue<boolean>;
    repayAmount: PromiseOrValue<BigNumberish>;
    removeCollateralFromBB: PromiseOrValue<boolean>;
    collateralAmount: PromiseOrValue<BigNumberish>;
    exitData: ITapiocaOptionsBroker.IOptionsExitDataStruct;
    unlockData: ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStruct;
    assetWithdrawData: ICommonData.IWithdrawParamsStruct;
    collateralWithdrawData: ICommonData.IWithdrawParamsStruct;
  };

  export type IRemoveAndRepayStructOutput = [
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    ITapiocaOptionsBroker.IOptionsExitDataStructOutput,
    ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStructOutput,
    ICommonData.IWithdrawParamsStructOutput,
    ICommonData.IWithdrawParamsStructOutput
  ] & {
    removeAssetFromSGL: boolean;
    removeAmount: BigNumber;
    repayAssetOnBB: boolean;
    repayAmount: BigNumber;
    removeCollateralFromBB: boolean;
    collateralAmount: BigNumber;
    exitData: ITapiocaOptionsBroker.IOptionsExitDataStructOutput;
    unlockData: ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStructOutput;
    assetWithdrawData: ICommonData.IWithdrawParamsStructOutput;
    collateralWithdrawData: ICommonData.IWithdrawParamsStructOutput;
  };

  export type IMintDataStruct = {
    mint: PromiseOrValue<boolean>;
    mintAmount: PromiseOrValue<BigNumberish>;
    collateralDepositData: ICommonData.IDepositDataStruct;
  };

  export type IMintDataStructOutput = [
    boolean,
    BigNumber,
    ICommonData.IDepositDataStructOutput
  ] & {
    mint: boolean;
    mintAmount: BigNumber;
    collateralDepositData: ICommonData.IDepositDataStructOutput;
  };
}

export interface MagnetarMarketModuleInterface extends utils.Interface {
  functions: {
    "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes),uint256)": FunctionFragment;
    "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes),uint256)": FunctionFragment;
    "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)),uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))": FunctionFragment;
    "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositAddCollateralAndBorrowFromMarket"
      | "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes),uint256)"
      | "depositRepayAndRemoveCollateralFromMarket"
      | "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes),uint256)"
      | "exitPositionAndRemoveCollateral"
      | "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)),uint256)"
      | "isApprovedForAll"
      | "isApprovedForAll(address,address)"
      | "mintFromBBAndLendOnSGL"
      | "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"
      | "withdrawToChain"
      | "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositAddCollateralAndBorrowFromMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      ICommonData.IWithdrawParamsStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes),uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      ICommonData.IWithdrawParamsStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      ICommonData.IWithdrawParamsStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes),uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      ICommonData.IWithdrawParamsStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPositionAndRemoveCollateral",
    values: [
      PromiseOrValue<string>,
      ICommonData.ICommonExternalContractsStruct,
      IUSDOBase.IRemoveAndRepayStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)),uint256)",
    values: [
      PromiseOrValue<string>,
      ICommonData.ICommonExternalContractsStruct,
      IUSDOBase.IRemoveAndRepayStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromBBAndLendOnSGL",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IUSDOBase.IMintDataStruct,
      ICommonData.IDepositDataStruct,
      ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      ICommonData.ICommonExternalContractsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IUSDOBase.IMintDataStruct,
      ICommonData.IDepositDataStruct,
      ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      ICommonData.ICommonExternalContractsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToChain",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositAddCollateralAndBorrowFromMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes),uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes),uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPositionAndRemoveCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)),uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFromBBAndLendOnSGL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
  ): EventFragment;
}

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface MagnetarMarketModule extends BaseContract {
  contractName: "MagnetarMarketModule";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MagnetarMarketModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositAddCollateralAndBorrowFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes),uint256)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositRepayAndRemoveCollateralFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes),uint256)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitPositionAndRemoveCollateral(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)),uint256)"(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintFromBBAndLendOnSGL(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawToChain(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  depositAddCollateralAndBorrowFromMarket(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    deposit: PromiseOrValue<boolean>,
    withdrawParams: ICommonData.IWithdrawParamsStruct,
    valueAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes),uint256)"(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    deposit: PromiseOrValue<boolean>,
    withdrawParams: ICommonData.IWithdrawParamsStruct,
    valueAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositRepayAndRemoveCollateralFromMarket(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
    valueAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes),uint256)"(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
    valueAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitPositionAndRemoveCollateral(
    user: PromiseOrValue<string>,
    externalData: ICommonData.ICommonExternalContractsStruct,
    removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
    valueAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)),uint256)"(
    user: PromiseOrValue<string>,
    externalData: ICommonData.ICommonExternalContractsStruct,
    removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
    valueAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintFromBBAndLendOnSGL(
    user: PromiseOrValue<string>,
    lendAmount: PromiseOrValue<BigNumberish>,
    mintData: IUSDOBase.IMintDataStruct,
    depositData: ICommonData.IDepositDataStruct,
    lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
    participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
    externalContracts: ICommonData.ICommonExternalContractsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"(
    user: PromiseOrValue<string>,
    lendAmount: PromiseOrValue<BigNumberish>,
    mintData: IUSDOBase.IMintDataStruct,
    depositData: ICommonData.IDepositDataStruct,
    lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
    participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
    externalContracts: ICommonData.ICommonExternalContractsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawToChain(
    yieldBox: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    dstChainId: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    adapterParams: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<string>,
    gas: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
    yieldBox: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    dstChainId: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    adapterParams: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<string>,
    gas: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositAddCollateralAndBorrowFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes),uint256)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositRepayAndRemoveCollateralFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes),uint256)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPositionAndRemoveCollateral(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)),uint256)"(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintFromBBAndLendOnSGL(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToChain(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
  };

  estimateGas: {
    depositAddCollateralAndBorrowFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes),uint256)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositRepayAndRemoveCollateralFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes),uint256)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitPositionAndRemoveCollateral(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)),uint256)"(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintFromBBAndLendOnSGL(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawToChain(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositAddCollateralAndBorrowFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAddCollateralAndBorrowFromMarket(address,address,uint256,uint256,bool,bool,(bool,uint256,bool,uint16,bytes),uint256)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdrawParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositRepayAndRemoveCollateralFromMarket(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositRepayAndRemoveCollateralFromMarket(address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes),uint256)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      withdrawCollateralParams: ICommonData.IWithdrawParamsStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitPositionAndRemoveCollateral(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exitPositionAndRemoveCollateral(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)),uint256)"(
      user: PromiseOrValue<string>,
      externalData: ICommonData.ICommonExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      valueAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintFromBBAndLendOnSGL(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintFromBBAndLendOnSGL(address,uint256,(bool,uint256,(bool,uint256,bool)),(bool,uint256,bool),(bool,address,uint128,uint128,uint256),(bool,address,uint256),(address,address,address))"(
      user: PromiseOrValue<string>,
      lendAmount: PromiseOrValue<BigNumberish>,
      mintData: IUSDOBase.IMintDataStruct,
      depositData: ICommonData.IDepositDataStruct,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      externalContracts: ICommonData.ICommonExternalContractsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToChain(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawToChain(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
