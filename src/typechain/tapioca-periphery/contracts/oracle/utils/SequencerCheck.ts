/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface SequencerCheckInterface extends utils.Interface {
  functions: {
    "GRACE_PERIOD_TIME()": FunctionFragment;
    "SEQUENCER_ROLE()": FunctionFragment;
    "SEQUENCER_UPTIME_FEED()": FunctionFragment;
    "changeGracePeriod(uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GRACE_PERIOD_TIME"
      | "GRACE_PERIOD_TIME()"
      | "SEQUENCER_ROLE"
      | "SEQUENCER_ROLE()"
      | "SEQUENCER_UPTIME_FEED"
      | "SEQUENCER_UPTIME_FEED()"
      | "changeGracePeriod"
      | "changeGracePeriod(uint32)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GRACE_PERIOD_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD_TIME()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEQUENCER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEQUENCER_ROLE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEQUENCER_UPTIME_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEQUENCER_UPTIME_FEED()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeGracePeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGracePeriod(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD_TIME()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEQUENCER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEQUENCER_ROLE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEQUENCER_UPTIME_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEQUENCER_UPTIME_FEED()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGracePeriod(uint32)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SequencerCheck extends BaseContract {
  contractName: "SequencerCheck";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SequencerCheckInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GRACE_PERIOD_TIME(overrides?: CallOverrides): Promise<[number]>;

    "GRACE_PERIOD_TIME()"(overrides?: CallOverrides): Promise<[number]>;

    SEQUENCER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "SEQUENCER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    SEQUENCER_UPTIME_FEED(overrides?: CallOverrides): Promise<[string]>;

    "SEQUENCER_UPTIME_FEED()"(overrides?: CallOverrides): Promise<[string]>;

    changeGracePeriod(
      _gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "changeGracePeriod(uint32)"(
      _gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  GRACE_PERIOD_TIME(overrides?: CallOverrides): Promise<number>;

  "GRACE_PERIOD_TIME()"(overrides?: CallOverrides): Promise<number>;

  SEQUENCER_ROLE(overrides?: CallOverrides): Promise<string>;

  "SEQUENCER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  SEQUENCER_UPTIME_FEED(overrides?: CallOverrides): Promise<string>;

  "SEQUENCER_UPTIME_FEED()"(overrides?: CallOverrides): Promise<string>;

  changeGracePeriod(
    _gracePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "changeGracePeriod(uint32)"(
    _gracePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    GRACE_PERIOD_TIME(overrides?: CallOverrides): Promise<number>;

    "GRACE_PERIOD_TIME()"(overrides?: CallOverrides): Promise<number>;

    SEQUENCER_ROLE(overrides?: CallOverrides): Promise<string>;

    "SEQUENCER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    SEQUENCER_UPTIME_FEED(overrides?: CallOverrides): Promise<string>;

    "SEQUENCER_UPTIME_FEED()"(overrides?: CallOverrides): Promise<string>;

    changeGracePeriod(
      _gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeGracePeriod(uint32)"(
      _gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    GRACE_PERIOD_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    SEQUENCER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SEQUENCER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SEQUENCER_UPTIME_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    "SEQUENCER_UPTIME_FEED()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeGracePeriod(
      _gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "changeGracePeriod(uint32)"(
      _gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GRACE_PERIOD_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GRACE_PERIOD_TIME()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SEQUENCER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SEQUENCER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SEQUENCER_UPTIME_FEED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SEQUENCER_UPTIME_FEED()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeGracePeriod(
      _gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "changeGracePeriod(uint32)"(
      _gracePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
