/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Cluster,
  ClusterInterface,
} from "../../../contracts/Cluster/Cluster";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_lzChainId",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint16",
        name: "_lzChainId",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "enum ICluster.WhitelistType",
        name: "_type",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_oldStatus",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_newStatus",
        type: "bool",
      },
    ],
    name: "ContractUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_editor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_oldStatus",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_newStatus",
        type: "bool",
      },
    ],
    name: "EditorUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_oldChain",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_newChain",
        type: "uint256",
      },
    ],
    name: "LzChainUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "editor",
        type: "address",
      },
    ],
    name: "isEditor",
    outputs: [
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum ICluster.WhitelistType",
        name: "_whitelistType",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "_lzChainId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lzChainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum ICluster.WhitelistType",
        name: "_whitelistType",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "_lzChainId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_status",
        type: "bool",
      },
    ],
    name: "updateContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_editor",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_status",
        type: "bool",
      },
    ],
    name: "updateEditor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_lzChainId",
        type: "uint16",
      },
    ],
    name: "updateLzChain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080346100b357601f6106e538819003918201601f19168301916001600160401b038311848410176100b8578084926020946040528339810103126100b3575161ffff811681036100b357600054604051913360018060a01b0383167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600160b01b03199091163361ffff60a01b19161760a09190911b61ffff60a01b161760005561061690816100cf8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c80636cb37a831461047c578063715018a61461041f5780638da5cb5b146103f75780638f56be8514610394578063917c415614610370578063a074815414610332578063c57d02de146101c8578063f2fde38b146101065763fdf872be1461008457600080fd5b34610102576020366003190112610102573561ffff808216928383036100fe577f151a97d786320cda18adb054f64fa5333bf7f260aa3b29a84795f2f9004bb3d1916100ce610559565b8554948251918660a01c1682526020820152a161ffff60a01b1990911660a09190911b61ffff60a01b1617815580f35b8480fd5b8280fd5b503461010257602036600319011261010257610120610517565b90610129610559565b6001600160a01b0391821692831561017657505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b5082903461032e57608036600319011261032e578035926005841015610102576101f0610548565b916101f9610532565b94606435938415159687860361032a57813388526020946001865260ff878a2054168015610317575b156102da5750928798926102aa926102c999969561ffff809116156102cc575b60607fc7e8d3594ec93174080c3b314bad19d13930367c2e32ffb51381d51970c7050c9161026f866105b1565b9416968794858b52895260ff8b808c209560018060a01b03169b8c968782528c52205416908b519187835215158a8301528b820152a36105b1565b90875281528286209186525283209060ff801983541691151516179055565b80f35b875460a01c81169250610242565b865162461bcd60e51b8152908101869052601760248201527610db1d5cdd195c8e881b9bdd08185d5d1a1bdc9a5e9959604a1b6044820152606490fd5b5088546001600160a01b03163314610222565b8680fd5b5080fd5b50503461032e57602036600319011261032e5760209160ff9082906001600160a01b0361035d610517565b1681526001855220541690519015158152f35b50503461032e578160031936011261032e5761ffff6020925460a01c169051908152f35b503461010257606036600319011261010257356005811015610102578160209360ff926103bf610548565b61ffff6103d36103cd610532565b936105b1565b9116835286528282206001600160a01b039091168252855220549151911615158152f35b50503461032e578160031936011261032e57905490516001600160a01b039091168152602090f35b8334610479578060031936011261047957610438610559565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50503461032e578060031936011261032e57610496610517565b9060243590811515928383036100fe576102c9937fdf1df62f3c31dd6f0a6dcedf036e75fb8b63b09cbe74cb9909e21aa11df6e3a383926104d5610559565b60018060a01b0316928392838952600160205260ff828a20541690825191151582526020820152a28452600160205283209060ff801983541691151516179055565b600435906001600160a01b038216820361052d57565b600080fd5b604435906001600160a01b038216820361052d57565b6024359061ffff8216820361052d57565b6000546001600160a01b0316330361056d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60058110156105ca576000526002602052604060002090565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220cd936f8147f0af894f75193c672aa9eb33071028be4702e56a1a6669b90a8d3764736f6c63430008120033";

type ClusterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClusterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cluster__factory extends ContractFactory {
  constructor(...args: ClusterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Cluster";
  }

  override deploy(
    _lzChainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Cluster> {
    return super.deploy(_lzChainId, overrides || {}) as Promise<Cluster>;
  }
  override getDeployTransaction(
    _lzChainId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_lzChainId, overrides || {});
  }
  override attach(address: string): Cluster {
    return super.attach(address) as Cluster;
  }
  override connect(signer: Signer): Cluster__factory {
    return super.connect(signer) as Cluster__factory;
  }
  static readonly contractName: "Cluster";

  public readonly contractName: "Cluster";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClusterInterface {
    return new utils.Interface(_abi) as ClusterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Cluster {
    return new Contract(address, _abi, signerOrProvider) as Cluster;
  }
}
