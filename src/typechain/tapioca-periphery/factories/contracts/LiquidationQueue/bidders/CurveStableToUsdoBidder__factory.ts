/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CurveStableToUsdoBidder,
  CurveStableToUsdoBidderInterface,
} from "../../../../contracts/LiquidationQueue/bidders/CurveStableToUsdoBidder";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ICurveSwapper",
        name: "curveSwapper_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "curvePoolAssetCount_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_old",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_new",
        type: "address",
      },
    ],
    name: "CurveSwapperUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "curveSwapper",
    outputs: [
      {
        internalType: "contract ICurveSwapper",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISingularity",
        name: "singularity",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenInId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "getInputAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISingularity",
        name: "singularity",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenInId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "getOutputAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICurveSwapper",
        name: "_swapper",
        type: "address",
      },
    ],
    name: "setCurveSwapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISingularity",
        name: "singularity",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenInId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "direct",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "renounce",
        type: "bool",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080346100ab57601f61198938819003918201601f19168301916001600160401b038311848410176100b05780849260409485528339810103126100ab5780516001600160a01b03811691908290036100ab576020015160008054336001600160a01b03199182168117835560405194927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a360025416176002556003556118c290816100c78239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600436101561001457600080fd5b600091823560e01c90816306fdde03146103a457508063078dfbe71461028f5780634e71e0c8146101e25780635810e7ec146101695780635dd82b361461014c5780638da5cb5b14610125578063b691d78c14610107578063e30c3978146100df578063e91f9961146100b75763fef744fa1461009057600080fd5b346100b3576020906100ac6100a436610442565b50509161081d565b9051908152f35b5080fd5b50346100b357816003193601126100b35760025490516001600160a01b039091168152602090f35b50346100b357816003193601126100b35760015490516001600160a01b039091168152602090f35b50346100b3576020906100ac61011c36610442565b93929092610a20565b50346100b357816003193601126100b357905490516001600160a01b039091168152602090f35b50346100b3576020906100ac61016136610442565b5050916105ff565b82346101df5760203660031901126101df576004356001600160a01b03818116918290036101db5761019f8184541633146104ab565b816002549182167faa9eb2cf6e6a7bce28901c01eb97556feb7824a5a9b13df2c67580509a62633f8580a36001600160a01b0319161760025580f35b8280fd5b80fd5b50346100b357816003193601126100b3576001546001600160a01b0391828216903382900361024c57508084549384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a01b03199283161783551660015580f35b5162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152606490fd5b50346100b35760603660031901126100b3576001600160a01b039060043582811691908290036103a057602435801515810361039c57604435908115158203610398576102e08587541633146104ab565b1561037f57821590811591610377575b501561033c57508083549283167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a36001600160a01b031991821617825560018054909116905580f35b5162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b6044820152606490fd5b9050386102f0565b5050600180546001600160a01b03191690911790555080f35b8580fd5b8480fd5b8380fd5b919050346101db57826003193601126101db576103fe92506103c5826104f6565b601a825279737461626c65202d3e205553444f2028334372762b5553444f2960301b602083015251918291602083526020830190610402565b0390f35b919082519283825260005b84811061042e575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161040d565b60806003198201126104a6576004356001600160a01b03811681036104a6579160243591604435916064356001600160401b03928382116104a657806023830112156104a65781600401359384116104a657602484830101116104a6576024019190565b600080fd5b156104b257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b604081019081106001600160401b0382111761051157604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161051157604052565b608081019081106001600160401b0382111761051157604052565b606081019081106001600160401b0382111761051157604052565b90601f801991011681019081106001600160401b0382111761051157604052565b51906001600160a01b03821682036104a657565b156105ac57565b60405162461bcd60e51b815260206004820152600c60248201526b1554d113c81b9bdd081cd95d60a21b6044820152606490fd5b908160209103126104a657516001600160a01b03811681036104a65790565b60408051636c3d8b8f60e01b808252919594936001600160a01b03939092916020918516908281600481855afa9081156107da57869184916000916107e5575b5060048b5180948193631192124760e11b8352165afa80156107da5786906000906107a1575b61067292501615156105a5565b87519283528183600481845afa8015610721578593600091610765575b50829060048a51809881936386c8e21d60e01b8352165afa94851561072157600095610736575b5084841461072c578160049189519283809263de40657760e01b82525afa918215610721576106f19798506000926106f4575b505016611470565b90565b6107139250803d1061071a575b61070b8183610570565b8101906105e0565b38806106e9565b503d610701565b88513d6000823e3d90fd5b5093955050505050565b90948282813d831161075e575b61074d8183610570565b810103126101df57505193386106b6565b503d610743565b919280945082813d831161079a575b61077e8183610570565b810103126101df57509082610794869493610591565b9061068f565b503d610774565b90508382813d83116107d3575b6107b88183610570565b810103126101df5750856107ce61067292610591565b610665565b503d6107ae565b89513d6000823e3d90fd5b92509082813d8111610816575b6107fc8183610570565b810103126101df5750826108108792610591565b3861063f565b503d6107f2565b60408051636c3d8b8f60e01b80825291959493926001600160a01b0392916020918416908281600481855afa9081156107da57859184916000916109b1575b5060048b5180948193631192124760e11b8352165afa80156107da578590600090610978575b61088f92501615156105a5565b87519283528183600481845afa801561072157849360009161093c575b50829060048a51809781936386c8e21d60e01b8352165afa9384156107215760009461090d575b5083851461072c578160049189519283809263de40657760e01b82525afa918215610721576106f19798506000926106f457505016611470565b90938282813d8311610935575b6109248183610570565b810103126101df57505192386108d3565b503d61091a565b919280945082813d8311610971575b6109558183610570565b810103126101df5750908261096b859493610591565b906108ac565b503d61094b565b90508382813d83116109aa575b61098f8183610570565b810103126101df5750846109a561088f92610591565b610882565b503d610985565b92509082813d81116109e2575b6109c88183610570565b810103126101df5750826109dc8692610591565b3861085c565b503d6109be565b519081151582036104a657565b6001600160a01b039182168152911660208201526040810191909152606081019190915260800190565b604051636c3d8b8f60e01b8082529496956000959490939290916001600160a01b0390911690602081600481855afa908115610e75578791611235575b50604051631192124760e11b815298906001600160a01b031660208a600481845afa998a15610eb457889a6111ed575b50610aa76020969798999a60018060a01b031615156105a5565b6040519586809263473ec51560e11b825285600483015260249889915afa908115610f475789916111b3575b501561117c5760405163de40657760e01b815291602083600481845afa928315610f4757899361115b575b5060405163c23ea21f60e01b815297602089600481855afa988915610f01578a99611139575b5060209060046040518094819382525afa908115610f475789916110f8575b506040516386c8e21d60e01b81529190602090839060049082906001600160a01b03165afa918215610f475789926110c0575b506001600160a01b038816330361109257818514610fa357889680610f8a575b5050600254604051638eb22cdd60e01b815260048101869052868101859052604481018a9052906001600160a01b03908116906020908390606490829088165afa918215610f01578a92610f56575b506001600160a01b0384163b15610f5257858a91610c186040519485938493630208d92960e11b855230600486016109f6565b0381836001600160a01b0388165af18015610f4757908991610f2f575b5050604051630cf35bdd60e41b80825260048201869052939060808188816001600160a01b0388165afa908115610f01578a91610f0c575b506040519485526004850183905260808588816001600160a01b0388165afa948515610f01578a95610ebf575b5090610cb0610caa602093611715565b95611715565b60405195610cbd87610555565b6002875260403685890137610cd1876112ac565b52610cdb866112cf565b52606460405180958193638eb22cdd60e01b83528960048401528a8301528c604483015260018060a01b03165afa918215610eb4578892610e80575b5060018060a01b03600254169460405194633d9545e960e11b86526004860152840152866044840152606483015260016084830152600160a483015261014091828160c481875afa928315610e755792610dbe92889260409796958493610e3a575b5050610d93610da1610de7928951928391602083016113c9565b03601f198101835282610570565b875163efa84c6d60e01b8152988997889687956004870190611404565b6101448501526001600160a01b03166101648401526101a06101848401526101a4830190610402565b03925af1918215610e2e578092610dfd57505090565b9091506040823d604011610e26575b81610e1960409383610570565b810103126101df57505190565b3d9150610e0c565b604051903d90823e3d90fd5b610de7929350610e66610d939282610da193903d10610e6e575b610e5e8183610570565b8101906112df565b939250610d79565b503d610e54565b6040513d89823e3d90fd5b9091506020813d602011610eac575b81610e9c60209383610570565b810103126104a657519038610d17565b3d9150610e8f565b6040513d8a823e3d90fd5b602092919550610caa610eec610cb09260803d608011610efa575b610ee48183610570565b810190611273565b505090509692935050610c9a565b503d610eda565b6040513d8c823e3d90fd5b610f25915060803d608011610efa57610ee48183610570565b5050905038610c6d565b610f3890610527565b610f43578738610c35565b8780fd5b6040513d8b823e3d90fd5b8980fd5b9091506020813d602011610f82575b81610f7260209383610570565b810103126104a657519038610be5565b3d9150610f65565b819297509060209181010312610f435735943880610b96565b5050604051638eb22cdd60e01b815260048101849052938401829052604484018790529095949293506001600160a01b031691602084606481865afa938415611087578594611053575b50823b1561039c57604051630208d92960e11b8152938593859390928492869284926110289291906001600160a01b031630600486016109f6565b03925af180156110485761103b57505090565b61104490610527565b5090565b6040513d84823e3d90fd5b9093506020813d60201161107f575b8161106f60209383610570565b8101031261039c57519238610fed565b3d9150611062565b6040513d87823e3d90fd5b60405162461bcd60e51b815260206004820152600781880152666f6e6c79204c5160c81b6044820152606490fd5b9091506020813d6020116110f0575b816110dc60209383610570565b810103126110ec57519038610b76565b8880fd5b3d91506110cf565b90506020813d602011611131575b8161111360209383610570565b810103126110ec57906020611129600493610591565b919250610b43565b3d9150611106565b602091995061115490823d841161071a5761070b8183610570565b9890610b24565b61117591935060203d60201161071a5761070b8183610570565b9138610afe565b60405162461bcd60e51b8152602060048201526010818701526f13585c9ad95d081b9bdd081d985b1a5960821b6044820152606490fd5b90506020813d6020116111e5575b816111ce60209383610570565b810103126110ec576111df906109e9565b38610ad3565b3d91506111c1565b995060208a3d60201161122d575b8161120860209383610570565b81010312610f4357610aa761122260209798999a9b610591565b9a9998979650610a8d565b3d91506111fb565b90506020813d60201161126b575b8161125060209383610570565b810103126112675761126190610591565b38610a5d565b8680fd5b3d9150611243565b91908260809103126104a657815160058110156104a6579161129760208201610591565b9160606112a660408401610591565b92015190565b8051156112b95760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156112b95760400190565b8091039061014082126104a6576040805192606084018481106001600160401b0382111761051157808352608082126104a65761131b8161053a565b61132484610591565b81526020840151608086015261133b838501610591565b60a0860152606084015160c086015284526080607f198201126104a657819081516113658161053a565b6080850151815260a0850151602082015260c08501518382015260e08501516060820152602086015260ff1901126104a6576113be6101208251936113a9856104f6565b6113b661010082016109e9565b8552016109e9565b602083015282015290565b6020908160408183019282815285518094520193019160005b8281106113f0575050505090565b8351855293810193928101926001016113e2565b60206040610120926060815160018060a01b03808251168852858201518689015284820151168488015201516060860152606083820151805160808801528481015160a08801528381015160c0880152015160e086015201518051151561010085015201511515910152565b60408051630cf35bdd60e41b808252600482018590529496959194608094936001600160a01b03908116939290918682602481885afa918215610721576000926116f2575b5087519081528960048201528681602481885afa968715610721576000976116c0575b5050906114f06114ea60649493611715565b96611715565b958751946114fd86610555565b6002865260209788928a36858a0137611515886112ac565b5261151f876112cf565b52885194858092638eb22cdd60e01b8252896004830152866024830152600060448301525afa9283156116b557600093611686575b506002541697865194633d9545e960e11b8652600486015260248501526044840152606483015260016084830152600160a483015261014091828160c4818a5afa92831561167b5784936115c7936116069899936115f293600093611656575b50506115d59088519586918883016113c9565b03601f198101865285610570565b8651630b7ecdc960e31b8152978894859384936004850190611404565b610160610144840152610164830190610402565b03915afa91821561164c5750600091611620575b50905090565b82813d8311611645575b6116348183610570565b810103126101df575051803861161a565b503d61162a565b513d6000823e3d90fd5b6115d5929350908161167392903d10610e6e57610e5e8183610570565b9190386115b4565b85513d6000823e3d90fd5b90928682813d83116116ae575b61169d8183610570565b810103126101df5750519138611554565b503d611693565b87513d6000823e3d90fd5b606494939297506116e46114f092826114ea93903d10610efa57610ee48183610570565b5050905097929394506114d8565b61170a919250873d8911610efa57610ee48183610570565b5050905090386114b5565b600254604080516310c3a8d960e11b8152600492602092916001600160a01b0391849082908790829086165afa9081156118815790829160009161184a575b50169060001995600092600354935b8481106117b257505050505060001984131561177f5750505090565b5162461bcd60e51b815291820152600f60248201526e185cdcd95d081b9bdd08199bdd5b99608a1b604482015260649150fd5b855163c661065760e01b81528881018290528781602481865afa9081156116b557600091611815575b5084168385161461180d575b60001981146117f857600101611763565b601188634e487b7160e01b6000525260246000fd5b9750876117e7565b908882813d8311611843575b61182b8183610570565b810103126101df575061183d90610591565b386117db565b503d611821565b91508482813d831161187a575b6118618183610570565b810103126101df57506118748291610591565b38611754565b503d611857565b83513d6000823e3d90fdfea26469706673582212208593f8473ce8da5a34ea9fd1ccdf334d293a7b9b1065b0632721065949947ece64736f6c63430008120033";

type CurveStableToUsdoBidderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveStableToUsdoBidderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveStableToUsdoBidder__factory extends ContractFactory {
  constructor(...args: CurveStableToUsdoBidderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CurveStableToUsdoBidder";
  }

  override deploy(
    curveSwapper_: PromiseOrValue<string>,
    curvePoolAssetCount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveStableToUsdoBidder> {
    return super.deploy(
      curveSwapper_,
      curvePoolAssetCount_,
      overrides || {}
    ) as Promise<CurveStableToUsdoBidder>;
  }
  override getDeployTransaction(
    curveSwapper_: PromiseOrValue<string>,
    curvePoolAssetCount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      curveSwapper_,
      curvePoolAssetCount_,
      overrides || {}
    );
  }
  override attach(address: string): CurveStableToUsdoBidder {
    return super.attach(address) as CurveStableToUsdoBidder;
  }
  override connect(signer: Signer): CurveStableToUsdoBidder__factory {
    return super.connect(signer) as CurveStableToUsdoBidder__factory;
  }
  static readonly contractName: "CurveStableToUsdoBidder";

  public readonly contractName: "CurveStableToUsdoBidder";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveStableToUsdoBidderInterface {
    return new utils.Interface(_abi) as CurveStableToUsdoBidderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveStableToUsdoBidder {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CurveStableToUsdoBidder;
  }
}
