/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  FunctionUtils,
  FunctionUtilsInterface,
} from "../../../../contracts/oracle/utils/FunctionUtils";

const _abi = [
  {
    inputs: [],
    name: "BASE_PARAMS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BASE_TOKENS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100155760ad908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c9081639f48118f146057575063df1b8bd314603457600080fd5b34605457806003193601126054576020604051670de0b6b3a76400008152f35b80fd5b9050346073578160031936011260735780633b9aca0060209252f35b5080fdfea2646970667358221220ddf67579a93395e61ba94195122e12f7c0c7e21a96a668ed92fa6dcbce48adbd64736f6c63430008120033";

type FunctionUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FunctionUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FunctionUtils__factory extends ContractFactory {
  constructor(...args: FunctionUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FunctionUtils";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FunctionUtils> {
    return super.deploy(overrides || {}) as Promise<FunctionUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FunctionUtils {
    return super.attach(address) as FunctionUtils;
  }
  override connect(signer: Signer): FunctionUtils__factory {
    return super.connect(signer) as FunctionUtils__factory;
  }
  static readonly contractName: "FunctionUtils";

  public readonly contractName: "FunctionUtils";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FunctionUtilsInterface {
    return new utils.Interface(_abi) as FunctionUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FunctionUtils {
    return new Contract(address, _abi, signerOrProvider) as FunctionUtils;
  }
}
