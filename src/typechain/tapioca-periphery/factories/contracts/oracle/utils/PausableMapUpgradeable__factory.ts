/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  PausableMapUpgradeable,
  PausableMapUpgradeableInterface,
} from "../../../../contracts/oracle/utils/PausableMapUpgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346014576089908161001a8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c639e9e466614602857600080fd5b34604f576020366003190112604f5760ff6040602093600435815280855220541615158152f35b5080fdfea2646970667358221220f805f17cfc3a6006124c6635d7e4c88e658e6891d19802b4831fcc60a31b872364736f6c63430008120033";

type PausableMapUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PausableMapUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PausableMapUpgradeable__factory extends ContractFactory {
  constructor(...args: PausableMapUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "PausableMapUpgradeable";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PausableMapUpgradeable> {
    return super.deploy(overrides || {}) as Promise<PausableMapUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PausableMapUpgradeable {
    return super.attach(address) as PausableMapUpgradeable;
  }
  override connect(signer: Signer): PausableMapUpgradeable__factory {
    return super.connect(signer) as PausableMapUpgradeable__factory;
  }
  static readonly contractName: "PausableMapUpgradeable";

  public readonly contractName: "PausableMapUpgradeable";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PausableMapUpgradeableInterface {
    return new utils.Interface(_abi) as PausableMapUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PausableMapUpgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PausableMapUpgradeable;
  }
}
