/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SequencerCheck,
  SequencerCheckInterface,
} from "../../../../contracts/oracle/utils/SequencerCheck";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_sequencerUptimeFeed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GracePeriodNotOver",
    type: "error",
  },
  {
    inputs: [],
    name: "SequencerDown",
    type: "error",
  },
  {
    inputs: [],
    name: "GRACE_PERIOD_TIME",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SEQUENCER_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SEQUENCER_UPTIME_FEED",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_gracePeriod",
        type: "uint32",
      },
    ],
    name: "changeGracePeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461007c57601f6101e738819003918201601f19168301916001600160401b038311848410176100815780849260209460405283398101031261007c57516001600160a01b0381169081900361007c57610e1063ffffffff19600054161760005560805260405161014f908161009882396080518160880152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c908163408b0546146100f55781634842855c146100b757508063c5980182146100725763ed2f86031461004d57600080fd5b3461006f578060031936011261006f5763ffffffff6020915416604051908152f35b80fd5b503461006f578060031936011261006f576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346100f157816003193601126100f157807fac4f1890dc96c9a02330d1fa696648a38f3b282d2449c2d8e6f10507488c84c860209252f35b5080fd5b823461006f57602036600319011261006f5760043563ffffffff81160361006f5780f3fea264697066735822122070b94a05cfdf59b0c1cb1f5ae303d1e29e0f01f4a7aedb3f6d73ca8f8cda82f464736f6c63430008130033";

type SequencerCheckConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SequencerCheckConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SequencerCheck__factory extends ContractFactory {
  constructor(...args: SequencerCheckConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SequencerCheck";
  }

  override deploy(
    _sequencerUptimeFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SequencerCheck> {
    return super.deploy(
      _sequencerUptimeFeed,
      overrides || {}
    ) as Promise<SequencerCheck>;
  }
  override getDeployTransaction(
    _sequencerUptimeFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_sequencerUptimeFeed, overrides || {});
  }
  override attach(address: string): SequencerCheck {
    return super.attach(address) as SequencerCheck;
  }
  override connect(signer: Signer): SequencerCheck__factory {
    return super.connect(signer) as SequencerCheck__factory;
  }
  static readonly contractName: "SequencerCheck";

  public readonly contractName: "SequencerCheck";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SequencerCheckInterface {
    return new utils.Interface(_abi) as SequencerCheckInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SequencerCheck {
    return new Contract(address, _abi, signerOrProvider) as SequencerCheck;
  }
}
