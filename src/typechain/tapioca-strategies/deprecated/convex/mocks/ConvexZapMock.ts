/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ConvexZapMockInterface extends utils.Interface {
  functions: {
    "claimRewards(address[],address[],address[],address[],uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "cvx()": FunctionFragment;
    "cvxRewards()": FunctionFragment;
    "reward1()": FunctionFragment;
    "reward2()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRewards"
      | "claimRewards(address[],address[],address[],address[],uint256,uint256,uint256,uint256,uint256)"
      | "cvx"
      | "cvx()"
      | "cvxRewards"
      | "cvxRewards()"
      | "reward1"
      | "reward1()"
      | "reward2"
      | "reward2()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards(address[],address[],address[],address[],uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "cvx", values?: undefined): string;
  encodeFunctionData(functionFragment: "cvx()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cvxRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cvxRewards()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reward1", values?: undefined): string;
  encodeFunctionData(functionFragment: "reward1()", values?: undefined): string;
  encodeFunctionData(functionFragment: "reward2", values?: undefined): string;
  encodeFunctionData(functionFragment: "reward2()", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards(address[],address[],address[],address[],uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cvx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cvx()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cvxRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cvxRewards()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward1()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward2()", data: BytesLike): Result;

  events: {};
}

export interface ConvexZapMock extends BaseContract {
  contractName: "ConvexZapMock";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConvexZapMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<string>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<BigNumberish>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimRewards(address[],address[],address[],address[],uint256,uint256,uint256,uint256,uint256)"(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<string>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<BigNumberish>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cvx(overrides?: CallOverrides): Promise<[string]>;

    "cvx()"(overrides?: CallOverrides): Promise<[string]>;

    cvxRewards(overrides?: CallOverrides): Promise<[string]>;

    "cvxRewards()"(overrides?: CallOverrides): Promise<[string]>;

    reward1(overrides?: CallOverrides): Promise<[string]>;

    "reward1()"(overrides?: CallOverrides): Promise<[string]>;

    reward2(overrides?: CallOverrides): Promise<[string]>;

    "reward2()"(overrides?: CallOverrides): Promise<[string]>;
  };

  claimRewards(
    arg0: PromiseOrValue<string>[],
    arg1: PromiseOrValue<string>[],
    arg2: PromiseOrValue<string>[],
    arg3: PromiseOrValue<string>[],
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    arg6: PromiseOrValue<BigNumberish>,
    arg7: PromiseOrValue<BigNumberish>,
    arg8: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimRewards(address[],address[],address[],address[],uint256,uint256,uint256,uint256,uint256)"(
    arg0: PromiseOrValue<string>[],
    arg1: PromiseOrValue<string>[],
    arg2: PromiseOrValue<string>[],
    arg3: PromiseOrValue<string>[],
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    arg6: PromiseOrValue<BigNumberish>,
    arg7: PromiseOrValue<BigNumberish>,
    arg8: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cvx(overrides?: CallOverrides): Promise<string>;

  "cvx()"(overrides?: CallOverrides): Promise<string>;

  cvxRewards(overrides?: CallOverrides): Promise<string>;

  "cvxRewards()"(overrides?: CallOverrides): Promise<string>;

  reward1(overrides?: CallOverrides): Promise<string>;

  "reward1()"(overrides?: CallOverrides): Promise<string>;

  reward2(overrides?: CallOverrides): Promise<string>;

  "reward2()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claimRewards(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<string>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<BigNumberish>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimRewards(address[],address[],address[],address[],uint256,uint256,uint256,uint256,uint256)"(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<string>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<BigNumberish>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cvx(overrides?: CallOverrides): Promise<string>;

    "cvx()"(overrides?: CallOverrides): Promise<string>;

    cvxRewards(overrides?: CallOverrides): Promise<string>;

    "cvxRewards()"(overrides?: CallOverrides): Promise<string>;

    reward1(overrides?: CallOverrides): Promise<string>;

    "reward1()"(overrides?: CallOverrides): Promise<string>;

    reward2(overrides?: CallOverrides): Promise<string>;

    "reward2()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    claimRewards(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<string>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<BigNumberish>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimRewards(address[],address[],address[],address[],uint256,uint256,uint256,uint256,uint256)"(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<string>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<BigNumberish>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cvx(overrides?: CallOverrides): Promise<BigNumber>;

    "cvx()"(overrides?: CallOverrides): Promise<BigNumber>;

    cvxRewards(overrides?: CallOverrides): Promise<BigNumber>;

    "cvxRewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward1(overrides?: CallOverrides): Promise<BigNumber>;

    "reward1()"(overrides?: CallOverrides): Promise<BigNumber>;

    reward2(overrides?: CallOverrides): Promise<BigNumber>;

    "reward2()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<string>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<BigNumberish>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimRewards(address[],address[],address[],address[],uint256,uint256,uint256,uint256,uint256)"(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<string>[],
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<string>[],
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<BigNumberish>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cvx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cvx()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cvxRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cvxRewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reward1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reward2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
