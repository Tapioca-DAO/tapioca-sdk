/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LidoEthStrategyInterface extends utils.Interface {
  functions: {
    "cheapWithdrawable()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "compound(bytes)": FunctionFragment;
    "compoundAmount()": FunctionFragment;
    "contractAddress()": FunctionFragment;
    "currentBalance()": FunctionFragment;
    "curveStEthPool()": FunctionFragment;
    "depositThreshold()": FunctionFragment;
    "deposited(uint256)": FunctionFragment;
    "description()": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "name()": FunctionFragment;
    "oracleData()": FunctionFragment;
    "oracleDeviation()": FunctionFragment;
    "oracleEthStEth()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "rescueEth(uint256,address)": FunctionFragment;
    "setDepositThreshold(uint256)": FunctionFragment;
    "setOracleDetails(address,bytes,uint256)": FunctionFragment;
    "setSlippage(uint256)": FunctionFragment;
    "stEth()": FunctionFragment;
    "tokenId()": FunctionFragment;
    "tokenType()": FunctionFragment;
    "transferOwnership(address,bool,bool)": FunctionFragment;
    "updatePaused(bool)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawable()": FunctionFragment;
    "wrappedNative()": FunctionFragment;
    "yieldBox()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cheapWithdrawable"
      | "cheapWithdrawable()"
      | "claimOwnership"
      | "claimOwnership()"
      | "compound"
      | "compound(bytes)"
      | "compoundAmount"
      | "compoundAmount()"
      | "contractAddress"
      | "contractAddress()"
      | "currentBalance"
      | "currentBalance()"
      | "curveStEthPool"
      | "curveStEthPool()"
      | "depositThreshold"
      | "depositThreshold()"
      | "deposited"
      | "deposited(uint256)"
      | "description"
      | "description()"
      | "emergencyWithdraw"
      | "emergencyWithdraw()"
      | "name"
      | "name()"
      | "oracleData"
      | "oracleData()"
      | "oracleDeviation"
      | "oracleDeviation()"
      | "oracleEthStEth"
      | "oracleEthStEth()"
      | "owner"
      | "owner()"
      | "paused"
      | "paused()"
      | "pendingOwner"
      | "pendingOwner()"
      | "rescueEth"
      | "rescueEth(uint256,address)"
      | "setDepositThreshold"
      | "setDepositThreshold(uint256)"
      | "setOracleDetails"
      | "setOracleDetails(address,bytes,uint256)"
      | "setSlippage"
      | "setSlippage(uint256)"
      | "stEth"
      | "stEth()"
      | "tokenId"
      | "tokenId()"
      | "tokenType"
      | "tokenType()"
      | "transferOwnership"
      | "transferOwnership(address,bool,bool)"
      | "updatePaused"
      | "updatePaused(bool)"
      | "withdraw"
      | "withdraw(address,uint256)"
      | "withdrawable"
      | "withdrawable()"
      | "wrappedNative"
      | "wrappedNative()"
      | "yieldBox"
      | "yieldBox()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cheapWithdrawable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cheapWithdrawable()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compound",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "compound(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "compoundAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compoundAmount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBalance()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curveStEthPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curveStEthPool()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositThreshold()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposited",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposited(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "description()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleData()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleDeviation()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleEthStEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleEthStEth()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueEth",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueEth(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositThreshold(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleDetails",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleDetails(address,bytes,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlippage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlippage(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "stEth", values?: undefined): string;
  encodeFunctionData(functionFragment: "stEth()", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenId()", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenType()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaused(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawable()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNative()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yieldBox()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cheapWithdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cheapWithdrawable()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compound(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundAmount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBalance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveStEthPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveStEthPool()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositThreshold()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposited", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposited(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracleData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleData()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleDeviation()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleEthStEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleEthStEth()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescueEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rescueEth(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositThreshold(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleDetails(address,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlippage(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stEth()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenType()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePaused(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawable()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNative()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldBox()", data: BytesLike): Result;

  events: {
    "AmountDeposited(uint256)": EventFragment;
    "AmountQueued(uint256)": EventFragment;
    "AmountWithdrawn(address,uint256)": EventFragment;
    "DepositThreshold(uint256,uint256)": EventFragment;
    "OracleDataUpdated()": EventFragment;
    "OracleDeviationUpdated(uint256,uint256)": EventFragment;
    "OracleUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmountDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmountDeposited(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmountQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmountQueued(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmountWithdrawn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AmountWithdrawn(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositThreshold"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DepositThreshold(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleDataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleDataUpdated()"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleDeviationUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OracleDeviationUpdated(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OracleUpdated(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
}

export interface AmountDepositedEventObject {
  amount: BigNumber;
}
export type AmountDepositedEvent = TypedEvent<
  [BigNumber],
  AmountDepositedEventObject
>;

export type AmountDepositedEventFilter = TypedEventFilter<AmountDepositedEvent>;

export interface AmountQueuedEventObject {
  amount: BigNumber;
}
export type AmountQueuedEvent = TypedEvent<
  [BigNumber],
  AmountQueuedEventObject
>;

export type AmountQueuedEventFilter = TypedEventFilter<AmountQueuedEvent>;

export interface AmountWithdrawnEventObject {
  to: string;
  amount: BigNumber;
}
export type AmountWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  AmountWithdrawnEventObject
>;

export type AmountWithdrawnEventFilter = TypedEventFilter<AmountWithdrawnEvent>;

export interface DepositThresholdEventObject {
  _old: BigNumber;
  _new: BigNumber;
}
export type DepositThresholdEvent = TypedEvent<
  [BigNumber, BigNumber],
  DepositThresholdEventObject
>;

export type DepositThresholdEventFilter =
  TypedEventFilter<DepositThresholdEvent>;

export interface OracleDataUpdatedEventObject {}
export type OracleDataUpdatedEvent = TypedEvent<
  [],
  OracleDataUpdatedEventObject
>;

export type OracleDataUpdatedEventFilter =
  TypedEventFilter<OracleDataUpdatedEvent>;

export interface OracleDeviationUpdatedEventObject {
  _old: BigNumber;
  _new: BigNumber;
}
export type OracleDeviationUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  OracleDeviationUpdatedEventObject
>;

export type OracleDeviationUpdatedEventFilter =
  TypedEventFilter<OracleDeviationUpdatedEvent>;

export interface OracleUpdatedEventObject {
  _old: string;
  _new: string;
}
export type OracleUpdatedEvent = TypedEvent<
  [string, string],
  OracleUpdatedEventObject
>;

export type OracleUpdatedEventFilter = TypedEventFilter<OracleUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LidoEthStrategy extends BaseContract {
  contractName: "LidoEthStrategy";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LidoEthStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cheapWithdrawable(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "cheapWithdrawable()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    compound(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "compound(bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    compoundAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    "compoundAmount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    contractAddress(overrides?: CallOverrides): Promise<[string]>;

    "contractAddress()"(overrides?: CallOverrides): Promise<[string]>;

    currentBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "currentBalance()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    curveStEthPool(overrides?: CallOverrides): Promise<[string]>;

    "curveStEthPool()"(overrides?: CallOverrides): Promise<[string]>;

    depositThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "depositThreshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposited(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposited(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    description(
      overrides?: CallOverrides
    ): Promise<[string] & { description_: string }>;

    "description()"(
      overrides?: CallOverrides
    ): Promise<[string] & { description_: string }>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string] & { name_: string }>;

    "name()"(overrides?: CallOverrides): Promise<[string] & { name_: string }>;

    oracleData(overrides?: CallOverrides): Promise<[string]>;

    "oracleData()"(overrides?: CallOverrides): Promise<[string]>;

    oracleDeviation(overrides?: CallOverrides): Promise<[BigNumber]>;

    "oracleDeviation()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleEthStEth(overrides?: CallOverrides): Promise<[string]>;

    "oracleEthStEth()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setDepositThreshold(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleDetails(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _oracleDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setOracleDetails(address,bytes,uint256)"(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _oracleDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSlippage(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setSlippage(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stEth(overrides?: CallOverrides): Promise<[string]>;

    "stEth()"(overrides?: CallOverrides): Promise<[string]>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenType(overrides?: CallOverrides): Promise<[number]>;

    "tokenType()"(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePaused(
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePaused(bool)"(
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawable(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "withdrawable()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    wrappedNative(overrides?: CallOverrides): Promise<[string]>;

    "wrappedNative()"(overrides?: CallOverrides): Promise<[string]>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;

    "yieldBox()"(overrides?: CallOverrides): Promise<[string]>;
  };

  cheapWithdrawable(overrides?: CallOverrides): Promise<BigNumber>;

  "cheapWithdrawable()"(overrides?: CallOverrides): Promise<BigNumber>;

  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  compound(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "compound(bytes)"(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  compoundAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "compoundAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  contractAddress(overrides?: CallOverrides): Promise<string>;

  "contractAddress()"(overrides?: CallOverrides): Promise<string>;

  currentBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "currentBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  curveStEthPool(overrides?: CallOverrides): Promise<string>;

  "curveStEthPool()"(overrides?: CallOverrides): Promise<string>;

  depositThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "depositThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposited(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposited(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  description(overrides?: CallOverrides): Promise<string>;

  "description()"(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  oracleData(overrides?: CallOverrides): Promise<string>;

  "oracleData()"(overrides?: CallOverrides): Promise<string>;

  oracleDeviation(overrides?: CallOverrides): Promise<BigNumber>;

  "oracleDeviation()"(overrides?: CallOverrides): Promise<BigNumber>;

  oracleEthStEth(overrides?: CallOverrides): Promise<string>;

  "oracleEthStEth()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  rescueEth(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "rescueEth(uint256,address)"(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositThreshold(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setDepositThreshold(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleDetails(
    _oracle: PromiseOrValue<string>,
    _oracleData: PromiseOrValue<BytesLike>,
    _oracleDeviation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setOracleDetails(address,bytes,uint256)"(
    _oracle: PromiseOrValue<string>,
    _oracleData: PromiseOrValue<BytesLike>,
    _oracleDeviation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSlippage(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setSlippage(uint256)"(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stEth(overrides?: CallOverrides): Promise<string>;

  "stEth()"(overrides?: CallOverrides): Promise<string>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenType(overrides?: CallOverrides): Promise<number>;

  "tokenType()"(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    direct: PromiseOrValue<boolean>,
    renounce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address,bool,bool)"(
    newOwner: PromiseOrValue<string>,
    direct: PromiseOrValue<boolean>,
    renounce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePaused(
    _val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePaused(bool)"(
    _val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawable(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawable()"(overrides?: CallOverrides): Promise<BigNumber>;

  wrappedNative(overrides?: CallOverrides): Promise<string>;

  "wrappedNative()"(overrides?: CallOverrides): Promise<string>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  "yieldBox()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cheapWithdrawable(overrides?: CallOverrides): Promise<BigNumber>;

    "cheapWithdrawable()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    compound(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "compound(bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    compoundAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "compoundAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractAddress(overrides?: CallOverrides): Promise<string>;

    "contractAddress()"(overrides?: CallOverrides): Promise<string>;

    currentBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "currentBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    curveStEthPool(overrides?: CallOverrides): Promise<string>;

    "curveStEthPool()"(overrides?: CallOverrides): Promise<string>;

    depositThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "depositThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposited(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposited(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    description(overrides?: CallOverrides): Promise<string>;

    "description()"(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    "emergencyWithdraw()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    oracleData(overrides?: CallOverrides): Promise<string>;

    "oracleData()"(overrides?: CallOverrides): Promise<string>;

    oracleDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleDeviation()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleEthStEth(overrides?: CallOverrides): Promise<string>;

    "oracleEthStEth()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDepositThreshold(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleDetails(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _oracleDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOracleDetails(address,bytes,uint256)"(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _oracleDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlippage(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSlippage(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stEth(overrides?: CallOverrides): Promise<string>;

    "stEth()"(overrides?: CallOverrides): Promise<string>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenType(overrides?: CallOverrides): Promise<number>;

    "tokenType()"(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePaused(
      _val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePaused(bool)"(
      _val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawable(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawable()"(overrides?: CallOverrides): Promise<BigNumber>;

    wrappedNative(overrides?: CallOverrides): Promise<string>;

    "wrappedNative()"(overrides?: CallOverrides): Promise<string>;

    yieldBox(overrides?: CallOverrides): Promise<string>;

    "yieldBox()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AmountDeposited(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): AmountDepositedEventFilter;
    AmountDeposited(
      amount?: PromiseOrValue<BigNumberish> | null
    ): AmountDepositedEventFilter;

    "AmountQueued(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): AmountQueuedEventFilter;
    AmountQueued(
      amount?: PromiseOrValue<BigNumberish> | null
    ): AmountQueuedEventFilter;

    "AmountWithdrawn(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AmountWithdrawnEventFilter;
    AmountWithdrawn(
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AmountWithdrawnEventFilter;

    "DepositThreshold(uint256,uint256)"(
      _old?: PromiseOrValue<BigNumberish> | null,
      _new?: PromiseOrValue<BigNumberish> | null
    ): DepositThresholdEventFilter;
    DepositThreshold(
      _old?: PromiseOrValue<BigNumberish> | null,
      _new?: PromiseOrValue<BigNumberish> | null
    ): DepositThresholdEventFilter;

    "OracleDataUpdated()"(): OracleDataUpdatedEventFilter;
    OracleDataUpdated(): OracleDataUpdatedEventFilter;

    "OracleDeviationUpdated(uint256,uint256)"(
      _old?: PromiseOrValue<BigNumberish> | null,
      _new?: PromiseOrValue<BigNumberish> | null
    ): OracleDeviationUpdatedEventFilter;
    OracleDeviationUpdated(
      _old?: PromiseOrValue<BigNumberish> | null,
      _new?: PromiseOrValue<BigNumberish> | null
    ): OracleDeviationUpdatedEventFilter;

    "OracleUpdated(address,address)"(
      _old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): OracleUpdatedEventFilter;
    OracleUpdated(
      _old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): OracleUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    cheapWithdrawable(overrides?: CallOverrides): Promise<BigNumber>;

    "cheapWithdrawable()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    compound(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "compound(bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    compoundAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "compoundAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "contractAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "currentBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    curveStEthPool(overrides?: CallOverrides): Promise<BigNumber>;

    "curveStEthPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "depositThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposited(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposited(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    "description()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleData(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleData()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleDeviation()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleEthStEth(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleEthStEth()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setDepositThreshold(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleDetails(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _oracleDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setOracleDetails(address,bytes,uint256)"(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _oracleDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSlippage(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setSlippage(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stEth(overrides?: CallOverrides): Promise<BigNumber>;

    "stEth()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenType(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenType()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePaused(
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePaused(bool)"(
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawable(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawable()"(overrides?: CallOverrides): Promise<BigNumber>;

    wrappedNative(overrides?: CallOverrides): Promise<BigNumber>;

    "wrappedNative()"(overrides?: CallOverrides): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;

    "yieldBox()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cheapWithdrawable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cheapWithdrawable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    compound(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "compound(bytes)"(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    compoundAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "compoundAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curveStEthPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "curveStEthPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "depositThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposited(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposited(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "description()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracleData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleDeviation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracleDeviation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleEthStEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracleEthStEth()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setDepositThreshold(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleDetails(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _oracleDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setOracleDetails(address,bytes,uint256)"(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _oracleDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSlippage(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setSlippage(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stEth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePaused(
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePaused(bool)"(
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdrawable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrappedNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wrappedNative()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yieldBox()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
