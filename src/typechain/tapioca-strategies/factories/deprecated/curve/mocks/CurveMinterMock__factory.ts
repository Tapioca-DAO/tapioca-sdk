/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CurveMinterMock,
  CurveMinterMockInterface,
} from "../../../../deprecated/curve/mocks/CurveMinterMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract ERC20Mock",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161027f38038061027f83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101ec806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636a6278421461003b578063fc0c546a14610050575b600080fd5b61004e610049366004610164565b61007f565b005b600054610063906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600054604051637c928fe960e01b8152678ac7230489e8000060048201526001600160a01b0390911690637c928fe990602401600060405180830381600087803b1580156100cc57600080fd5b505af11580156100e0573d6000803e3d6000fd5b505060005460405163a9059cbb60e01b8152336004820152678ac7230489e8000060248201526001600160a01b03909116925063a9059cbb91506044016020604051808303816000875af115801561013c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101609190610194565b5050565b60006020828403121561017657600080fd5b81356001600160a01b038116811461018d57600080fd5b9392505050565b6000602082840312156101a657600080fd5b8151801515811461018d57600080fdfea264697066735822122044e489a9a41c83c50802652eb86034ceee9f025910f4813db39f5b481a029a1164736f6c63430008120033";

type CurveMinterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveMinterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveMinterMock__factory extends ContractFactory {
  constructor(...args: CurveMinterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CurveMinterMock";
  }

  override deploy(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveMinterMock> {
    return super.deploy(_token, overrides || {}) as Promise<CurveMinterMock>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  override attach(address: string): CurveMinterMock {
    return super.attach(address) as CurveMinterMock;
  }
  override connect(signer: Signer): CurveMinterMock__factory {
    return super.connect(signer) as CurveMinterMock__factory;
  }
  static readonly contractName: "CurveMinterMock";

  public readonly contractName: "CurveMinterMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveMinterMockInterface {
    return new utils.Interface(_abi) as CurveMinterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveMinterMock {
    return new Contract(address, _abi, signerOrProvider) as CurveMinterMock;
  }
}
