/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  YearnVaultMock,
  YearnVaultMockInterface,
} from "../../../../deprecated/yearn/mocks/YearnVaultMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "asset",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getUserAccountData",
    outputs: [
      {
        internalType: "uint256",
        name: "totalCollateralETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalDebtETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "availableBorrowsETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentLiquidationThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ltv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "healthFactor",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pricePerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107ad3803806107ad83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61071a806100936000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806370a082311161005b57806370a08231146100d657806399530b06146100e9578063bf92857c146100f1578063e63697c81461013157600080fd5b8063313ce5671461008257806338d52e0f146100985780636e553f65146100c3575b600080fd5b60055b6040519081526020015b60405180910390f35b6000546100ab906001600160a01b031681565b6040516001600160a01b03909116815260200161008f565b6100856100d13660046104f1565b610144565b6100856100e436600461051d565b610166565b6100856101d3565b6101046100ff36600461051d565b6101e6565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161008f565b61008561013f36600461053f565b610271565b6000805461015d906001600160a01b0316333086610291565b50815b92915050565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156101af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101609190610574565b60006101e16005600a610687565b905090565b600080546040516370a0823160e01b8152306004820152829182918291829182916001600160a01b0316906370a0823190602401602060405180830381865afa158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610574565b9760009750879650869550859450849350915050565b60008054610289906001600160a01b031684866103ba565b509192915050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916102f59190610693565b6000604051808303816000865af19150503d8060008114610332576040519150601f19603f3d011682016040523d82523d6000602084013e610337565b606091505b509150915081801561036157508051158061036157508080602001905181019061036191906106c2565b6103b25760405162461bcd60e51b815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c656460448201526064015b60405180910390fd5b505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916104169190610693565b6000604051808303816000865af19150503d8060008114610453576040519150601f19603f3d011682016040523d82523d6000602084013e610458565b606091505b509150915081801561048257508051158061048257508080602001905181019061048291906106c2565b6104ce5760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c65640000000060448201526064016103a9565b5050505050565b80356001600160a01b03811681146104ec57600080fd5b919050565b6000806040838503121561050457600080fd5b82359150610514602084016104d5565b90509250929050565b60006020828403121561052f57600080fd5b610538826104d5565b9392505050565b60008060006060848603121561055457600080fd5b83359250610564602085016104d5565b9150604084013590509250925092565b60006020828403121561058657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156105de5781600019048211156105c4576105c461058d565b808516156105d157918102915b93841c93908002906105a8565b509250929050565b6000826105f557506001610160565b8161060257506000610160565b816001811461061857600281146106225761063e565b6001915050610160565b60ff8411156106335761063361058d565b50506001821b610160565b5060208310610133831016604e8410600b8410161715610661575081810a610160565b61066b83836105a3565b806000190482111561067f5761067f61058d565b029392505050565b600061053883836105e6565b6000825160005b818110156106b4576020818601810151858301520161069a565b506000920191825250919050565b6000602082840312156106d457600080fd5b8151801515811461053857600080fdfea26469706673582212206317a197f11bc679b28182f73ddc92f438393fe96e1dca4fb1b130dad5f1a08964736f6c63430008120033";

type YearnVaultMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YearnVaultMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YearnVaultMock__factory extends ContractFactory {
  constructor(...args: YearnVaultMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "YearnVaultMock";
  }

  override deploy(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<YearnVaultMock> {
    return super.deploy(_asset, overrides || {}) as Promise<YearnVaultMock>;
  }
  override getDeployTransaction(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_asset, overrides || {});
  }
  override attach(address: string): YearnVaultMock {
    return super.attach(address) as YearnVaultMock;
  }
  override connect(signer: Signer): YearnVaultMock__factory {
    return super.connect(signer) as YearnVaultMock__factory;
  }
  static readonly contractName: "YearnVaultMock";

  public readonly contractName: "YearnVaultMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YearnVaultMockInterface {
    return new utils.Interface(_abi) as YearnVaultMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YearnVaultMock {
    return new Contract(address, _abi, signerOrProvider) as YearnVaultMock;
  }
}
