/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AaveStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveStrategy__factory>;
    getContractFactory(
      name: "AaveV3Strategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV3Strategy__factory>;
    getContractFactory(
      name: "AaveV3PoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV3PoolMock__factory>;
    getContractFactory(
      name: "LendingPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPoolMock__factory>;
    getContractFactory(
      name: "StkAaveMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StkAaveMock__factory>;
    getContractFactory(
      name: "BalancerStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerStrategy__factory>;
    getContractFactory(
      name: "BalancerHelpersMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerHelpersMock__factory>;
    getContractFactory(
      name: "BalancerPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerPoolMock__factory>;
    getContractFactory(
      name: "BalancerVaultMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerVaultMock__factory>;
    getContractFactory(
      name: "CompoundStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundStrategy__factory>;
    getContractFactory(
      name: "ComptrollerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerMock__factory>;
    getContractFactory(
      name: "CTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenMock__factory>;
    getContractFactory(
      name: "ConvexTricryptoStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConvexTricryptoStrategy__factory>;
    getContractFactory(
      name: "ConvexBoosterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConvexBoosterMock__factory>;
    getContractFactory(
      name: "ConvexRewardPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConvexRewardPoolMock__factory>;
    getContractFactory(
      name: "ConvexZapMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConvexZapMock__factory>;
    getContractFactory(
      name: "CurveMinterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveMinterMock__factory>;
    getContractFactory(
      name: "TricryptoLiquidityPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TricryptoLiquidityPoolMock__factory>;
    getContractFactory(
      name: "TricryptoLPGaugeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TricryptoLPGaugeMock__factory>;
    getContractFactory(
      name: "TricryptoLPGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TricryptoLPGetter__factory>;
    getContractFactory(
      name: "TricryptoLPStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TricryptoLPStrategy__factory>;
    getContractFactory(
      name: "TricryptoNativeStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TricryptoNativeStrategy__factory>;
    getContractFactory(
      name: "LidoEthStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LidoEthStrategy__factory>;
    getContractFactory(
      name: "CurveEthStEthPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveEthStEthPoolMock__factory>;
    getContractFactory(
      name: "StEthMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StEthMock__factory>;
    getContractFactory(
      name: "YearnVaultMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YearnVaultMock__factory>;
    getContractFactory(
      name: "YearnStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YearnStrategy__factory>;
    getContractFactory(
      name: "FeeCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeCollector__factory>;
    getContractFactory(
      name: "GlpStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GlpStrategy__factory>;
    getContractFactory(
      name: "SDaiStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SDaiStrategy__factory>;
    getContractFactory(
      name: "LPStakingMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPStakingMock__factory>;
    getContractFactory(
      name: "RouterETHMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RouterETHMock__factory>;
    getContractFactory(
      name: "StargateRouterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StargateRouterMock__factory>;
    getContractFactory(
      name: "StargateSwapperV3Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StargateSwapperV3Mock__factory>;
    getContractFactory(
      name: "StargateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StargateStrategy__factory>;
    getContractFactory(
      name: "StargateSwapperV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StargateSwapperV3__factory>;

    getContractAt(
      name: "AaveStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveStrategy>;
    getContractAt(
      name: "AaveV3Strategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV3Strategy>;
    getContractAt(
      name: "AaveV3PoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV3PoolMock>;
    getContractAt(
      name: "LendingPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPoolMock>;
    getContractAt(
      name: "StkAaveMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StkAaveMock>;
    getContractAt(
      name: "BalancerStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerStrategy>;
    getContractAt(
      name: "BalancerHelpersMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerHelpersMock>;
    getContractAt(
      name: "BalancerPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerPoolMock>;
    getContractAt(
      name: "BalancerVaultMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerVaultMock>;
    getContractAt(
      name: "CompoundStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundStrategy>;
    getContractAt(
      name: "ComptrollerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerMock>;
    getContractAt(
      name: "CTokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenMock>;
    getContractAt(
      name: "ConvexTricryptoStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConvexTricryptoStrategy>;
    getContractAt(
      name: "ConvexBoosterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConvexBoosterMock>;
    getContractAt(
      name: "ConvexRewardPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConvexRewardPoolMock>;
    getContractAt(
      name: "ConvexZapMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConvexZapMock>;
    getContractAt(
      name: "CurveMinterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveMinterMock>;
    getContractAt(
      name: "TricryptoLiquidityPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TricryptoLiquidityPoolMock>;
    getContractAt(
      name: "TricryptoLPGaugeMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TricryptoLPGaugeMock>;
    getContractAt(
      name: "TricryptoLPGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TricryptoLPGetter>;
    getContractAt(
      name: "TricryptoLPStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TricryptoLPStrategy>;
    getContractAt(
      name: "TricryptoNativeStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TricryptoNativeStrategy>;
    getContractAt(
      name: "LidoEthStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LidoEthStrategy>;
    getContractAt(
      name: "CurveEthStEthPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveEthStEthPoolMock>;
    getContractAt(
      name: "StEthMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StEthMock>;
    getContractAt(
      name: "YearnVaultMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YearnVaultMock>;
    getContractAt(
      name: "YearnStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YearnStrategy>;
    getContractAt(
      name: "FeeCollector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeCollector>;
    getContractAt(
      name: "GlpStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GlpStrategy>;
    getContractAt(
      name: "SDaiStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SDaiStrategy>;
    getContractAt(
      name: "LPStakingMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPStakingMock>;
    getContractAt(
      name: "RouterETHMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RouterETHMock>;
    getContractAt(
      name: "StargateRouterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StargateRouterMock>;
    getContractAt(
      name: "StargateSwapperV3Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StargateSwapperV3Mock>;
    getContractAt(
      name: "StargateStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StargateStrategy>;
    getContractAt(
      name: "StargateSwapperV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StargateSwapperV3>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
