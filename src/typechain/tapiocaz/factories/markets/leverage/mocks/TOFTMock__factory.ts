/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TOFTMock,
  TOFTMockInterface,
} from "../../../../markets/leverage/mocks/TOFTMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_erc20",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "erc20",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "erc20_",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_toAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "unwrap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_fromAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_toAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "wrap",
    outputs: [
      {
        internalType: "uint256",
        name: "minted",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200133d3803806200133d8339810160408190526200003491620000bc565b60405180604001604052806008815260200167544f46544d6f636b60c01b815250604051806040016040528060048152602001635446544d60e01b815250816003908162000083919062000195565b50600462000092828262000195565b5050600580546001600160a01b0319166001600160a01b0393909316929092179091555062000261565b600060208284031215620000cf57600080fd5b81516001600160a01b0381168114620000e757600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200011957607f821691505b6020821081036200013a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000190576000816000526020600020601f850160051c810160208610156200016b5750805b601f850160051c820191505b818110156200018c5782815560010162000177565b5050505b505050565b81516001600160401b03811115620001b157620001b1620000ee565b620001c981620001c2845462000104565b8462000140565b602080601f831160018114620002015760008415620001e85750858301515b600019600386901b1c1916600185901b1785556200018c565b600085815260208120601f198616915b82811015620002325788860151825594840194600190910190840162000211565b5085821015620002515787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6110cc80620002716000396000f3fe6080604052600436106100ec5760003560e01c8063623556381161008a578063a457c2d711610059578063a457c2d714610280578063a9059cbb146102a0578063dd62ed3e146102c0578063e2eec30b1461030657600080fd5b806362355638146101f057806370a0823114610203578063785e9e861461023957806395d89b411461026b57600080fd5b806323b872dd116100c657806323b872dd14610172578063313ce5671461019257806339509351146101ae57806339f47693146101ce57600080fd5b806306fdde03146100f8578063095ea7b31461012357806318160ddd1461015357600080fd5b366100f357005b600080fd5b34801561010457600080fd5b5061010d610326565b60405161011a9190610ef3565b60405180910390f35b34801561012f57600080fd5b5061014361013e366004610f42565b6103b8565b604051901515815260200161011a565b34801561015f57600080fd5b506002545b60405190815260200161011a565b34801561017e57600080fd5b5061014361018d366004610f6c565b6103d2565b34801561019e57600080fd5b506040516012815260200161011a565b3480156101ba57600080fd5b506101436101c9366004610f42565b6103f6565b3480156101da57600080fd5b506101ee6101e9366004610f42565b610435565b005b6101646101fe366004610f6c565b610518565b34801561020f57600080fd5b5061016461021e366004610fa8565b6001600160a01b031660009081526020819052604090205490565b34801561024557600080fd5b506005546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b34801561027757600080fd5b5061010d6105a8565b34801561028c57600080fd5b5061014361029b366004610f42565b6105b7565b3480156102ac57600080fd5b506101436102bb366004610f42565b610649565b3480156102cc57600080fd5b506101646102db366004610fca565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561031257600080fd5b50600554610253906001600160a01b031681565b60606003805461033590610ffd565b80601f016020809104026020016040519081016040528092919081815260200182805461036190610ffd565b80156103ae5780601f10610383576101008083540402835291602001916103ae565b820191906000526020600020905b81548152906001019060200180831161039157829003601f168201915b5050505050905090565b6000336103c6818585610657565b60019150505b92915050565b6000336103e085828561077b565b6103eb85858561080d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906103c69082908690610430908790611037565b610657565b61043f33826109b1565b6005546001600160a01b03161561046b57600554610467906001600160a01b03168383610ae3565b5050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146104b8576040519150601f19603f3d011682016040523d82523d6000602084013e6104bd565b606091505b50509050806105135760405162461bcd60e51b815260206004820181905260248201527f544f46544d6f636b3a206661696c656420746f207472616e736665722045544860448201526064015b60405180910390fd5b505050565b60006105248383610b73565b6005546001600160a01b0316156105525760055461054d906001600160a01b0316853085610c32565b6105a1565b8134146105a15760405162461bcd60e51b815260206004820181905260248201527f544f46544d6f636b3a206661696c656420746f20726563656976656420455448604482015260640161050a565b5092915050565b60606004805461033590610ffd565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561063c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161050a565b6103eb8286868403610657565b6000336103c681858561080d565b6001600160a01b0383166106b95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161050a565b6001600160a01b03821661071a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161050a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461080757818110156107fa5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161050a565b6108078484848403610657565b50505050565b6001600160a01b0383166108715760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161050a565b6001600160a01b0382166108d35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161050a565b6001600160a01b0383166000908152602081905260409020548181101561094b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161050a565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610807565b6001600160a01b038216610a115760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161050a565b6001600160a01b03821660009081526020819052604090205481811015610a855760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161050a565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261051390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610c6a565b6001600160a01b038216610bc95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161050a565b8060026000828254610bdb9190611037565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526108079085906323b872dd60e01b90608401610b0f565b6000610cbf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d3f9092919063ffffffff16565b9050805160001480610ce0575080806020019051810190610ce09190611058565b6105135760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161050a565b6060610d4e8484600085610d56565b949350505050565b606082471015610db75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161050a565b600080866001600160a01b03168587604051610dd3919061107a565b60006040518083038185875af1925050503d8060008114610e10576040519150601f19603f3d011682016040523d82523d6000602084013e610e15565b606091505b5091509150610e2687838387610e31565b979650505050505050565b60608315610ea0578251600003610e99576001600160a01b0385163b610e995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161050a565b5081610d4e565b610d4e8383815115610eb55781518083602001fd5b8060405162461bcd60e51b815260040161050a9190610ef3565b60005b83811015610eea578181015183820152602001610ed2565b50506000910152565b6020815260008251806020840152610f12816040850160208701610ecf565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610f3d57600080fd5b919050565b60008060408385031215610f5557600080fd5b610f5e83610f26565b946020939093013593505050565b600080600060608486031215610f8157600080fd5b610f8a84610f26565b9250610f9860208501610f26565b9150604084013590509250925092565b600060208284031215610fba57600080fd5b610fc382610f26565b9392505050565b60008060408385031215610fdd57600080fd5b610fe683610f26565b9150610ff460208401610f26565b90509250929050565b600181811c9082168061101157607f821691505b60208210810361103157634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156103cc57634e487b7160e01b600052601160045260246000fd5b60006020828403121561106a57600080fd5b81518015158114610fc357600080fd5b6000825161108c818460208701610ecf565b919091019291505056fea2646970667358221220be949d04dce32c98b9df989cc4e2673f0ee799e64cc0b23aa33203a7002ef7c864736f6c63430008160033";

type TOFTMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TOFTMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TOFTMock__factory extends ContractFactory {
  constructor(...args: TOFTMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TOFTMock";
  }

  override deploy(
    _erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TOFTMock> {
    return super.deploy(_erc20, overrides || {}) as Promise<TOFTMock>;
  }
  override getDeployTransaction(
    _erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_erc20, overrides || {});
  }
  override attach(address: string): TOFTMock {
    return super.attach(address) as TOFTMock;
  }
  override connect(signer: Signer): TOFTMock__factory {
    return super.connect(signer) as TOFTMock__factory;
  }
  static readonly contractName: "TOFTMock";

  public readonly contractName: "TOFTMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TOFTMockInterface {
    return new utils.Interface(_abi) as TOFTMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TOFTMock {
    return new Contract(address, _abi, signerOrProvider) as TOFTMock;
  }
}
