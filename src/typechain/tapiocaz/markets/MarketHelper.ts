/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MarketHelperInterface extends utils.Interface {
  functions: {
    "addCollateral(address,address,bool,uint256,uint256)": FunctionFragment;
    "borrow(address,address,uint256)": FunctionFragment;
    "borrowView(bytes)": FunctionFragment;
    "buyCollateral(address,uint256,uint256,bytes)": FunctionFragment;
    "buyCollateralView(bytes)": FunctionFragment;
    "computeAllowedLendShare(address,uint256,uint256)": FunctionFragment;
    "getLiquidationCollateralAmount(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "liquidate(address[],uint256[],uint256[],address[],bytes[])": FunctionFragment;
    "liquidateBadDebt(address,address,address,address,bytes,bool)": FunctionFragment;
    "removeCollateral(address,address,uint256)": FunctionFragment;
    "repay(address,address,bool,uint256)": FunctionFragment;
    "repayView(bytes)": FunctionFragment;
    "sellCollateral(address,uint256,bytes)": FunctionFragment;
    "sellCollateralView(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCollateral"
      | "addCollateral(address,address,bool,uint256,uint256)"
      | "borrow"
      | "borrow(address,address,uint256)"
      | "borrowView"
      | "borrowView(bytes)"
      | "buyCollateral"
      | "buyCollateral(address,uint256,uint256,bytes)"
      | "buyCollateralView"
      | "buyCollateralView(bytes)"
      | "computeAllowedLendShare"
      | "computeAllowedLendShare(address,uint256,uint256)"
      | "getLiquidationCollateralAmount"
      | "getLiquidationCollateralAmount(address,address,uint256,uint256,uint256,uint256)"
      | "liquidate"
      | "liquidate(address[],uint256[],uint256[],address[],bytes[])"
      | "liquidateBadDebt"
      | "liquidateBadDebt(address,address,address,address,bytes,bool)"
      | "removeCollateral"
      | "removeCollateral(address,address,uint256)"
      | "repay"
      | "repay(address,address,bool,uint256)"
      | "repayView"
      | "repayView(bytes)"
      | "sellCollateral"
      | "sellCollateral(address,uint256,bytes)"
      | "sellCollateralView"
      | "sellCollateralView(bytes)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral(address,address,bool,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowView",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowView(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCollateral(address,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCollateralView",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCollateralView(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAllowedLendShare",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAllowedLendShare(address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationCollateralAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationCollateralAmount(address,address,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate(address[],uint256[],uint256[],address[],bytes[])",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBadDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBadDebt(address,address,address,address,bytes,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repay(address,address,bool,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repayView",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "repayView(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sellCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellCollateral(address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellCollateralView",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sellCollateralView(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral(address,address,bool,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrow(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowView", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowView(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCollateral(address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCollateralView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCollateralView(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAllowedLendShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAllowedLendShare(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationCollateralAmount(address,address,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidate(address[],uint256[],uint256[],address[],bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBadDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBadDebt(address,address,address,address,bytes,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repay(address,address,bool,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayView", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayView(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCollateral(address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCollateralView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellCollateralView(bytes)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MarketHelper extends BaseContract {
  contractName: "MarketHelper";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "addCollateral(address,address,bool,uint256,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "borrow(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    borrowView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    "borrowView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "buyCollateral(address,uint256,uint256,bytes)"(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    buyCollateralView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    "buyCollateralView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    computeAllowedLendShare(
      sglAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    "computeAllowedLendShare(address,uint256,uint256)"(
      sglAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    getLiquidationCollateralAmount(
      sglAddress: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      minLiquidationBonus: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      feeDecimalsPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralShare: BigNumber }>;

    "getLiquidationCollateralAmount(address,address,uint256,uint256,uint256,uint256)"(
      sglAddress: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      minLiquidationBonus: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      feeDecimalsPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralShare: BigNumber }>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      minLiquidationBonuses: PromiseOrValue<BigNumberish>[],
      liquidatorReceivers: PromiseOrValue<string>[],
      liquidatorReceiverDatas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "liquidate(address[],uint256[],uint256[],address[],bytes[])"(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      minLiquidationBonuses: PromiseOrValue<BigNumberish>[],
      liquidatorReceivers: PromiseOrValue<string>[],
      liquidatorReceiverDatas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    liquidateBadDebt(
      user: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      liquidatorReceiver: PromiseOrValue<string>,
      liquidatorReceiverData: PromiseOrValue<BytesLike>,
      swapCollateral: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "liquidateBadDebt(address,address,address,address,bytes,bool)"(
      user: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      liquidatorReceiver: PromiseOrValue<string>,
      liquidatorReceiverData: PromiseOrValue<BytesLike>,
      swapCollateral: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "removeCollateral(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "repay(address,address,bool,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    repayView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "repayView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "sellCollateral(address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    sellCollateralView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    "sellCollateralView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;
  };

  addCollateral(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    skim: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  "addCollateral(address,address,bool,uint256,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    skim: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  borrow(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  "borrow(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  borrowView(
    result: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

  "borrowView(bytes)"(
    result: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

  buyCollateral(
    from: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    supplyAmount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  "buyCollateral(address,uint256,uint256,bytes)"(
    from: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    supplyAmount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  buyCollateralView(
    result: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "buyCollateralView(bytes)"(
    result: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeAllowedLendShare(
    sglAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "computeAllowedLendShare(address,uint256,uint256)"(
    sglAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidationCollateralAmount(
    sglAddress: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    maxBorrowPart: PromiseOrValue<BigNumberish>,
    minLiquidationBonus: PromiseOrValue<BigNumberish>,
    exchangeRatePrecision: PromiseOrValue<BigNumberish>,
    feeDecimalsPrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLiquidationCollateralAmount(address,address,uint256,uint256,uint256,uint256)"(
    sglAddress: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    maxBorrowPart: PromiseOrValue<BigNumberish>,
    minLiquidationBonus: PromiseOrValue<BigNumberish>,
    exchangeRatePrecision: PromiseOrValue<BigNumberish>,
    feeDecimalsPrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidate(
    users: PromiseOrValue<string>[],
    maxBorrowParts: PromiseOrValue<BigNumberish>[],
    minLiquidationBonuses: PromiseOrValue<BigNumberish>[],
    liquidatorReceivers: PromiseOrValue<string>[],
    liquidatorReceiverDatas: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  "liquidate(address[],uint256[],uint256[],address[],bytes[])"(
    users: PromiseOrValue<string>[],
    maxBorrowParts: PromiseOrValue<BigNumberish>[],
    minLiquidationBonuses: PromiseOrValue<BigNumberish>[],
    liquidatorReceivers: PromiseOrValue<string>[],
    liquidatorReceiverDatas: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  liquidateBadDebt(
    user: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    liquidatorReceiver: PromiseOrValue<string>,
    liquidatorReceiverData: PromiseOrValue<BytesLike>,
    swapCollateral: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  "liquidateBadDebt(address,address,address,address,bytes,bool)"(
    user: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    liquidatorReceiver: PromiseOrValue<string>,
    liquidatorReceiverData: PromiseOrValue<BytesLike>,
    swapCollateral: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  removeCollateral(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  "removeCollateral(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  repay(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    skim: PromiseOrValue<boolean>,
    part: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  "repay(address,address,bool,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    skim: PromiseOrValue<boolean>,
    part: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  repayView(
    result: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "repayView(bytes)"(
    result: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellCollateral(
    from: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  "sellCollateral(address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

  sellCollateralView(
    result: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "sellCollateralView(bytes)"(
    result: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "addCollateral(address,address,bool,uint256,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "borrow(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    borrowView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    "borrowView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "buyCollateral(address,uint256,uint256,bytes)"(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    buyCollateralView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyCollateralView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAllowedLendShare(
      sglAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeAllowedLendShare(address,uint256,uint256)"(
      sglAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationCollateralAmount(
      sglAddress: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      minLiquidationBonus: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      feeDecimalsPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidationCollateralAmount(address,address,uint256,uint256,uint256,uint256)"(
      sglAddress: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      minLiquidationBonus: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      feeDecimalsPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      minLiquidationBonuses: PromiseOrValue<BigNumberish>[],
      liquidatorReceivers: PromiseOrValue<string>[],
      liquidatorReceiverDatas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "liquidate(address[],uint256[],uint256[],address[],bytes[])"(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      minLiquidationBonuses: PromiseOrValue<BigNumberish>[],
      liquidatorReceivers: PromiseOrValue<string>[],
      liquidatorReceiverDatas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    liquidateBadDebt(
      user: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      liquidatorReceiver: PromiseOrValue<string>,
      liquidatorReceiverData: PromiseOrValue<BytesLike>,
      swapCollateral: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "liquidateBadDebt(address,address,address,address,bytes,bool)"(
      user: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      liquidatorReceiver: PromiseOrValue<string>,
      liquidatorReceiverData: PromiseOrValue<BytesLike>,
      swapCollateral: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "removeCollateral(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "repay(address,address,bool,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    repayView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repayView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    "sellCollateral(address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number[], string[]] & { modules: number[]; calls: string[] }>;

    sellCollateralView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellCollateralView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addCollateral(address,address,bool,uint256,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrow(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyCollateral(address,uint256,uint256,bytes)"(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyCollateralView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "buyCollateralView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeAllowedLendShare(
      sglAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeAllowedLendShare(address,uint256,uint256)"(
      sglAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidationCollateralAmount(
      sglAddress: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      minLiquidationBonus: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      feeDecimalsPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidationCollateralAmount(address,address,uint256,uint256,uint256,uint256)"(
      sglAddress: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      minLiquidationBonus: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      feeDecimalsPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      minLiquidationBonuses: PromiseOrValue<BigNumberish>[],
      liquidatorReceivers: PromiseOrValue<string>[],
      liquidatorReceiverDatas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidate(address[],uint256[],uint256[],address[],bytes[])"(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      minLiquidationBonuses: PromiseOrValue<BigNumberish>[],
      liquidatorReceivers: PromiseOrValue<string>[],
      liquidatorReceiverDatas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateBadDebt(
      user: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      liquidatorReceiver: PromiseOrValue<string>,
      liquidatorReceiverData: PromiseOrValue<BytesLike>,
      swapCollateral: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidateBadDebt(address,address,address,address,bytes,bool)"(
      user: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      liquidatorReceiver: PromiseOrValue<string>,
      liquidatorReceiverData: PromiseOrValue<BytesLike>,
      swapCollateral: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeCollateral(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repay(address,address,bool,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repayView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellCollateral(address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellCollateralView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sellCollateralView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addCollateral(address,address,bool,uint256,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrow(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "borrowView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyCollateral(address,uint256,uint256,bytes)"(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyCollateralView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "buyCollateralView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAllowedLendShare(
      sglAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeAllowedLendShare(address,uint256,uint256)"(
      sglAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidationCollateralAmount(
      sglAddress: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      minLiquidationBonus: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      feeDecimalsPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidationCollateralAmount(address,address,uint256,uint256,uint256,uint256)"(
      sglAddress: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      maxBorrowPart: PromiseOrValue<BigNumberish>,
      minLiquidationBonus: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      feeDecimalsPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      minLiquidationBonuses: PromiseOrValue<BigNumberish>[],
      liquidatorReceivers: PromiseOrValue<string>[],
      liquidatorReceiverDatas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidate(address[],uint256[],uint256[],address[],bytes[])"(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      minLiquidationBonuses: PromiseOrValue<BigNumberish>[],
      liquidatorReceivers: PromiseOrValue<string>[],
      liquidatorReceiverDatas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateBadDebt(
      user: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      liquidatorReceiver: PromiseOrValue<string>,
      liquidatorReceiverData: PromiseOrValue<BytesLike>,
      swapCollateral: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidateBadDebt(address,address,address,address,bytes,bool)"(
      user: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      liquidatorReceiver: PromiseOrValue<string>,
      liquidatorReceiverData: PromiseOrValue<BytesLike>,
      swapCollateral: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeCollateral(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "repay(address,address,bool,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repayView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "repayView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sellCollateral(address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellCollateralView(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sellCollateralView(bytes)"(
      result: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
