/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type RebaseStruct = {
  elastic: PromiseOrValue<BigNumberish>;
  base: PromiseOrValue<BigNumberish>;
};

export type RebaseStructOutput = [BigNumber, BigNumber] & {
  elastic: BigNumber;
  base: BigNumber;
};

export interface OriginsInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "_asset()": FunctionFragment;
    "_assetId()": FunctionFragment;
    "_collateral()": FunctionFragment;
    "_collateralId()": FunctionFragment;
    "_collateralizationRate()": FunctionFragment;
    "_conservator()": FunctionFragment;
    "_exchangeRate()": FunctionFragment;
    "_leverageExecutor()": FunctionFragment;
    "_liquidationBonusAmount()": FunctionFragment;
    "_liquidationCollateralizationRate()": FunctionFragment;
    "_liquidationMultiplier()": FunctionFragment;
    "_maxLiquidationSlippage()": FunctionFragment;
    "_maxLiquidatorReward()": FunctionFragment;
    "_minLiquidatorReward()": FunctionFragment;
    "_oracle()": FunctionFragment;
    "_oracleData()": FunctionFragment;
    "_pauseOptions(uint8)": FunctionFragment;
    "_pearlmit()": FunctionFragment;
    "_penrose()": FunctionFragment;
    "_protocolFee()": FunctionFragment;
    "_rateTimestamp()": FunctionFragment;
    "_rateValidDuration()": FunctionFragment;
    "_totalBorrow()": FunctionFragment;
    "_totalBorrowCap()": FunctionFragment;
    "_totalCollateralShare()": FunctionFragment;
    "_userBorrowPart(address)": FunctionFragment;
    "_userCollateralShare(address)": FunctionFragment;
    "_yieldBox()": FunctionFragment;
    "addCollateral(uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "allowanceBorrow(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveBorrow(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "computeClosingFactor(uint256,uint256,uint256)": FunctionFragment;
    "computeLiquidatorReward(address,uint256)": FunctionFragment;
    "computeTVLInfo(address,uint256)": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "removeCollateral(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "rescueEth(uint256,address)": FunctionFragment;
    "setLeverageExecutor(address)": FunctionFragment;
    "setLiquidationMaxSlippage(uint256)": FunctionFragment;
    "setMarketConfig(address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAllowedParticipants(address,bool)": FunctionFragment;
    "updateExchangeRate()": FunctionFragment;
    "updatePause(uint8,bool)": FunctionFragment;
    "updatePauseAll(bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_SEPARATOR()"
      | "_asset"
      | "_asset()"
      | "_assetId"
      | "_assetId()"
      | "_collateral"
      | "_collateral()"
      | "_collateralId"
      | "_collateralId()"
      | "_collateralizationRate"
      | "_collateralizationRate()"
      | "_conservator"
      | "_conservator()"
      | "_exchangeRate"
      | "_exchangeRate()"
      | "_leverageExecutor"
      | "_leverageExecutor()"
      | "_liquidationBonusAmount"
      | "_liquidationBonusAmount()"
      | "_liquidationCollateralizationRate"
      | "_liquidationCollateralizationRate()"
      | "_liquidationMultiplier"
      | "_liquidationMultiplier()"
      | "_maxLiquidationSlippage"
      | "_maxLiquidationSlippage()"
      | "_maxLiquidatorReward"
      | "_maxLiquidatorReward()"
      | "_minLiquidatorReward"
      | "_minLiquidatorReward()"
      | "_oracle"
      | "_oracle()"
      | "_oracleData"
      | "_oracleData()"
      | "_pauseOptions"
      | "_pauseOptions(uint8)"
      | "_pearlmit"
      | "_pearlmit()"
      | "_penrose"
      | "_penrose()"
      | "_protocolFee"
      | "_protocolFee()"
      | "_rateTimestamp"
      | "_rateTimestamp()"
      | "_rateValidDuration"
      | "_rateValidDuration()"
      | "_totalBorrow"
      | "_totalBorrow()"
      | "_totalBorrowCap"
      | "_totalBorrowCap()"
      | "_totalCollateralShare"
      | "_totalCollateralShare()"
      | "_userBorrowPart"
      | "_userBorrowPart(address)"
      | "_userCollateralShare"
      | "_userCollateralShare(address)"
      | "_yieldBox"
      | "_yieldBox()"
      | "addCollateral"
      | "addCollateral(uint256,uint256)"
      | "allowance"
      | "allowance(address,address)"
      | "allowanceBorrow"
      | "allowanceBorrow(address,address)"
      | "approve"
      | "approve(address,uint256)"
      | "approveBorrow"
      | "approveBorrow(address,uint256)"
      | "balanceOf"
      | "balanceOf(address)"
      | "borrow"
      | "borrow(uint256)"
      | "computeClosingFactor"
      | "computeClosingFactor(uint256,uint256,uint256)"
      | "computeLiquidatorReward"
      | "computeLiquidatorReward(address,uint256)"
      | "computeTVLInfo"
      | "computeTVLInfo(address,uint256)"
      | "eip712Domain"
      | "eip712Domain()"
      | "nonces"
      | "nonces(address)"
      | "onERC1155BatchReceived"
      | "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
      | "onERC1155Received"
      | "onERC1155Received(address,address,uint256,uint256,bytes)"
      | "owner"
      | "owner()"
      | "permit"
      | "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
      | "permitBorrow"
      | "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"
      | "removeCollateral"
      | "removeCollateral(uint256)"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "repay"
      | "repay(uint256)"
      | "rescueEth"
      | "rescueEth(uint256,address)"
      | "setLeverageExecutor"
      | "setLeverageExecutor(address)"
      | "setLiquidationMaxSlippage"
      | "setLiquidationMaxSlippage(uint256)"
      | "setMarketConfig"
      | "setMarketConfig(address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "totalSupply"
      | "totalSupply()"
      | "transfer"
      | "transfer(address,uint256)"
      | "transferFrom"
      | "transferFrom(address,address,uint256)"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "updateAllowedParticipants"
      | "updateAllowedParticipants(address,bool)"
      | "updateExchangeRate"
      | "updateExchangeRate()"
      | "updatePause"
      | "updatePause(uint8,bool)"
      | "updatePauseAll"
      | "updatePauseAll(bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_asset", values?: undefined): string;
  encodeFunctionData(functionFragment: "_asset()", values?: undefined): string;
  encodeFunctionData(functionFragment: "_assetId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_assetId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collateral()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collateralId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collateralId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collateralizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collateralizationRate()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_conservator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_conservator()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_exchangeRate()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_leverageExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_leverageExecutor()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidationBonusAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidationBonusAmount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidationCollateralizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidationCollateralizationRate()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidationMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidationMultiplier()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxLiquidationSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxLiquidationSlippage()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxLiquidatorReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxLiquidatorReward()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_minLiquidatorReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_minLiquidatorReward()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "_oracle()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_oracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_oracleData()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_pauseOptions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_pauseOptions(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "_pearlmit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_pearlmit()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_penrose", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_penrose()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_protocolFee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_rateTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_rateTimestamp()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_rateValidDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_rateValidDuration()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalBorrow()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalBorrowCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalBorrowCap()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalCollateralShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalCollateralShare()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_userBorrowPart",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_userBorrowPart(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_userCollateralShare",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_userCollateralShare(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "_yieldBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_yieldBox()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceBorrow",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowanceBorrow(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveBorrow",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveBorrow(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeClosingFactor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeClosingFactor(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeLiquidatorReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeLiquidatorReward(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTVLInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTVLInfo(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received(address,address,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitBorrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repay(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueEth",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueEth(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeverageExecutor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLeverageExecutor(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationMaxSlippage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationMaxSlippage(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketConfig(address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowedParticipants",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowedParticipants(address,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePause",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePause(uint8,bool)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePauseAll",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePauseAll(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_asset()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_assetId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_assetId()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_collateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collateral()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collateralId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collateralId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collateralizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collateralizationRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_conservator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_conservator()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_exchangeRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_leverageExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_leverageExecutor()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidationBonusAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidationBonusAmount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidationCollateralizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidationCollateralizationRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidationMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidationMultiplier()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxLiquidationSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxLiquidationSlippage()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxLiquidatorReward()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_minLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_minLiquidatorReward()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_oracle()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_oracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_oracleData()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_pauseOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_pauseOptions(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_pearlmit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_pearlmit()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_penrose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_penrose()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_protocolFee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rateTimestamp()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rateValidDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rateValidDuration()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalBorrow()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalBorrowCap()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalCollateralShare()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_userBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_userBorrowPart(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_userCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_userCollateralShare(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_yieldBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_yieldBox()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowanceBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowanceBorrow(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveBorrow(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrow(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeClosingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeClosingFactor(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeLiquidatorReward(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTVLInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTVLInfo(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received(address,address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repay(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescueEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rescueEth(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeverageExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLeverageExecutor(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationMaxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationMaxSlippage(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketConfig(address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowedParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowedParticipants(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePause(uint8,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePauseAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePauseAll(bool)",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalBorrow(address,address,uint256)": EventFragment;
    "ConservatorUpdated(address,address)": EventFragment;
    "EIP712DomainChanged()": EventFragment;
    "ExchangeRateDurationUpdated(uint256,uint256)": EventFragment;
    "LeverageExecutorSet(address,address)": EventFragment;
    "Liquidated(address,address[],uint256,uint256,uint256,uint256)": EventFragment;
    "LiquidationMaxSlippageUpdated(uint256,uint256)": EventFragment;
    "LiquidationMultiplierUpdated(uint256,uint256)": EventFragment;
    "LogAddCollateral(address,address,uint256)": EventFragment;
    "LogBorrow(address,address,uint256,uint256)": EventFragment;
    "LogBorrowCapUpdated(uint256,uint256)": EventFragment;
    "LogExchangeRate(uint256)": EventFragment;
    "LogRemoveCollateral(address,address,uint256)": EventFragment;
    "LogRepay(address,address,uint256,uint256)": EventFragment;
    "OracleDataUpdated()": EventFragment;
    "OracleUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PausedUpdated(uint8,bool,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateParticipants(address,bool)": EventFragment;
    "ValueUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalBorrow"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalBorrow(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConservatorUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ConservatorUpdated(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged()"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExchangeRateDurationUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExchangeRateDurationUpdated(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeverageExecutorSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LeverageExecutorSet(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Liquidated(address,address[],uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationMaxSlippageUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationMaxSlippageUpdated(uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationMultiplierUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationMultiplierUpdated(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddCollateral"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAddCollateral(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrow"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogBorrow(address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrowCapUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogBorrowCapUpdated(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExchangeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExchangeRate(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveCollateral"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogRemoveCollateral(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRepay"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogRepay(address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleDataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleDataUpdated()"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleUpdated(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PausedUpdated(uint8,bool,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateParticipants"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateParticipants(address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValueUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValueUpdated(uint256,uint256)"
  ): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalBorrowEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalBorrowEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalBorrowEventObject
>;

export type ApprovalBorrowEventFilter = TypedEventFilter<ApprovalBorrowEvent>;

export interface ConservatorUpdatedEventObject {
  old: string;
  _new: string;
}
export type ConservatorUpdatedEvent = TypedEvent<
  [string, string],
  ConservatorUpdatedEventObject
>;

export type ConservatorUpdatedEventFilter =
  TypedEventFilter<ConservatorUpdatedEvent>;

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface ExchangeRateDurationUpdatedEventObject {
  _oldVal: BigNumber;
  _newVal: BigNumber;
}
export type ExchangeRateDurationUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ExchangeRateDurationUpdatedEventObject
>;

export type ExchangeRateDurationUpdatedEventFilter =
  TypedEventFilter<ExchangeRateDurationUpdatedEvent>;

export interface LeverageExecutorSetEventObject {
  oldVal: string;
  newVal: string;
}
export type LeverageExecutorSetEvent = TypedEvent<
  [string, string],
  LeverageExecutorSetEventObject
>;

export type LeverageExecutorSetEventFilter =
  TypedEventFilter<LeverageExecutorSetEvent>;

export interface LiquidatedEventObject {
  liquidator: string;
  users: string[];
  liquidatorReward: BigNumber;
  protocolReward: BigNumber;
  repayedAmount: BigNumber;
  collateralShareRemoved: BigNumber;
}
export type LiquidatedEvent = TypedEvent<
  [string, string[], BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidatedEventObject
>;

export type LiquidatedEventFilter = TypedEventFilter<LiquidatedEvent>;

export interface LiquidationMaxSlippageUpdatedEventObject {
  oldVal: BigNumber;
  newVal: BigNumber;
}
export type LiquidationMaxSlippageUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LiquidationMaxSlippageUpdatedEventObject
>;

export type LiquidationMaxSlippageUpdatedEventFilter =
  TypedEventFilter<LiquidationMaxSlippageUpdatedEvent>;

export interface LiquidationMultiplierUpdatedEventObject {
  oldVal: BigNumber;
  newVal: BigNumber;
}
export type LiquidationMultiplierUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LiquidationMultiplierUpdatedEventObject
>;

export type LiquidationMultiplierUpdatedEventFilter =
  TypedEventFilter<LiquidationMultiplierUpdatedEvent>;

export interface LogAddCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogAddCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  LogAddCollateralEventObject
>;

export type LogAddCollateralEventFilter =
  TypedEventFilter<LogAddCollateralEvent>;

export interface LogBorrowEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  part: BigNumber;
}
export type LogBorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogBorrowEventObject
>;

export type LogBorrowEventFilter = TypedEventFilter<LogBorrowEvent>;

export interface LogBorrowCapUpdatedEventObject {
  _oldVal: BigNumber;
  _newVal: BigNumber;
}
export type LogBorrowCapUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogBorrowCapUpdatedEventObject
>;

export type LogBorrowCapUpdatedEventFilter =
  TypedEventFilter<LogBorrowCapUpdatedEvent>;

export interface LogExchangeRateEventObject {
  rate: BigNumber;
}
export type LogExchangeRateEvent = TypedEvent<
  [BigNumber],
  LogExchangeRateEventObject
>;

export type LogExchangeRateEventFilter = TypedEventFilter<LogExchangeRateEvent>;

export interface LogRemoveCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogRemoveCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  LogRemoveCollateralEventObject
>;

export type LogRemoveCollateralEventFilter =
  TypedEventFilter<LogRemoveCollateralEvent>;

export interface LogRepayEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  part: BigNumber;
}
export type LogRepayEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogRepayEventObject
>;

export type LogRepayEventFilter = TypedEventFilter<LogRepayEvent>;

export interface OracleDataUpdatedEventObject {}
export type OracleDataUpdatedEvent = TypedEvent<
  [],
  OracleDataUpdatedEventObject
>;

export type OracleDataUpdatedEventFilter =
  TypedEventFilter<OracleDataUpdatedEvent>;

export interface OracleUpdatedEventObject {
  newAddr: string;
}
export type OracleUpdatedEvent = TypedEvent<[string], OracleUpdatedEventObject>;

export type OracleUpdatedEventFilter = TypedEventFilter<OracleUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedUpdatedEventObject {
  _type: number;
  oldState: boolean;
  newState: boolean;
}
export type PausedUpdatedEvent = TypedEvent<
  [number, boolean, boolean],
  PausedUpdatedEventObject
>;

export type PausedUpdatedEventFilter = TypedEventFilter<PausedUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateParticipantsEventObject {
  participant: string;
  status: boolean;
}
export type UpdateParticipantsEvent = TypedEvent<
  [string, boolean],
  UpdateParticipantsEventObject
>;

export type UpdateParticipantsEventFilter =
  TypedEventFilter<UpdateParticipantsEvent>;

export interface ValueUpdatedEventObject {
  valType: BigNumber;
  _newVal: BigNumber;
}
export type ValueUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ValueUpdatedEventObject
>;

export type ValueUpdatedEventFilter = TypedEventFilter<ValueUpdatedEvent>;

export interface Origins extends BaseContract {
  contractName: "Origins";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OriginsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    _asset(overrides?: CallOverrides): Promise<[string]>;

    "_asset()"(overrides?: CallOverrides): Promise<[string]>;

    _assetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_assetId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _collateral(overrides?: CallOverrides): Promise<[string]>;

    "_collateral()"(overrides?: CallOverrides): Promise<[string]>;

    _collateralId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_collateralId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _collateralizationRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_collateralizationRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _conservator(overrides?: CallOverrides): Promise<[string]>;

    "_conservator()"(overrides?: CallOverrides): Promise<[string]>;

    _exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_exchangeRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _leverageExecutor(overrides?: CallOverrides): Promise<[string]>;

    "_leverageExecutor()"(overrides?: CallOverrides): Promise<[string]>;

    _liquidationBonusAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_liquidationBonusAmount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _liquidationCollateralizationRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_liquidationCollateralizationRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _liquidationMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_liquidationMultiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxLiquidationSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_maxLiquidationSlippage()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _maxLiquidatorReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_maxLiquidatorReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _minLiquidatorReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_minLiquidatorReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _oracle(overrides?: CallOverrides): Promise<[string]>;

    "_oracle()"(overrides?: CallOverrides): Promise<[string]>;

    _oracleData(overrides?: CallOverrides): Promise<[string]>;

    "_oracleData()"(overrides?: CallOverrides): Promise<[string]>;

    _pauseOptions(
      _pauseProp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "_pauseOptions(uint8)"(
      _pauseProp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _pearlmit(overrides?: CallOverrides): Promise<[string]>;

    "_pearlmit()"(overrides?: CallOverrides): Promise<[string]>;

    _penrose(overrides?: CallOverrides): Promise<[string]>;

    "_penrose()"(overrides?: CallOverrides): Promise<[string]>;

    _protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_protocolFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _rateTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_rateTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _rateValidDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_rateValidDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalBorrow(overrides?: CallOverrides): Promise<[RebaseStructOutput]>;

    "_totalBorrow()"(overrides?: CallOverrides): Promise<[RebaseStructOutput]>;

    _totalBorrowCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_totalBorrowCap()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalCollateralShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_totalCollateralShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _userBorrowPart(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_userBorrowPart(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _userCollateralShare(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_userCollateralShare(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _yieldBox(overrides?: CallOverrides): Promise<[string]>;

    "_yieldBox()"(overrides?: CallOverrides): Promise<[string]>;

    addCollateral(
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addCollateral(uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowanceBorrow(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowanceBorrow(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveBorrow(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "approveBorrow(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeClosingFactor(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "computeClosingFactor(uint256,uint256,uint256)"(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "computeLiquidatorReward(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    "computeTVLInfo(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    "eip712Domain()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    permitBorrow(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeCollateral(
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeCollateral(uint256)"(
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "repay(uint256)"(
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLeverageExecutor(
      _executor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setLeverageExecutor(address)"(
      _executor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidationMaxSlippage(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setLiquidationMaxSlippage(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketConfig(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      _liquidationCollateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMarketConfig(address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      _liquidationCollateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAllowedParticipants(
      _participant: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateAllowedParticipants(address,bool)"(
      _participant: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateExchangeRate()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePause(
      _type: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePause(uint8,bool)"(
      _type: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePauseAll(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePauseAll(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  _asset(overrides?: CallOverrides): Promise<string>;

  "_asset()"(overrides?: CallOverrides): Promise<string>;

  _assetId(overrides?: CallOverrides): Promise<BigNumber>;

  "_assetId()"(overrides?: CallOverrides): Promise<BigNumber>;

  _collateral(overrides?: CallOverrides): Promise<string>;

  "_collateral()"(overrides?: CallOverrides): Promise<string>;

  _collateralId(overrides?: CallOverrides): Promise<BigNumber>;

  "_collateralId()"(overrides?: CallOverrides): Promise<BigNumber>;

  _collateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  "_collateralizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  _conservator(overrides?: CallOverrides): Promise<string>;

  "_conservator()"(overrides?: CallOverrides): Promise<string>;

  _exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  "_exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  _leverageExecutor(overrides?: CallOverrides): Promise<string>;

  "_leverageExecutor()"(overrides?: CallOverrides): Promise<string>;

  _liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "_liquidationBonusAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  _liquidationCollateralizationRate(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_liquidationCollateralizationRate()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _liquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "_liquidationMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  _maxLiquidationSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  "_maxLiquidationSlippage()"(overrides?: CallOverrides): Promise<BigNumber>;

  _maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

  "_maxLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  _minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

  "_minLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  _oracle(overrides?: CallOverrides): Promise<string>;

  "_oracle()"(overrides?: CallOverrides): Promise<string>;

  _oracleData(overrides?: CallOverrides): Promise<string>;

  "_oracleData()"(overrides?: CallOverrides): Promise<string>;

  _pauseOptions(
    _pauseProp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_pauseOptions(uint8)"(
    _pauseProp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _pearlmit(overrides?: CallOverrides): Promise<string>;

  "_pearlmit()"(overrides?: CallOverrides): Promise<string>;

  _penrose(overrides?: CallOverrides): Promise<string>;

  "_penrose()"(overrides?: CallOverrides): Promise<string>;

  _protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  "_protocolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  _rateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "_rateTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  _rateValidDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "_rateValidDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  _totalBorrow(overrides?: CallOverrides): Promise<RebaseStructOutput>;

  "_totalBorrow()"(overrides?: CallOverrides): Promise<RebaseStructOutput>;

  _totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

  "_totalBorrowCap()"(overrides?: CallOverrides): Promise<BigNumber>;

  _totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

  "_totalCollateralShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  _userBorrowPart(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_userBorrowPart(address)"(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _userCollateralShare(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_userCollateralShare(address)"(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _yieldBox(overrides?: CallOverrides): Promise<string>;

  "_yieldBox()"(overrides?: CallOverrides): Promise<string>;

  addCollateral(
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addCollateral(uint256,uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowanceBorrow(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowanceBorrow(address,address)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveBorrow(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "approveBorrow(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrow(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeClosingFactor(
    borrowPart: PromiseOrValue<BigNumberish>,
    collateralPartInAsset: PromiseOrValue<BigNumberish>,
    ratesPrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "computeClosingFactor(uint256,uint256,uint256)"(
    borrowPart: PromiseOrValue<BigNumberish>,
    collateralPartInAsset: PromiseOrValue<BigNumberish>,
    ratesPrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeLiquidatorReward(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "computeLiquidatorReward(address,uint256)"(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeTVLInfo(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountToSolvency: BigNumber;
      minTVL: BigNumber;
      maxTVL: BigNumber;
    }
  >;

  "computeTVLInfo(address,uint256)"(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountToSolvency: BigNumber;
      minTVL: BigNumber;
      maxTVL: BigNumber;
    }
  >;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  "eip712Domain()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  nonces(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonces(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  permitBorrow(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeCollateral(
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeCollateral(uint256)"(
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    part: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "repay(uint256)"(
    part: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueEth(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "rescueEth(uint256,address)"(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLeverageExecutor(
    _executor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setLeverageExecutor(address)"(
    _executor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidationMaxSlippage(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setLiquidationMaxSlippage(uint256)"(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketConfig(
    _oracle: PromiseOrValue<string>,
    _oracleData: PromiseOrValue<BytesLike>,
    _conservator: PromiseOrValue<string>,
    _protocolFee: PromiseOrValue<BigNumberish>,
    _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
    _minLiquidatorReward: PromiseOrValue<BigNumberish>,
    _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
    _totalBorrowCap: PromiseOrValue<BigNumberish>,
    _collateralizationRate: PromiseOrValue<BigNumberish>,
    _liquidationCollateralizationRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMarketConfig(address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
    _oracle: PromiseOrValue<string>,
    _oracleData: PromiseOrValue<BytesLike>,
    _conservator: PromiseOrValue<string>,
    _protocolFee: PromiseOrValue<BigNumberish>,
    _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
    _minLiquidatorReward: PromiseOrValue<BigNumberish>,
    _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
    _totalBorrowCap: PromiseOrValue<BigNumberish>,
    _collateralizationRate: PromiseOrValue<BigNumberish>,
    _liquidationCollateralizationRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAllowedParticipants(
    _participant: PromiseOrValue<string>,
    _val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateAllowedParticipants(address,bool)"(
    _participant: PromiseOrValue<string>,
    _val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExchangeRate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateExchangeRate()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePause(
    _type: PromiseOrValue<BigNumberish>,
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePause(uint8,bool)"(
    _type: PromiseOrValue<BigNumberish>,
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePauseAll(
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePauseAll(bool)"(
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    _asset(overrides?: CallOverrides): Promise<string>;

    "_asset()"(overrides?: CallOverrides): Promise<string>;

    _assetId(overrides?: CallOverrides): Promise<BigNumber>;

    "_assetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    _collateral(overrides?: CallOverrides): Promise<string>;

    "_collateral()"(overrides?: CallOverrides): Promise<string>;

    _collateralId(overrides?: CallOverrides): Promise<BigNumber>;

    "_collateralId()"(overrides?: CallOverrides): Promise<BigNumber>;

    _collateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "_collateralizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    _conservator(overrides?: CallOverrides): Promise<string>;

    "_conservator()"(overrides?: CallOverrides): Promise<string>;

    _exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "_exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    _leverageExecutor(overrides?: CallOverrides): Promise<string>;

    "_leverageExecutor()"(overrides?: CallOverrides): Promise<string>;

    _liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "_liquidationBonusAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    _liquidationCollateralizationRate(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_liquidationCollateralizationRate()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _liquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "_liquidationMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    _maxLiquidationSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxLiquidationSlippage()"(overrides?: CallOverrides): Promise<BigNumber>;

    _maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    _minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    "_minLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    _oracle(overrides?: CallOverrides): Promise<string>;

    "_oracle()"(overrides?: CallOverrides): Promise<string>;

    _oracleData(overrides?: CallOverrides): Promise<string>;

    "_oracleData()"(overrides?: CallOverrides): Promise<string>;

    _pauseOptions(
      _pauseProp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_pauseOptions(uint8)"(
      _pauseProp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _pearlmit(overrides?: CallOverrides): Promise<string>;

    "_pearlmit()"(overrides?: CallOverrides): Promise<string>;

    _penrose(overrides?: CallOverrides): Promise<string>;

    "_penrose()"(overrides?: CallOverrides): Promise<string>;

    _protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    "_protocolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    _rateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "_rateTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    _rateValidDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "_rateValidDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    _totalBorrow(overrides?: CallOverrides): Promise<RebaseStructOutput>;

    "_totalBorrow()"(overrides?: CallOverrides): Promise<RebaseStructOutput>;

    _totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalBorrowCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    _totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalCollateralShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    _userBorrowPart(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_userBorrowPart(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _userCollateralShare(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_userCollateralShare(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _yieldBox(overrides?: CallOverrides): Promise<string>;

    "_yieldBox()"(overrides?: CallOverrides): Promise<string>;

    addCollateral(
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addCollateral(uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowanceBorrow(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowanceBorrow(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveBorrow(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approveBorrow(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    "borrow(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    computeClosingFactor(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeClosingFactor(uint256,uint256,uint256)"(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeLiquidatorReward(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    "computeTVLInfo(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    "eip712Domain()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    permitBorrow(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCollateral(
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeCollateral(uint256)"(
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    repay(
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repay(uint256)"(
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLeverageExecutor(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLeverageExecutor(address)"(
      _executor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationMaxSlippage(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidationMaxSlippage(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketConfig(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      _liquidationCollateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketConfig(address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      _liquidationCollateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllowedParticipants(
      _participant: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAllowedParticipants(address,bool)"(
      _participant: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExchangeRate(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { updated: boolean; rate: BigNumber }>;

    "updateExchangeRate()"(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { updated: boolean; rate: BigNumber }>;

    updatePause(
      _type: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePause(uint8,bool)"(
      _type: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePauseAll(
      val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePauseAll(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "ApprovalBorrow(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): ApprovalBorrowEventFilter;
    ApprovalBorrow(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): ApprovalBorrowEventFilter;

    "ConservatorUpdated(address,address)"(
      old?: null,
      _new?: null
    ): ConservatorUpdatedEventFilter;
    ConservatorUpdated(old?: null, _new?: null): ConservatorUpdatedEventFilter;

    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;

    "ExchangeRateDurationUpdated(uint256,uint256)"(
      _oldVal?: null,
      _newVal?: null
    ): ExchangeRateDurationUpdatedEventFilter;
    ExchangeRateDurationUpdated(
      _oldVal?: null,
      _newVal?: null
    ): ExchangeRateDurationUpdatedEventFilter;

    "LeverageExecutorSet(address,address)"(
      oldVal?: null,
      newVal?: null
    ): LeverageExecutorSetEventFilter;
    LeverageExecutorSet(
      oldVal?: null,
      newVal?: null
    ): LeverageExecutorSetEventFilter;

    "Liquidated(address,address[],uint256,uint256,uint256,uint256)"(
      liquidator?: PromiseOrValue<string> | null,
      users?: null,
      liquidatorReward?: null,
      protocolReward?: null,
      repayedAmount?: null,
      collateralShareRemoved?: null
    ): LiquidatedEventFilter;
    Liquidated(
      liquidator?: PromiseOrValue<string> | null,
      users?: null,
      liquidatorReward?: null,
      protocolReward?: null,
      repayedAmount?: null,
      collateralShareRemoved?: null
    ): LiquidatedEventFilter;

    "LiquidationMaxSlippageUpdated(uint256,uint256)"(
      oldVal?: null,
      newVal?: null
    ): LiquidationMaxSlippageUpdatedEventFilter;
    LiquidationMaxSlippageUpdated(
      oldVal?: null,
      newVal?: null
    ): LiquidationMaxSlippageUpdatedEventFilter;

    "LiquidationMultiplierUpdated(uint256,uint256)"(
      oldVal?: null,
      newVal?: null
    ): LiquidationMultiplierUpdatedEventFilter;
    LiquidationMultiplierUpdated(
      oldVal?: null,
      newVal?: null
    ): LiquidationMultiplierUpdatedEventFilter;

    "LogAddCollateral(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: PromiseOrValue<BigNumberish> | null
    ): LogAddCollateralEventFilter;
    LogAddCollateral(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: PromiseOrValue<BigNumberish> | null
    ): LogAddCollateralEventFilter;

    "LogBorrow(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      part?: null
    ): LogBorrowEventFilter;
    LogBorrow(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      part?: null
    ): LogBorrowEventFilter;

    "LogBorrowCapUpdated(uint256,uint256)"(
      _oldVal?: null,
      _newVal?: null
    ): LogBorrowCapUpdatedEventFilter;
    LogBorrowCapUpdated(
      _oldVal?: null,
      _newVal?: null
    ): LogBorrowCapUpdatedEventFilter;

    "LogExchangeRate(uint256)"(rate?: null): LogExchangeRateEventFilter;
    LogExchangeRate(rate?: null): LogExchangeRateEventFilter;

    "LogRemoveCollateral(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: PromiseOrValue<BigNumberish> | null
    ): LogRemoveCollateralEventFilter;
    LogRemoveCollateral(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: PromiseOrValue<BigNumberish> | null
    ): LogRemoveCollateralEventFilter;

    "LogRepay(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      part?: null
    ): LogRepayEventFilter;
    LogRepay(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      part?: null
    ): LogRepayEventFilter;

    "OracleDataUpdated()"(): OracleDataUpdatedEventFilter;
    OracleDataUpdated(): OracleDataUpdatedEventFilter;

    "OracleUpdated(address)"(newAddr?: null): OracleUpdatedEventFilter;
    OracleUpdated(newAddr?: null): OracleUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PausedUpdated(uint8,bool,bool)"(
      _type?: PromiseOrValue<BigNumberish> | null,
      oldState?: null,
      newState?: null
    ): PausedUpdatedEventFilter;
    PausedUpdated(
      _type?: PromiseOrValue<BigNumberish> | null,
      oldState?: null,
      newState?: null
    ): PausedUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "UpdateParticipants(address,bool)"(
      participant?: PromiseOrValue<string> | null,
      status?: PromiseOrValue<boolean> | null
    ): UpdateParticipantsEventFilter;
    UpdateParticipants(
      participant?: PromiseOrValue<string> | null,
      status?: PromiseOrValue<boolean> | null
    ): UpdateParticipantsEventFilter;

    "ValueUpdated(uint256,uint256)"(
      valType?: null,
      _newVal?: null
    ): ValueUpdatedEventFilter;
    ValueUpdated(valType?: null, _newVal?: null): ValueUpdatedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    _asset(overrides?: CallOverrides): Promise<BigNumber>;

    "_asset()"(overrides?: CallOverrides): Promise<BigNumber>;

    _assetId(overrides?: CallOverrides): Promise<BigNumber>;

    "_assetId()"(overrides?: CallOverrides): Promise<BigNumber>;

    _collateral(overrides?: CallOverrides): Promise<BigNumber>;

    "_collateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    _collateralId(overrides?: CallOverrides): Promise<BigNumber>;

    "_collateralId()"(overrides?: CallOverrides): Promise<BigNumber>;

    _collateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "_collateralizationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    _conservator(overrides?: CallOverrides): Promise<BigNumber>;

    "_conservator()"(overrides?: CallOverrides): Promise<BigNumber>;

    _exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "_exchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    _leverageExecutor(overrides?: CallOverrides): Promise<BigNumber>;

    "_leverageExecutor()"(overrides?: CallOverrides): Promise<BigNumber>;

    _liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "_liquidationBonusAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    _liquidationCollateralizationRate(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_liquidationCollateralizationRate()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _liquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "_liquidationMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    _maxLiquidationSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxLiquidationSlippage()"(overrides?: CallOverrides): Promise<BigNumber>;

    _maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    _minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    "_minLiquidatorReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    _oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "_oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    _oracleData(overrides?: CallOverrides): Promise<BigNumber>;

    "_oracleData()"(overrides?: CallOverrides): Promise<BigNumber>;

    _pauseOptions(
      _pauseProp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_pauseOptions(uint8)"(
      _pauseProp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _pearlmit(overrides?: CallOverrides): Promise<BigNumber>;

    "_pearlmit()"(overrides?: CallOverrides): Promise<BigNumber>;

    _penrose(overrides?: CallOverrides): Promise<BigNumber>;

    "_penrose()"(overrides?: CallOverrides): Promise<BigNumber>;

    _protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    "_protocolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    _rateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "_rateTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    _rateValidDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "_rateValidDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    _totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalBorrow()"(overrides?: CallOverrides): Promise<BigNumber>;

    _totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalBorrowCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    _totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalCollateralShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    _userBorrowPart(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_userBorrowPart(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _userCollateralShare(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_userCollateralShare(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _yieldBox(overrides?: CallOverrides): Promise<BigNumber>;

    "_yieldBox()"(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addCollateral(uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowanceBorrow(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowanceBorrow(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveBorrow(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "approveBorrow(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "borrow(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeClosingFactor(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeClosingFactor(uint256,uint256,uint256)"(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeLiquidatorReward(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeTVLInfo(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    "eip712Domain()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    permitBorrow(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeCollateral(
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeCollateral(uint256)"(
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "repay(uint256)"(
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLeverageExecutor(
      _executor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setLeverageExecutor(address)"(
      _executor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidationMaxSlippage(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setLiquidationMaxSlippage(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketConfig(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      _liquidationCollateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMarketConfig(address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      _liquidationCollateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAllowedParticipants(
      _participant: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateAllowedParticipants(address,bool)"(
      _participant: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateExchangeRate()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePause(
      _type: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePause(uint8,bool)"(
      _type: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePauseAll(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePauseAll(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_asset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _assetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_assetId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_collateral()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _collateralId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_collateralId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _collateralizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_collateralizationRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _conservator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_conservator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_exchangeRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _leverageExecutor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_leverageExecutor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _liquidationBonusAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_liquidationBonusAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _liquidationCollateralizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_liquidationCollateralizationRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _liquidationMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_liquidationMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _maxLiquidationSlippage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_maxLiquidationSlippage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _maxLiquidatorReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_maxLiquidatorReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _minLiquidatorReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_minLiquidatorReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _oracleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_oracleData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _pauseOptions(
      _pauseProp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_pauseOptions(uint8)"(
      _pauseProp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _pearlmit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_pearlmit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _penrose(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_penrose()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_protocolFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _rateTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_rateTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _rateValidDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_rateValidDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _totalBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_totalBorrow()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalBorrowCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_totalBorrowCap()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _totalCollateralShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_totalCollateralShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _userBorrowPart(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_userBorrowPart(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _userCollateralShare(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_userCollateralShare(address)"(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_yieldBox()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCollateral(
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addCollateral(uint256,uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowanceBorrow(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowanceBorrow(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveBorrow(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "approveBorrow(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeClosingFactor(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeClosingFactor(uint256,uint256,uint256)"(
      borrowPart: PromiseOrValue<BigNumberish>,
      collateralPartInAsset: PromiseOrValue<BigNumberish>,
      ratesPrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeLiquidatorReward(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeTVLInfo(address,uint256)"(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eip712Domain()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    permitBorrow(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permitBorrow(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeCollateral(uint256)"(
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "repay(uint256)"(
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueEth(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "rescueEth(uint256,address)"(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLeverageExecutor(
      _executor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setLeverageExecutor(address)"(
      _executor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationMaxSlippage(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setLiquidationMaxSlippage(uint256)"(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketConfig(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      _liquidationCollateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMarketConfig(address,bytes,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _oracle: PromiseOrValue<string>,
      _oracleData: PromiseOrValue<BytesLike>,
      _conservator: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _liquidationBonusAmount: PromiseOrValue<BigNumberish>,
      _minLiquidatorReward: PromiseOrValue<BigNumberish>,
      _maxLiquidatorReward: PromiseOrValue<BigNumberish>,
      _totalBorrowCap: PromiseOrValue<BigNumberish>,
      _collateralizationRate: PromiseOrValue<BigNumberish>,
      _liquidationCollateralizationRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAllowedParticipants(
      _participant: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateAllowedParticipants(address,bool)"(
      _participant: PromiseOrValue<string>,
      _val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateExchangeRate()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePause(
      _type: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePause(uint8,bool)"(
      _type: PromiseOrValue<BigNumberish>,
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePauseAll(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePauseAll(bool)"(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
