/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Test, TestInterface } from "../Test";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxFee",
        type: "uint256",
      },
    ],
    name: "computeMintFeeTest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "borrowed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTVLInAsset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxTVLInAsset",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minLiquidatorReward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxLiquidatorReward",
        type: "uint256",
      },
    ],
    name: "getCallerReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_returnData",
        type: "bytes4",
      },
    ],
    name: "getRevert",
    outputs: [
      {
        internalType: "string",
        name: "result",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "x",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600160005534801561001557600080fd5b5061051e806100256000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630c55699c14610051578063191778cd1461006d57806373f368ca14610080578063d9cabbbb146100dd575b600080fd5b61005a60005481565b6040519081526020015b60405180910390f35b61005a61007b36600461022d565b6100f0565b6100d061008e366004610268565b604080517fffffffff00000000000000000000000000000000000000000000000000000000929092166020830152805160048184030181526024909201905290565b60405161006491906102aa565b61005a6100eb366004610317565b61019e565b60008460000361010257506000610195565b8486101561011257506000610195565b838610610120575081610195565b600061012c8686610372565b620186a061013a888a610372565b610144919061038b565b61014e91906103d1565b9050600061015c84866103e5565b9050600084620186a061016f858561040c565b6101799190610458565b61018391906104c0565b9050858112156101905750845b925050505b95945050505050565b6000670de0b6b3a764000084106101b6575081610226565b670d87e5559001800084116101cc575080610226565b60006101e8670d87e55590018000670de0b6b3a7640000610372565b6101f28585610372565b610204670d87e5559001800088610372565b61020e919061038b565b61021891906103d1565b6102229084610372565b9150505b9392505050565b600080600080600060a0868803121561024557600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561027a57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461022657600080fd5b60006020808352835180602085015260005b818110156102d8578581018301518582016040015282016102bc565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60008060006060848603121561032c57600080fd5b505081359360208301359350604090920135919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561038557610385610343565b92915050565b808202811582820484141761038557610385610343565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826103e0576103e06103a2565b500490565b818103600083128015838313168383128216171561040557610405610343565b5092915050565b808202600082127f80000000000000000000000000000000000000000000000000000000000000008414161561044457610444610343565b818105831482151761038557610385610343565b600082610467576104676103a2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156104bb576104bb610343565b500590565b80820182811260008312801582168215821617156104e0576104e0610343565b50509291505056fea26469706673582212200f780daf57ec24f6cc35fde69e272b9d217f1fb3a092ffd335d05faa28706bf264736f6c63430008160033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Test";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }
  static readonly contractName: "Test";

  public readonly contractName: "Test";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
