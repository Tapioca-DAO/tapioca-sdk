/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SimpleLeverageExecutor,
  SimpleLeverageExecutorInterface,
} from "../../../markets/leverage/SimpleLeverageExecutor";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IYieldBox",
        name: "_yb",
        type: "address",
      },
      {
        internalType: "contract ISwapper",
        name: "_swapper",
        type: "address",
      },
      {
        internalType: "contract ICluster",
        name: "_cluster",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "NotEnough",
    type: "error",
  },
  {
    inputs: [],
    name: "SenderNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapperNotAuthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "SwapperNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotValid",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "buildSwapDefaultData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cluster",
    outputs: [
      {
        internalType: "contract ICluster",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "assetId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "collateralAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "assetAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "collateralAmountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getAsset",
    outputs: [
      {
        internalType: "uint256",
        name: "assetAmountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "collateralId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "assetAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "collateralAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "assetAmountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "collateralAmountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICluster",
        name: "_cluster",
        type: "address",
      },
    ],
    name: "setCluster",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISwapper",
        name: "_swapper",
        type: "address",
      },
    ],
    name: "setSwapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapper",
    outputs: [
      {
        internalType: "contract ISwapper",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "direct",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "renounce",
        type: "bool",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "yieldBox",
    outputs: [
      {
        internalType: "contract IYieldBox",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620019c5380380620019c58339810160408190526200003491620000da565b600080546001600160a01b0319163390811782556040518592859285929091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160a01b03928316608052600380549284166001600160a01b03199384161790556002805491909316908216179091556000805490911633179055506200012e915050565b6001600160a01b0381168114620000d757600080fd5b50565b600080600060608486031215620000f057600080fd5b8351620000fd81620000c1565b60208501519093506200011081620000c1565b60408501519092506200012381620000c1565b809150509250925092565b60805161186d620001586000396000818161024201528181610be70152610c6e015261186d6000f3fe6080604052600436106100c75760003560e01c80639c82f2a411610074578063de4065771161004e578063de40657714610230578063e221165814610264578063e30c39781461029157600080fd5b80639c82f2a4146101d5578063c990ad1c146101f5578063dbd01de11461020357600080fd5b8063437be622116100a5578063437be622146101735780634e71e0c8146101935780638da5cb5b146101a857600080fd5b8063078dfbe7146100cc5780630fb5d60d146100ee5780632b3297f914610121575b600080fd5b3480156100d857600080fd5b506100ec6100e73660046111f0565b6102be565b005b3480156100fa57600080fd5b5061010e61010936600461123b565b6104ad565b6040519081526020015b60405180910390f35b34801561012d57600080fd5b5060035461014e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610118565b34801561017f57600080fd5b506100ec61018e3660046112f9565b610615565b34801561019f57600080fd5b506100ec6106dd565b3480156101b457600080fd5b5060005461014e9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101e157600080fd5b506100ec6101f03660046112f9565b6107f3565b61010e61010936600461123b565b34801561020f57600080fd5b5060025461014e9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561023c57600080fd5b5061014e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561027057600080fd5b5061028461027f36600461131d565b6108bb565b60405161011891906113ae565b34801561029d57600080fd5b5060015461014e9073ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff163314610344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b81156104685773ffffffffffffffffffffffffffffffffffffffff831615158061036b5750805b6103d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f776e61626c653a207a65726f20616464726573730000000000000000000000604482015260640161033b565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff85167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600180549091169055505050565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055505050565b6002546040517fe67e99080000000000000000000000000000000000000000000000000000000081526000600482018190523360248301529173ffffffffffffffffffffffffffffffffffffffff169063e67e990890604401602060405180830381865afa158015610523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054791906113c1565b61057d576040517f0d20b1c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610585610906565b60008061059484860186611467565b915091506105a789898985856000610a2a565b9250818310156105fb576040517f28e217f500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916600482015260240161033b565b6106088a89308987610bcb565b5050979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161033b565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1633811461075f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015260640161033b565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055600180549091169055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161033b565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60606108fe8484846040518060400160405280600281526020017f3078000000000000000000000000000000000000000000000000000000000000815250610ce3565b949350505050565b60035473ffffffffffffffffffffffffffffffffffffffff16610955576040517f1da137b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546003546040517fe67e99080000000000000000000000000000000000000000000000000000000081526000600482015273ffffffffffffffffffffffffffffffffffffffff918216602482015291169063e67e990890604401602060405180830381865afa1580156109ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f291906113c1565b610a28576040517f21aa578400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6003546040517fcf144a4e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287811660248301526044820187905260006064830181905292839291169063cf144a4e9060840161014060405180830381865afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad991906115af565b905073ffffffffffffffffffffffffffffffffffffffff881615610b1e57600354610b1e9073ffffffffffffffffffffffffffffffffffffffff8a8116911688610e63565b6003546040517fefa84c6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063efa84c6d908590610b7c9085908a9030908b90600401611665565b604080518083038185885af1158015610b99573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610bbe9190611728565b5098975050505050505050565b610c0c73ffffffffffffffffffffffffffffffffffffffff85167f000000000000000000000000000000000000000000000000000000000000000083610e63565b6040517f9a9af97a0000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff8481166024830152838116604483015260648201839052600060848301527f00000000000000000000000000000000000000000000000000000000000000001690639a9af97a9060a40160408051808303816000875af1158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda9190611728565b50505050505050565b6003546040517fcf144a4e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152858116602483015260448201859052600060648301819052606093909291169063cf144a4e9060840161014060405180830381865afa158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9491906115af565b6003546040517f5bf66e4800000000000000000000000000000000000000000000000000000000815291925060009173ffffffffffffffffffffffffffffffffffffffff90911690635bf66e4890610df2908590889060040161174c565b602060405180830381865afa158015610e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3391906117e9565b90508084604051602001610e48929190611802565b60405160208183030381529060405292505050949350505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11610ee4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f53616665417070726f76653a206e6f20636f6e74726163740000000000000000604482015260640161033b565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526000604483018190529160609186169060640160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905251610f7a919061181b565b6000604051808303816000865af19150503d8060008114610fb7576040519150601f19603f3d011682016040523d82523d6000602084013e610fbc565b606091505b509092509050818015610fe7575080511580610fe7575080806020019051810190610fe791906113c1565b61104d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f53616665417070726f76653a20617070726f7665206661696c65640000000000604482015260640161033b565b82156111b65760405173ffffffffffffffffffffffffffffffffffffffff85811660248301526044820185905286169060640160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052516110e3919061181b565b6000604051808303816000865af19150503d8060008114611120576040519150601f19603f3d011682016040523d82523d6000602084013e611125565b606091505b50909250905081801561115057508051158061115057508080602001905181019061115091906113c1565b6111b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f53616665417070726f76653a20617070726f7665206661696c65640000000000604482015260640161033b565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146111df57600080fd5b50565b80151581146111df57600080fd5b60008060006060848603121561120557600080fd5b8335611210816111bd565b92506020840135611220816111e2565b91506040840135611230816111e2565b809150509250925092565b600080600080600080600060c0888a03121561125657600080fd5b873596506020880135611268816111bd565b95506040880135611278816111bd565b945060608801359350608088013561128f816111bd565b925060a088013567ffffffffffffffff808211156112ac57600080fd5b818a0191508a601f8301126112c057600080fd5b8135818111156112cf57600080fd5b8b60208285010111156112e157600080fd5b60208301945080935050505092959891949750929550565b60006020828403121561130b57600080fd5b8135611316816111bd565b9392505050565b60008060006060848603121561133257600080fd5b833561133d816111bd565b9250602084013561134d816111bd565b929592945050506040919091013590565b60005b83811015611379578181015183820152602001611361565b50506000910152565b6000815180845261139a81602086016020860161135e565b601f01601f19169290920160200192915050565b6020815260006113166020830184611382565b6000602082840312156113d357600080fd5b8151611316816111e2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611430576114306113de565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561145f5761145f6113de565b604052919050565b6000806040838503121561147a57600080fd5b8235915060208084013567ffffffffffffffff8082111561149a57600080fd5b818601915086601f8301126114ae57600080fd5b8135818111156114c0576114c06113de565b6114d284601f19601f84011601611436565b915080825287848285010111156114e857600080fd5b80848401858401376000848284010152508093505050509250929050565b60006080828403121561151857600080fd5b61152061140d565b90508151815260208201516020820152604082015160408201526060820151606082015292915050565b60006040828403121561155c57600080fd5b6040516040810181811067ffffffffffffffff8211171561157f5761157f6113de565b80604052508091508251611592816111e2565b815260208301516115a2816111e2565b6020919091015292915050565b60008183036101408112156115c357600080fd5b6040516060810181811067ffffffffffffffff821117156115e6576115e66113de565b60405260808212156115f757600080fd5b6115ff61140d565b9150835161160c816111bd565b8252602084810151908301526040840151611626816111bd565b6040830152606084810151908301528181526116458560808601611506565b602082015261165885610100860161154a565b6040820152949350505050565b8451805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015181850152604080840151909216828501526060928301518385015280880151805160808601528082015160a08601528083015160c08601529092015160e0840152860151805115156101008401520151151561012082015260006101a08561014084015273ffffffffffffffffffffffffffffffffffffffff85166101608401528061018084015261171d81840185611382565b979650505050505050565b6000806040838503121561173b57600080fd5b505080516020909101519092909150565b8251805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015181850152604080840151909216828501526060928301518385015280860151805160808601528082015160a08601528083015160c08601529092015160e084015284015180511515610100840152015115156101208201526000610160806101408401526117e081840185611382565b95945050505050565b6000602082840312156117fb57600080fd5b5051919050565b8281526040602082015260006108fe6040830184611382565b6000825161182d81846020870161135e565b919091019291505056fea264697066735822122064adc0395896d1267c705020bba8b41ecf306714113b0f90044a9367092097c264736f6c63430008160033";

type SimpleLeverageExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleLeverageExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleLeverageExecutor__factory extends ContractFactory {
  constructor(...args: SimpleLeverageExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SimpleLeverageExecutor";
  }

  override deploy(
    _yb: PromiseOrValue<string>,
    _swapper: PromiseOrValue<string>,
    _cluster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleLeverageExecutor> {
    return super.deploy(
      _yb,
      _swapper,
      _cluster,
      overrides || {}
    ) as Promise<SimpleLeverageExecutor>;
  }
  override getDeployTransaction(
    _yb: PromiseOrValue<string>,
    _swapper: PromiseOrValue<string>,
    _cluster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_yb, _swapper, _cluster, overrides || {});
  }
  override attach(address: string): SimpleLeverageExecutor {
    return super.attach(address) as SimpleLeverageExecutor;
  }
  override connect(signer: Signer): SimpleLeverageExecutor__factory {
    return super.connect(signer) as SimpleLeverageExecutor__factory;
  }
  static readonly contractName: "SimpleLeverageExecutor";

  public readonly contractName: "SimpleLeverageExecutor";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleLeverageExecutorInterface {
    return new utils.Interface(_abi) as SimpleLeverageExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleLeverageExecutor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SimpleLeverageExecutor;
  }
}
