/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace ICommonData {
  export type IWithdrawParamsStruct = {
    withdraw: PromiseOrValue<boolean>;
    withdrawLzFeeAmount: PromiseOrValue<BigNumberish>;
    withdrawOnOtherChain: PromiseOrValue<boolean>;
    withdrawLzChainId: PromiseOrValue<BigNumberish>;
    withdrawAdapterParams: PromiseOrValue<BytesLike>;
    unwrap: PromiseOrValue<boolean>;
    refundAddress: PromiseOrValue<string>;
    zroPaymentAddress: PromiseOrValue<string>;
  };

  export type IWithdrawParamsStructOutput = [
    boolean,
    BigNumber,
    boolean,
    number,
    string,
    boolean,
    string,
    string
  ] & {
    withdraw: boolean;
    withdrawLzFeeAmount: BigNumber;
    withdrawOnOtherChain: boolean;
    withdrawLzChainId: number;
    withdrawAdapterParams: string;
    unwrap: boolean;
    refundAddress: string;
    zroPaymentAddress: string;
  };

  export type ICommonExternalContractsStruct = {
    magnetar: PromiseOrValue<string>;
    singularity: PromiseOrValue<string>;
    bigBang: PromiseOrValue<string>;
  };

  export type ICommonExternalContractsStructOutput = [
    string,
    string,
    string
  ] & { magnetar: string; singularity: string; bigBang: string };
}

export declare namespace MagnetarMarketModule2 {
  export type DepositRepayAndRemoveCollateralFromMarketDataStruct = {
    market: PromiseOrValue<string>;
    user: PromiseOrValue<string>;
    depositAmount: PromiseOrValue<BigNumberish>;
    repayAmount: PromiseOrValue<BigNumberish>;
    collateralAmount: PromiseOrValue<BigNumberish>;
    extractFromSender: PromiseOrValue<boolean>;
    withdrawCollateralParams: ICommonData.IWithdrawParamsStruct;
    valueAmount: PromiseOrValue<BigNumberish>;
  };

  export type DepositRepayAndRemoveCollateralFromMarketDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    ICommonData.IWithdrawParamsStructOutput,
    BigNumber
  ] & {
    market: string;
    user: string;
    depositAmount: BigNumber;
    repayAmount: BigNumber;
    collateralAmount: BigNumber;
    extractFromSender: boolean;
    withdrawCollateralParams: ICommonData.IWithdrawParamsStructOutput;
    valueAmount: BigNumber;
  };

  export type ExitPositionAndRemoveCollateralDataStruct = {
    user: PromiseOrValue<string>;
    externalData: ICommonData.ICommonExternalContractsStruct;
    removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct;
    valueAmount: PromiseOrValue<BigNumberish>;
  };

  export type ExitPositionAndRemoveCollateralDataStructOutput = [
    string,
    ICommonData.ICommonExternalContractsStructOutput,
    IUSDOBase.IRemoveAndRepayStructOutput,
    BigNumber
  ] & {
    user: string;
    externalData: ICommonData.ICommonExternalContractsStructOutput;
    removeAndRepayData: IUSDOBase.IRemoveAndRepayStructOutput;
    valueAmount: BigNumber;
  };
}

export declare namespace ITapiocaOptionBroker {
  export type IOptionsExitDataStruct = {
    exit: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    oTAPTokenID: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsExitDataStructOutput = [boolean, string, BigNumber] & {
    exit: boolean;
    target: string;
    oTAPTokenID: BigNumber;
  };
}

export declare namespace ITapiocaOptionLiquidityProvision {
  export type IOptionsUnlockDataStruct = {
    unlock: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsUnlockDataStructOutput = [boolean, string, BigNumber] & {
    unlock: boolean;
    target: string;
    tokenId: BigNumber;
  };
}

export declare namespace IUSDOBase {
  export type IRemoveAndRepayStruct = {
    removeAssetFromSGL: PromiseOrValue<boolean>;
    removeAmount: PromiseOrValue<BigNumberish>;
    repayAssetOnBB: PromiseOrValue<boolean>;
    repayAmount: PromiseOrValue<BigNumberish>;
    removeCollateralFromBB: PromiseOrValue<boolean>;
    collateralAmount: PromiseOrValue<BigNumberish>;
    exitData: ITapiocaOptionBroker.IOptionsExitDataStruct;
    unlockData: ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStruct;
    assetWithdrawData: ICommonData.IWithdrawParamsStruct;
    collateralWithdrawData: ICommonData.IWithdrawParamsStruct;
  };

  export type IRemoveAndRepayStructOutput = [
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    ITapiocaOptionBroker.IOptionsExitDataStructOutput,
    ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStructOutput,
    ICommonData.IWithdrawParamsStructOutput,
    ICommonData.IWithdrawParamsStructOutput
  ] & {
    removeAssetFromSGL: boolean;
    removeAmount: BigNumber;
    repayAssetOnBB: boolean;
    repayAmount: BigNumber;
    removeCollateralFromBB: boolean;
    collateralAmount: BigNumber;
    exitData: ITapiocaOptionBroker.IOptionsExitDataStructOutput;
    unlockData: ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStructOutput;
    assetWithdrawData: ICommonData.IWithdrawParamsStructOutput;
    collateralWithdrawData: ICommonData.IWithdrawParamsStructOutput;
  };
}

export interface MagnetarMarketModule2Interface extends utils.Interface {
  functions: {
    "MAGNETAR_ACTION_MARKET()": FunctionFragment;
    "MAGNETAR_ACTION_MARKET_MODULE()": FunctionFragment;
    "MAGNETAR_ACTION_PERMIT()": FunctionFragment;
    "MAGNETAR_ACTION_TAP_TOKEN()": FunctionFragment;
    "MAGNETAR_ACTION_TOFT()": FunctionFragment;
    "MAGNETAR_ACTION_YIELDBOX_MODULE()": FunctionFragment;
    "cluster()": FunctionFragment;
    "depositRepayAndRemoveCollateralFromMarket((address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes,bool,address,address),uint256))": FunctionFragment;
    "exitPositionAndRemoveCollateral((address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes,bool,address,address),(bool,uint256,bool,uint16,bytes,bool,address,address)),uint256))": FunctionFragment;
    "modules(uint8)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAGNETAR_ACTION_MARKET"
      | "MAGNETAR_ACTION_MARKET()"
      | "MAGNETAR_ACTION_MARKET_MODULE"
      | "MAGNETAR_ACTION_MARKET_MODULE()"
      | "MAGNETAR_ACTION_PERMIT"
      | "MAGNETAR_ACTION_PERMIT()"
      | "MAGNETAR_ACTION_TAP_TOKEN"
      | "MAGNETAR_ACTION_TAP_TOKEN()"
      | "MAGNETAR_ACTION_TOFT"
      | "MAGNETAR_ACTION_TOFT()"
      | "MAGNETAR_ACTION_YIELDBOX_MODULE"
      | "MAGNETAR_ACTION_YIELDBOX_MODULE()"
      | "cluster"
      | "cluster()"
      | "depositRepayAndRemoveCollateralFromMarket"
      | "depositRepayAndRemoveCollateralFromMarket((address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes,bool,address,address),uint256))"
      | "exitPositionAndRemoveCollateral"
      | "exitPositionAndRemoveCollateral((address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes,bool,address,address),(bool,uint256,bool,uint16,bytes,bool,address,address)),uint256))"
      | "modules"
      | "modules(uint8)"
      | "onERC721Received"
      | "onERC721Received(address,address,uint256,bytes)"
      | "owner"
      | "owner()"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "transferOwnership"
      | "transferOwnership(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_MARKET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_MARKET()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_MARKET_MODULE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_MARKET_MODULE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_PERMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_PERMIT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_TAP_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_TAP_TOKEN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_TOFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_TOFT()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_YIELDBOX_MODULE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAGNETAR_ACTION_YIELDBOX_MODULE()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cluster", values?: undefined): string;
  encodeFunctionData(functionFragment: "cluster()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket",
    values: [
      MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket((address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes,bool,address,address),uint256))",
    values: [
      MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPositionAndRemoveCollateral",
    values: [MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPositionAndRemoveCollateral((address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes,bool,address,address),(bool,uint256,bool,uint16,bytes,bool,address,address)),uint256))",
    values: [MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "modules",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "modules(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_MARKET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_MARKET()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_MARKET_MODULE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_MARKET_MODULE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_PERMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_PERMIT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_TAP_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_TAP_TOKEN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_TOFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_TOFT()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_YIELDBOX_MODULE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAGNETAR_ACTION_YIELDBOX_MODULE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cluster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cluster()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRepayAndRemoveCollateralFromMarket((address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes,bool,address,address),uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPositionAndRemoveCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPositionAndRemoveCollateral((address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes,bool,address,address),(bool,uint256,bool,uint16,bytes,bool,address,address)),uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modules(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;

  events: {
    "ClusterSet(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClusterSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ClusterSet(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
}

export interface ClusterSetEventObject {
  oldCluster: string;
  newCluster: string;
}
export type ClusterSetEvent = TypedEvent<
  [string, string],
  ClusterSetEventObject
>;

export type ClusterSetEventFilter = TypedEventFilter<ClusterSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MagnetarMarketModule2 extends BaseContract {
  contractName: "MagnetarMarketModule2";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MagnetarMarketModule2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAGNETAR_ACTION_MARKET(overrides?: CallOverrides): Promise<[number]>;

    "MAGNETAR_ACTION_MARKET()"(overrides?: CallOverrides): Promise<[number]>;

    MAGNETAR_ACTION_MARKET_MODULE(overrides?: CallOverrides): Promise<[number]>;

    "MAGNETAR_ACTION_MARKET_MODULE()"(
      overrides?: CallOverrides
    ): Promise<[number]>;

    MAGNETAR_ACTION_PERMIT(overrides?: CallOverrides): Promise<[number]>;

    "MAGNETAR_ACTION_PERMIT()"(overrides?: CallOverrides): Promise<[number]>;

    MAGNETAR_ACTION_TAP_TOKEN(overrides?: CallOverrides): Promise<[number]>;

    "MAGNETAR_ACTION_TAP_TOKEN()"(overrides?: CallOverrides): Promise<[number]>;

    MAGNETAR_ACTION_TOFT(overrides?: CallOverrides): Promise<[number]>;

    "MAGNETAR_ACTION_TOFT()"(overrides?: CallOverrides): Promise<[number]>;

    MAGNETAR_ACTION_YIELDBOX_MODULE(
      overrides?: CallOverrides
    ): Promise<[number]>;

    "MAGNETAR_ACTION_YIELDBOX_MODULE()"(
      overrides?: CallOverrides
    ): Promise<[number]>;

    cluster(overrides?: CallOverrides): Promise<[string]>;

    "cluster()"(overrides?: CallOverrides): Promise<[string]>;

    depositRepayAndRemoveCollateralFromMarket(
      _data: MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositRepayAndRemoveCollateralFromMarket((address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes,bool,address,address),uint256))"(
      _data: MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitPositionAndRemoveCollateral(
      _data: MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "exitPositionAndRemoveCollateral((address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes,bool,address,address),(bool,uint256,bool,uint16,bytes,bool,address,address)),uint256))"(
      _data: MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modules(
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { moduleAddress: string }>;

    "modules(uint8)"(
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { moduleAddress: string }>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAGNETAR_ACTION_MARKET(overrides?: CallOverrides): Promise<number>;

  "MAGNETAR_ACTION_MARKET()"(overrides?: CallOverrides): Promise<number>;

  MAGNETAR_ACTION_MARKET_MODULE(overrides?: CallOverrides): Promise<number>;

  "MAGNETAR_ACTION_MARKET_MODULE()"(overrides?: CallOverrides): Promise<number>;

  MAGNETAR_ACTION_PERMIT(overrides?: CallOverrides): Promise<number>;

  "MAGNETAR_ACTION_PERMIT()"(overrides?: CallOverrides): Promise<number>;

  MAGNETAR_ACTION_TAP_TOKEN(overrides?: CallOverrides): Promise<number>;

  "MAGNETAR_ACTION_TAP_TOKEN()"(overrides?: CallOverrides): Promise<number>;

  MAGNETAR_ACTION_TOFT(overrides?: CallOverrides): Promise<number>;

  "MAGNETAR_ACTION_TOFT()"(overrides?: CallOverrides): Promise<number>;

  MAGNETAR_ACTION_YIELDBOX_MODULE(overrides?: CallOverrides): Promise<number>;

  "MAGNETAR_ACTION_YIELDBOX_MODULE()"(
    overrides?: CallOverrides
  ): Promise<number>;

  cluster(overrides?: CallOverrides): Promise<string>;

  "cluster()"(overrides?: CallOverrides): Promise<string>;

  depositRepayAndRemoveCollateralFromMarket(
    _data: MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositRepayAndRemoveCollateralFromMarket((address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes,bool,address,address),uint256))"(
    _data: MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitPositionAndRemoveCollateral(
    _data: MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "exitPositionAndRemoveCollateral((address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes,bool,address,address),(bool,uint256,bool,uint16,bytes,bool,address,address)),uint256))"(
    _data: MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modules(
    moduleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "modules(uint8)"(
    moduleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAGNETAR_ACTION_MARKET(overrides?: CallOverrides): Promise<number>;

    "MAGNETAR_ACTION_MARKET()"(overrides?: CallOverrides): Promise<number>;

    MAGNETAR_ACTION_MARKET_MODULE(overrides?: CallOverrides): Promise<number>;

    "MAGNETAR_ACTION_MARKET_MODULE()"(
      overrides?: CallOverrides
    ): Promise<number>;

    MAGNETAR_ACTION_PERMIT(overrides?: CallOverrides): Promise<number>;

    "MAGNETAR_ACTION_PERMIT()"(overrides?: CallOverrides): Promise<number>;

    MAGNETAR_ACTION_TAP_TOKEN(overrides?: CallOverrides): Promise<number>;

    "MAGNETAR_ACTION_TAP_TOKEN()"(overrides?: CallOverrides): Promise<number>;

    MAGNETAR_ACTION_TOFT(overrides?: CallOverrides): Promise<number>;

    "MAGNETAR_ACTION_TOFT()"(overrides?: CallOverrides): Promise<number>;

    MAGNETAR_ACTION_YIELDBOX_MODULE(overrides?: CallOverrides): Promise<number>;

    "MAGNETAR_ACTION_YIELDBOX_MODULE()"(
      overrides?: CallOverrides
    ): Promise<number>;

    cluster(overrides?: CallOverrides): Promise<string>;

    "cluster()"(overrides?: CallOverrides): Promise<string>;

    depositRepayAndRemoveCollateralFromMarket(
      _data: MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositRepayAndRemoveCollateralFromMarket((address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes,bool,address,address),uint256))"(
      _data: MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    exitPositionAndRemoveCollateral(
      _data: MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "exitPositionAndRemoveCollateral((address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes,bool,address,address),(bool,uint256,bool,uint16,bytes,bool,address,address)),uint256))"(
      _data: MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    modules(
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "modules(uint8)"(
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClusterSet(address,address)"(
      oldCluster?: PromiseOrValue<string> | null,
      newCluster?: PromiseOrValue<string> | null
    ): ClusterSetEventFilter;
    ClusterSet(
      oldCluster?: PromiseOrValue<string> | null,
      newCluster?: PromiseOrValue<string> | null
    ): ClusterSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MAGNETAR_ACTION_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    "MAGNETAR_ACTION_MARKET()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAGNETAR_ACTION_MARKET_MODULE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MAGNETAR_ACTION_MARKET_MODULE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAGNETAR_ACTION_PERMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAGNETAR_ACTION_PERMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAGNETAR_ACTION_TAP_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    "MAGNETAR_ACTION_TAP_TOKEN()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAGNETAR_ACTION_TOFT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAGNETAR_ACTION_TOFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAGNETAR_ACTION_YIELDBOX_MODULE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "MAGNETAR_ACTION_YIELDBOX_MODULE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cluster(overrides?: CallOverrides): Promise<BigNumber>;

    "cluster()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositRepayAndRemoveCollateralFromMarket(
      _data: MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositRepayAndRemoveCollateralFromMarket((address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes,bool,address,address),uint256))"(
      _data: MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitPositionAndRemoveCollateral(
      _data: MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "exitPositionAndRemoveCollateral((address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes,bool,address,address),(bool,uint256,bool,uint16,bytes,bool,address,address)),uint256))"(
      _data: MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modules(
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "modules(uint8)"(
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAGNETAR_ACTION_MARKET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAGNETAR_ACTION_MARKET()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAGNETAR_ACTION_MARKET_MODULE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAGNETAR_ACTION_MARKET_MODULE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAGNETAR_ACTION_PERMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAGNETAR_ACTION_PERMIT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAGNETAR_ACTION_TAP_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAGNETAR_ACTION_TAP_TOKEN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAGNETAR_ACTION_TOFT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAGNETAR_ACTION_TOFT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAGNETAR_ACTION_YIELDBOX_MODULE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAGNETAR_ACTION_YIELDBOX_MODULE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cluster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cluster()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositRepayAndRemoveCollateralFromMarket(
      _data: MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositRepayAndRemoveCollateralFromMarket((address,address,uint256,uint256,uint256,bool,(bool,uint256,bool,uint16,bytes,bool,address,address),uint256))"(
      _data: MagnetarMarketModule2.DepositRepayAndRemoveCollateralFromMarketDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitPositionAndRemoveCollateral(
      _data: MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "exitPositionAndRemoveCollateral((address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes,bool,address,address),(bool,uint256,bool,uint16,bytes,bool,address,address)),uint256))"(
      _data: MagnetarMarketModule2.ExitPositionAndRemoveCollateralDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modules(
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "modules(uint8)"(
      moduleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
