/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TapiocaDeployerInterface extends utils.Interface {
  functions: {
    "computeAddress(bytes32,bytes32)": FunctionFragment;
    "computeAddress(bytes32,bytes32,address)": FunctionFragment;
    "deploy(uint256,bytes32,bytes,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeAddress(bytes32,bytes32)"
      | "computeAddress(bytes32,bytes32,address)"
      | "deploy"
      | "deploy(uint256,bytes32,bytes,string)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeAddress(bytes32,bytes32)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAddress(bytes32,bytes32,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy(uint256,bytes32,bytes,string)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeAddress(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAddress(bytes32,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploy(uint256,bytes32,bytes,string)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TapiocaDeployer extends BaseContract {
  contractName: "TapiocaDeployer";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TapiocaDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "computeAddress(bytes32,bytes32)"(
      salt: PromiseOrValue<BytesLike>,
      bytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "computeAddress(bytes32,bytes32,address)"(
      salt: PromiseOrValue<BytesLike>,
      bytecodeHash: PromiseOrValue<BytesLike>,
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    deploy(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      contractName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deploy(uint256,bytes32,bytes,string)"(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      contractName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "computeAddress(bytes32,bytes32)"(
    salt: PromiseOrValue<BytesLike>,
    bytecodeHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "computeAddress(bytes32,bytes32,address)"(
    salt: PromiseOrValue<BytesLike>,
    bytecodeHash: PromiseOrValue<BytesLike>,
    deployer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  deploy(
    amount: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BytesLike>,
    bytecode: PromiseOrValue<BytesLike>,
    contractName: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deploy(uint256,bytes32,bytes,string)"(
    amount: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BytesLike>,
    bytecode: PromiseOrValue<BytesLike>,
    contractName: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "computeAddress(bytes32,bytes32)"(
      salt: PromiseOrValue<BytesLike>,
      bytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "computeAddress(bytes32,bytes32,address)"(
      salt: PromiseOrValue<BytesLike>,
      bytecodeHash: PromiseOrValue<BytesLike>,
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deploy(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "deploy(uint256,bytes32,bytes,string)"(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      contractName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    "computeAddress(bytes32,bytes32)"(
      salt: PromiseOrValue<BytesLike>,
      bytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeAddress(bytes32,bytes32,address)"(
      salt: PromiseOrValue<BytesLike>,
      bytecodeHash: PromiseOrValue<BytesLike>,
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      contractName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deploy(uint256,bytes32,bytes,string)"(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      contractName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "computeAddress(bytes32,bytes32)"(
      salt: PromiseOrValue<BytesLike>,
      bytecodeHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeAddress(bytes32,bytes32,address)"(
      salt: PromiseOrValue<BytesLike>,
      bytecodeHash: PromiseOrValue<BytesLike>,
      deployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      contractName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deploy(uint256,bytes32,bytes,string)"(
      amount: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      bytecode: PromiseOrValue<BytesLike>,
      contractName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
